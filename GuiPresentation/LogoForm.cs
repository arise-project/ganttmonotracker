//----------------------------------------------------------------------------------------------
// <copyright file="LogoForm.cs" company="Artificial Renassance Inner Selft">
// Copyright (c) Artificial Renassance Inner Selft.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------------------------------
//author:Eugene Pirogov
//email:pirogov.e@gmail.com
//license:GPLv3.0
//date:4/12/2014
// Auto-generated by Glade# Code Generator
// http://eric.extremeboredom.net/projects/gladesharpcodegenerator/

namespace GanttMonoTracker.GuiPresentation
{
    using System;
    using System.Data;
    using System.IO;

    using GanttMonoTracker.DrawingPresentation;

    using Gtk;

    using TaskManagerInterface;

    public class LogoForm : IGuiMessageDialog
    {
		private Window thisWindow;
        private DrawingArea dwLogo;
        private DataSet fGanttSource;
		#pragma warning disable 0649
        
		private GanttDiagramm fLogoDiagram;
        
        [Glade.Widget]
        private TextView tvReleaseNews;

        /// <summary>
        /// The drwAssigment container.
        /// </summary>
        [Glade.Widget]
        private VBox vbox1;

		#pragma warning restore 0649

        public LogoForm()
        {
            Stream stream = System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream("ViewLogoForm.glade");
            Glade.XML glade = new Glade.XML(stream, "LogoMindow", null);
            stream.Close();
            glade.Autoconnect(this);
            thisWindow = ((Window)(glade.GetWidget("LogoMindow")));
            thisWindow.WindowPosition = WindowPosition.Center;
            thisWindow.SetDefaultSize(480,460);
            thisWindow.KeyReleaseEvent += (o, args) =>
            {
                this.thisWindow.HideAll();
            };
            ReadMe();

            // Assigment
            dwLogo = new GanttDiagramm ();
			//TODO: move readonly to strategy
			var ganttSource = ((IGanttSource)dwLogo);
			ganttSource.ReadOnly = true;
			ganttSource.StaticSource = GetLogoSource();
			ganttSource.DateNowVisible = false;

            var readme = vbox1.Children [1];
            var readme1 = vbox1.Children [2];
            vbox1.Remove (readme1);
            vbox1.Add (dwLogo);
            vbox1.Add (readme);
            vbox1.Add (readme1);
            dwLogo.Show ();
        }

        public string Title
        {
            get
            {
                return thisWindow.Title;
            }

            set
            {
                thisWindow.Title = value;
            }
        }

        public void Destroy()
        {
            thisWindow.Destroy();
        }

        public void Dispose()
        {
            fLogoDiagram.Dispose();
            thisWindow.Dispose();
        }

        public void Show()
        {
            thisWindow.ShowAll();
        }

        public int ShowDialog()
        {
            Show();
            return 0;
        }

        private DataSet GetLogoSource()
        {
			//TODO: Looks like builder pattern needed here
            fGanttSource = GanttDataSetBuilder.Create();
            var actors = fGanttSource.Tables["Actor"];
            actors.Rows.Add(new object [] {1, "Eugene Pirogov","pirogov.e@gmail.com"});
            var tasks = fGanttSource.Tables["Task"];
            var taskStates = fGanttSource.Tables["TaskState"];
            taskStates.Rows.Add(new object [] {0,"Open",0x80,0,0xFF,0xFF}); // logo color

            // breaks
            tasks.Rows.Add(new object [] {0,1,"Actors [Name, Email]",DateTime.Now.AddDays(-5),DateTime.Now.AddDays(3),0});
            tasks.Rows.Add(new object [] {1,1,"Tasks [Description, Start Time, End Time, State]",DateTime.Now.AddDays(-3),DateTime.Now.AddDays(2),0});
            tasks.Rows.Add(new object [] {2,1,"Gantt Diagramm",DateTime.Now.AddDays(-7),DateTime.Now.AddDays(4),0});
            tasks.Rows.Add(new object [] {3,1,"Assigment Diagramm",DateTime.Now.AddDays(0),DateTime.Now.AddDays(4),0});

            fGanttSource.Tables.Add("DataRange");
            fGanttSource.Tables["DataRange"].Columns.Add("MinDate",typeof(DateTime));
            fGanttSource.Tables["DataRange"].Columns.Add("MaxDate",typeof(DateTime));

            DataRow rangeRow = fGanttSource.Tables["DataRange"].NewRow();
            rangeRow["MinDate"] = DateTime.Now.AddDays(-5);
            rangeRow["MaxDate"] = DateTime.Now.AddDays(4);

            fGanttSource.Tables["DataRange"].Rows.Add(rangeRow);

            return fGanttSource;
        }

        private void ReadMe()
        {
            var readme =  "Resources".GetPath();
            readme =  Path.Combine(readme,"readme.txt");
			if (File.Exists(readme))
			{
				using (var sr = new StreamReader(readme))
				{
					var text = sr.ReadToEnd();
					text = text.Substring(0, text.Substring(1).IndexOf("Gantt Mono Tracker"));
					text = text.Substring(0, text.LastIndexOf("\n"));
					tvReleaseNews.Buffer.Text = text;
					sr.Close();
				}
			}
        }
    }
}