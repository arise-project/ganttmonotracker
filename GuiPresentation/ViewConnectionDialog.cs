//author:Eugene Pirogov
//email:eugene.intalk@gmail.com
//license:GPLv3.0
//date:4/12/2014
// Auto-generated by Glade# Code Generator
// http://eric.extremeboredom.net/projects/gladesharpcodegenerator/

using System;
using System.Data;
using System.IO;
using System.Reflection;
using Gtk;

using GanttTracker.TaskManager.ManagerException;
using TaskManagerInterface;

namespace GanttMonoTracker.GuiPresentation
{
	
	public class ViewConnectionDialog : IGuiConnection
	{

		private int fStateInID = -1;

		private int fStateOutID = -1;

		private ListStore fStateInStore;

		private ListStore fStateOutStore;

		private Gtk.Dialog thisDialog;
		
		[Glade.Widget()]
		private Gtk.VBox vbox2;
		
		[Glade.Widget()]
		private Gtk.VBox vbox1;
		
		[Glade.Widget()]
		private Gtk.Label lbConnectionAction;
		
		[Glade.Widget()]
		private Gtk.HBox hbox1;
		
		[Glade.Widget()]
		private Gtk.Label lbNameDescription;
		
		[Glade.Widget()]
		private Gtk.Entry entName;
		
		[Glade.Widget()]
		private Gtk.HBox hbox2;
		
		[Glade.Widget()]
		private Gtk.Label lbStateInDescription;
		
		[Glade.Widget()]
		private Gtk.ComboBoxEntry cbStateIn;
		
		[Glade.Widget()]
		private Gtk.HBox hbox3;
		
		[Glade.Widget()]
		private Gtk.Label lbStateOutDescription;
		
		[Glade.Widget()]
		private Gtk.ComboBoxEntry cbStateOut;
		
		[Glade.Widget()]
		private Gtk.HButtonBox hbuttonbox2;
		
		[Glade.Widget()]
		private Gtk.Button btnCancel;
		
		[Glade.Widget()]
		private Gtk.Button btnOk;
		
		public ViewConnectionDialog(Window parent, DataSet taskStateSource)
		{
			Stream stream = System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream("ViewConnectionDialog.glade");
			Glade.XML glade = new Glade.XML(stream, "ViewConnectionDialog", null);
			stream.Close();
			glade.Autoconnect(this);
			thisDialog = ((Gtk.Dialog)(glade.GetWidget("ViewConnectionDialog")));
			thisDialog.TransientFor = parent;
			thisDialog.Modal = true;
			TaskStateSource = taskStateSource;
			
			cbStateIn.Sensitive = false;
			lbConnectionAction.Text = "Create Connection";
			cbStateOut.Entry.IsEditable = false;
			cbStateIn.Changed += new EventHandler(OnCbStateInChanged);
			cbStateOut.Changed += new EventHandler(OnCbStateOutChanged);			
		}
		
		public int Run()
		{
			thisDialog.ShowAll();
			
			int result = 0;
			for (
			; true; 
			)
			{
				result = thisDialog.Run();
				if ((result != ((int)(Gtk.ResponseType.None))))
				{
					break;
				}
			}
			thisDialog.Destroy();
			return result;
		}
		
		#region IGuiMessageDialog Implementation
		
		public int ShowDialog()
		{
			return Run();
		}
		
		public string Title
		{
			get
			{
				return thisDialog.Title;
			}
			set
			{
				thisDialog.Title = value;
			}			
		}
		
		#endregion
		
		#region IDisposable Implementation
		
		public void Dispose()
		{
			this.thisDialog.Dispose();
		}
		
		#endregion
		
		#region IConnectionView Implementation
	
		public string Name
		{
			get
			{
				return entName.Text;
			}
			
			set
			{
				entName.Text = value;
			}
		}
		
		public int MappingID { get; set; }
		
		public int StateID { get; set; }
		
		#endregion
		
		#region IGuiConnection interface
	
		public DataSet TaskStateSource { get; set; }
		
		public void BindStateIn()
		{
			if (TaskStateSource != null)
			{
				fStateInStore = new ListStore(typeof(int),typeof(string));
				cbStateIn.Clear();
				foreach (DataRow row in TaskStateSource.Tables["TaskState"].Rows)
				{
					fStateInStore.AppendValues((int)row["ID"],(string)row["Name"]);				
				}		
				cbStateIn.Model = fStateInStore;			
				Gtk.CellRendererText stateText = new Gtk.CellRendererText();		
				stateText.Style = Pango.Style.Oblique;
				stateText.ForegroundGdk = new Gdk.Color(0x63,0,0);				
				cbStateIn.PackStart(stateText,true);
				cbStateIn.AddAttribute(stateText,"text",1);							 
				TreeIter iter;
				if (fStateInStore.GetIterFirst(out iter))
				{
					cbStateIn.SetActiveIter(iter);				
				}
			}
			else
				throw new NotAllowedException("TaskStateSource not set to instance");
		}
		
		public void BindStateOut()
		{
			if (TaskStateSource != null)
			{
				fStateOutStore = new ListStore(typeof(int),typeof(string));
				cbStateOut.Clear();
				foreach (DataRow row in TaskStateSource.Tables["TaskState"].Rows)
				{
					fStateOutStore.AppendValues((int)row["ID"],(string)row["Name"]);								
				}		
				cbStateOut.Model = fStateOutStore;			
				Gtk.CellRendererText stateText = new Gtk.CellRendererText();		
				stateText.Style = Pango.Style.Oblique;				
				cbStateOut.PackStart(stateText,true);
				cbStateOut.AddAttribute(stateText,"text",1);			 
				TreeIter iter;
				if (fStateOutStore.GetIterFirst(out iter))
				{
					cbStateOut.SetActiveIter(iter);				
				}
			}
			else
				throw new NotAllowedException("TaskStateSource not set to instance");
		}	
		
		#endregion
		

		private void OnCbStateInChanged(object sender, EventArgs args)
		{
			if (cbStateIn.Active != -1)
			{
				fStateInID = (int)TaskStateSource.Tables["TaskState"].Rows[cbStateIn.Active]["ID"];
				cbStateIn.Entry.Text = (string)TaskStateSource.Tables["TaskState"].Rows[cbStateIn.Active]["Name"];				
			}
		}
		

		private void OnCbStateOutChanged(object sender, EventArgs args)
		{
			if (cbStateOut.Active != -1)
			{
				fStateOutID = (int)TaskStateSource.Tables["TaskState"].Rows[cbStateOut.Active]["ID"];
				cbStateOut.Entry.Text = (string)TaskStateSource.Tables["TaskState"].Rows[cbStateOut.Active]["Name"];				
			}
		}	
	}
	
}
