//author:Eugene Pirogov
//email:eugene.intalk@gmail.com
//license:GPLv3.0
//date:4/12/2014
// Auto-generated by Glade# Code Generator
// http://eric.extremeboredom.net/projects/gladesharpcodegenerator/

using System;
using System.Threading;
using System.Linq;
using System.Data;
using System.IO;
using System.Reflection;
using Gtk;
using TaskManagerInterface;
using GanttTracker.TaskManager.ManagerException;

namespace GanttMonoTracker.GuiPresentation
{
	public class ViewTaskDialog : IGuiTask, IGuiTracker
	{
		ListStore fStateStore;


		ListStore fActorStore;


		int fStateID = -1;


		int fActorID = -1;


		string fComment;


		Gtk.Dialog thisDialog;


		[Glade.Widget()]
		Gtk.ComboBoxEntry cbActor;


		[Glade.Widget()]
		Gtk.TextView tvDescription;


		[Glade.Widget()]
		Gtk.Calendar calStartTime;


		[Glade.Widget()]
		Gtk.Calendar calEndTime;


		[Glade.Widget()]
		Gtk.ComboBoxEntry cbState;


		[Glade.Widget()]
		Gtk.TextView tvComment;	


		[Glade.Widget()]
		Gtk.ScrolledWindow swComment;


		[Glade.Widget()]
		Gtk.Label lbCommentDescription;


		string fDescription;


		public ViewTaskDialog(Window parent, bool isTaskInit)
		{
			Stream stream = System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream("ViewTaskDialog.glade");
			Glade.XML glade = new Glade.XML(stream, "ViewTaskDialog", null);
			stream.Close();
			glade.Autoconnect(this);
			thisDialog = ((Gtk.Dialog)(glade.GetWidget("ViewTaskDialog")));
			thisDialog.Modal = true;
			thisDialog.TransientFor = parent;
			thisDialog.WindowPosition = WindowPosition.CenterAlways;

			cbActor.Entry.IsEditable = false;
			cbActor.Changed += new EventHandler(OnCbActorChanged);
			calStartTime.Date = DateTime.Now.Date;
			calEndTime.Date = DateTime.Now.Date;
			cbState.Entry.IsEditable = false;
			cbState.Changed += new EventHandler(OnCbStateChanged);

			IsInitTask = isTaskInit;
			tvDescription.KeyReleaseEvent += HandleKeyReleaseEvent;
			tvComment.KeyReleaseEvent += CommentKeyReleaseEvent;
		}


		void HandleKeyReleaseEvent (object o, KeyReleaseEventArgs args)
		{
			fDescription = tvDescription.Buffer.Text;
		}


		void CommentKeyReleaseEvent (object o, KeyReleaseEventArgs args)
		{
			fComment = tvComment.Buffer.Text;
		}


		public int Run()
		{
			thisDialog.Show();

			if (IsInitTask)
			{
				tvComment.Visible = false;
				fStateID = (int)StateSource.Tables["TaskState"].Rows[0]["ID"];
				lbCommentDescription.Visible = false;
			}
			else
			{
				tvDescription.Editable = false;
			}

			int result = 0;
			for (; true;) 
			{
				result = thisDialog.Run();
				if ((result != ((int)(Gtk.ResponseType.None))))
				{
					break;
				}
				Thread.Sleep(500);
			}
			thisDialog.Destroy();
			return result;
		}


		public bool IsInitTask { get; private set; }


		public string Comment 
		{
			get
			{
				return tvComment.Buffer.Text;
			} 
			set
			{
				tvComment.Buffer.Text = value;
			}
		}


		private void SetComment() {	}
		
		#region ITaskView Implementation
		
		public bool ActorPresent { get; set; }


		public int ActorID
		{
			get
			{
				if (!ActorPresent)
					throw new ManagementException(ExceptionType.NotAllowed,"Actor not present");
				return fActorID;
			}
			
			set
			{
				ActorPresent = true;
				if (ActorSource == null)
					throw new ManagementException(ExceptionType.NotAllowed,"Bind combo before with BindActor method");
				int index = 0;
				foreach(DataRow row in ActorSource.Tables["Actor"].Rows)
				{
					if ((int)row["ID"] == 	value)
					{
						cbActor.Active = index;
						fActorID = value;
						return;
					}
					index++;
				}
				throw new ManagementException(ExceptionType.NotAllowed,"ActorID not found in Actor Source");
			}
		}


		public string Description 
		{
			get
			{

				return string.IsNullOrWhiteSpace(fComment) ? fDescription : fDescription + Environment.NewLine + fComment;
			}
			
			set
			{
				fDescription = value;
				tvDescription.Buffer.Text = value;
			
			}
		}


		public DateTime StartTime  
		{
			get
			{
				DateTime startTime = calStartTime.Date.Date;
				return startTime;
			}
						
			set
			{
				calStartTime.Date = value;
			}
		}


		public DateTime EndTime  
		{
			get
			{
				DateTime endTime = calEndTime.Date.Date;
				return endTime;
			}
			
			set
			{
				calEndTime.Date = value;
			}
		}


		public int StateID  
		{
			get
			{
				return fStateID;
			}
			
			set
			{
				if (StateSource == null)
					throw new ManagementException(ExceptionType.NotAllowed,"Bind combo before with BindState method");
				int index = 0;
				foreach(DataRow row in StateSource.Tables["TaskState"].Rows)
				{
					if ((int)row["ID"] == 	value)
					{
						cbState.Active = index;
						fStateID = value;
						return;
					}
					index++;
				}
				throw new ManagementException(ExceptionType.NotAllowed,"StateID not found in State Source");
			}
		}
		
		#endregion
		
		#region IDispasable Implementation
		
		public void Dispose()
		{
			thisDialog.Dispose();
		}	
		
		#endregion
		
		#region IGuiMessageDialog
		
		public int ShowDialog()
		{
			return Run();
		}	
		
		
		public string Title
		{
			get
			{
				return thisDialog.Title;
			}
			
			set
			{
				thisDialog.Title = value;
			}
		}
		
		#endregion

		#region TaskManagerInterface.ITaskGui implementation
		
		 
		public DataSet TaskSource {	get;set; }
		

		public DataSet ActorSource { get; set; }
		

		public DataSet StateSource { get; set; }
			

		public void BindTask()	{ }

			
		public void BindActor()
		{
			fActorStore = new ListStore(typeof(int),typeof(string));
			cbActor.Clear();
			foreach (DataRow row in ActorSource.Tables["Actor"].Rows)
			{
				fActorStore.AppendValues((int)row["ID"],(string)row["Name"]);
			}
			cbActor.Model = fActorStore;
			Gtk.CellRendererText actorText = new Gtk.CellRendererText();
			actorText.Style = Pango.Style.Oblique;
			//actorText.BackgroundGdk = new Gdk.Color(0x63,0,0);
			cbActor.PackStart(actorText,true);
			cbActor.AddAttribute(actorText,"text",1);
			TreeIter iter;
			if (fActorStore.GetIterFirst(out iter))
			{
				cbActor.SetActiveIter(iter);
				fActorID = (int)ActorSource.Tables["Actor"].Rows[0]["ID"];
			}
		}	


		public void BindState()
		{
			fStateStore = new ListStore(typeof(int),typeof(string));
			cbState.Clear();
			foreach (DataRow row in StateSource.Tables["TaskState"].Rows)
			{
				fStateStore.AppendValues((int)row["ID"],(string)row["Name"]);
			}
			cbState.Model = fStateStore;
			Gtk.CellRendererText stateText = new Gtk.CellRendererText();
			cbState.PackStart(stateText,true);
			cbState.AddAttribute(stateText,"text",1);
			TreeIter iter;
			if (fStateStore.GetIterFirst(out iter))
			{
				cbState.SetActiveIter(iter);
				fStateID = (int)StateSource.Tables["TaskState"].Rows[0]["ID"];
			}
		}
		
		#endregion	
		
		void OnCbActorChanged(object sender, EventArgs args)
		{
			if (cbActor.Active != -1)
			{
				ActorID = (int)ActorSource.Tables["Actor"].Rows[cbActor.Active]["ID"];
				cbActor.Entry.Text = (string)ActorSource.Tables["Actor"].Rows[cbActor.Active]["Name"];				
			}
		}		
		

		void OnCbStateChanged(object sender, EventArgs args)
		{
			if (cbState.Active != -1)
			{
				StateID = (int)StateSource.Tables["TaskState"].Rows[cbState.Active]["ID"];
				cbState.Entry.Text = (string)StateSource.Tables["TaskState"].Rows[cbState.Active]["Name"];
				Console.WriteLine(fStateID.ToString());
			}
		}
	}
}
