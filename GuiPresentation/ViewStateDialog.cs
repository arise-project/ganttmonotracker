// Auto-generated by Glade# Code Generator
// http://eric.extremeboredom.net/projects/gladesharpcodegenerator/

using System;
using System.Collections;
using System.Data;
using System.IO;
using Gtk;

using GanttTracker.StateManager;
using GanttTracker.TaskManager.ManagerException;
using GanttMonoTracker.ExceptionPresentation;
using TaskManagerInterface;

using Arise.Logic;

namespace GanttMonoTracker.GuiPresentation
{	
	public class ViewStateDialog : IGuiState, IGuiMessageDialog,IDisposable
	{
		
		private Gtk.Dialog thisDialog;
		
		[Glade.Widget()]
		private Gtk.VBox dialogVbox1;
		
		[Glade.Widget()]
		private Gtk.HButtonBox dialogActionArea1;
		
		[Glade.Widget()]
		private Gtk.Button cancelbutton1;
		
		[Glade.Widget()]
		private Gtk.Button okbutton1;
		
		[Glade.Widget()]
		private Gtk.Button btnApply;
		
		[Glade.Widget()]
		private Gtk.HBox hbox1;
		
		[Glade.Widget()]
		private Gtk.VBox vbox4;
		
		[Glade.Widget()]
		private Gtk.HBox hbox5;
		
		[Glade.Widget()]
		private Gtk.Label lbZoomDescription;
		
		[Glade.Widget()]
		private Gtk.SpinButton spbZoom;
		
		[Glade.Widget()]
		private Gtk.Button btnAllZoom;
		
		[Glade.Widget()]
		private Gtk.DrawingArea daState;
		
		[Glade.Widget()]
		private Gtk.VBox vbox1;
		
		[Glade.Widget()]
		private Gtk.VBox vbox2;
		
		[Glade.Widget()]
		private Gtk.HBox hbox2;
		
		[Glade.Widget()]
		private Gtk.Label lbStateSearch;
		
		[Glade.Widget()]
		private Gtk.Entry entStateSearch;
		
		[Glade.Widget()]
		private Gtk.Button btnSearch;
		
		[Glade.Widget()]
		private Gtk.ScrolledWindow scrolledwindow1;
		
		[Glade.Widget()]
		private Gtk.TreeView tvState;
		
		[Glade.Widget()]
		private Gtk.HBox hbox3;
		
		[Glade.Widget()]
		private Gtk.Button btnCreateState;
		
		[Glade.Widget()]
		private Gtk.Button btnEditState;
		
		[Glade.Widget()]
		private Gtk.Button btnDeleteState;
		
		[Glade.Widget()]
		private Gtk.VBox vbox3;
		
		[Glade.Widget()]
		private Gtk.ScrolledWindow scrolledwindow2;
		
		[Glade.Widget()]
		private Gtk.TreeView tvStateConnection;
		
		[Glade.Widget()]
		private Gtk.HBox hbox4;
		
		[Glade.Widget()]
		private Gtk.Button btnCreateConnection;
		
		[Glade.Widget()]
		private Gtk.Button btnEditConnection;
		
		[Glade.Widget()]
		private Gtk.Button btnDeleteConnection;
		
		
		public ViewStateDialog(Window parent, IGuiCore guiCore)
		{
		    Initialize(parent, guiCore);
		}
		
		private void Initialize(Window parent, IGuiCore guiCore)
		{
			fStateCore = new StateCore(guiCore, this); 
			Stream stream = System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream("ViewStateDialog.glade");
			Glade.XML glade = new Glade.XML(stream, "EditStatesDialog", null);
			stream.Close();
			glade.Autoconnect(this);
			thisDialog = ((Gtk.Dialog)(glade.GetWidget("EditStatesDialog")));
			thisDialog.Modal = true;
			thisDialog.TransientFor = parent;
			thisDialog.SetDefaultSize(800,600);			
			
			btnApply.Clicked += new EventHandler(OnApply);		
			
			btnSearch.Clicked += new EventHandler(OnStateSearch);
			btnCreateState.Clicked += new EventHandler(OnCreateState);
			btnEditState.Clicked += new EventHandler(OnEditState);
			btnDeleteState.Clicked += new EventHandler(OnDeleteState);
			
			btnCreateConnection.Clicked += new EventHandler(OnCreateConnection);
			btnEditConnection.Clicked += new EventHandler(OnEditConnection);
			btnDeleteConnection.Clicked += new EventHandler(OnDeleteConnection);
			
			fTaskStateStore = new TreeStore(typeof(int), typeof(string),typeof(int));
			
			tvState.HeadersVisible = true;			
			tvState.AppendColumn("ID",new CellRendererText(), "text", 1);
			tvState.AppendColumn("Name",new CellRendererText(), "text", 1);
			tvState.GetColumn(0).Visible = false;
			
			tvStateConnection.HeadersVisible = true;			
			tvStateConnection.AppendColumn("ID",new CellRendererText(), "text", 1);
			tvStateConnection.AppendColumn("Name",new CellRendererText(), "text", 1);
			tvStateConnection.GetColumn(0).Visible = false;
			
			fStateSource = fStateCore.TaskManager.TaskStateSource;		
			
			BindStateSearchDictionary();
			BindStates();		 		
			BindStateSearchCompletion();
		}
		
		public int Run()
		{			
			thisDialog.ShowAll();
			
			int result = 0;
			for (
			; true; 
			) 
			{
				result = thisDialog.Run();				
				if ((result != ((int)(Gtk.ResponseType.None))) && result != ((int)(Gtk.ResponseType.Apply)))
				{
					break;
				}
			}
			thisDialog.Destroy();
			return result;
		}
		
		#region IGuiMessageDialog Implementation
		
		public int ShowDialog()
		{
			return Run();
		}
		
		public string Title
		{
			get
			{
				return thisDialog.Title;
			}
			set
			{
				thisDialog.Title = value;
			}			
		}
		
		#endregion
		
		#region IDisposable Implementation
		
		public void Dispose()
		{
			this.thisDialog.Dispose();
		}
		
		#endregion
		
		#region IGuiCore Implementation
		
		private CoreState fState;
		public CoreState State
		{
			get
			{
				return fState;
			}
			
			set
			{
				fState = value;
			}			
		}
		
		#endregion
		
		#region IGuiState Implementation
	
		private DataSet fStateSource;
		public DataSet StateSource
		{
			get
			{
				return fStateSource;
			}
			
			set
			{
				fStateSource = value;
			}
		}		
				
		public void BindStates()
		{		
			fTaskStateStore.Clear();
			foreach (DataRow row in fStateSource.Tables["TaskState"].Rows)
			{								
				fTaskStateStore.AppendValues(row["ID"], row["Name"]);
				if (fStateSearchDictionary == null)				 
					throw new NotAllowedException("State Search Dictionary no set to instance of object");
				if (!fStateSearchDictionary.ContainsKey(row["Name"]))
					fStateSearchDictionary.Add(row["Name"],row["Name"]);
			}			
			tvState.Model = fTaskStateStore;	
						
		}
		
		
		public void BindConnections(IManagerEntity stateEntry)
		{
			State state = (State)stateEntry;
			fTaskStateConnectionStore = new TreeStore(typeof(int),typeof(string));			  
			fTaskStateConnectionStore.Clear();		
			foreach (int connectionID in state.Connections.Keys)
			{
				State connectedState = (State)StateCore.TaskManager.GetTaskStateConnection(connectionID); 								
				fTaskStateStore.AppendValues(connectionID, connectedState.Name);				 
			}			
			tvStateConnection.Model = fTaskStateConnectionStore; 
		}
		
		public void CreateConnection(IManagerEntity stateEntry,IManagerEntity connectedEntry)
		{
		}
		
		public void EditConnection(IManagerEntity stateEntry,IManagerEntity connectedEntry)
		{
		}
		
		public void DeleteConnection(IManagerEntity stateEntry,IManagerEntity connectedEntry)
		{
		}
		
		public void ClearConnections(IManagerEntity stateEntry)
		{
		}
		
		#endregion
		
		
		private void BindStateSearchDictionary()
		{
		  fStateSearchDictionary = new Hashtable();  
		}
		
		private TreeStore fTaskStateStore;
		public TreeStore TaskStateStore
		{
			get
			{
				return fTaskStateStore;
			}
			
			set
			{
				fTaskStateStore = value;
			}			
		}
		
		private TreeStore fTaskStateConnectionStore;
		public TreeStore TaskStateConnectionStore
		{
			get
			{
				return fTaskStateConnectionStore;
			}
			
			set
			{
				fTaskStateConnectionStore = value;
			}			
		}
		
		private StateCore fStateCore;
		private StateCore StateCore
		{
			get
			{
				return fStateCore;
			}
			set
			{
				fStateCore = value;
			}
		}
		
		private void OnApply(object sender, EventArgs args)
		{
			fStateCore.StorageManager.Save();						
		}
		
		private string fStateSearch;
		
		public string StateSearch
		{
			get
			{
				return fStateSearch;
			}
			
			set
			{
				fStateSearch = value;
			}
		} 
		
		private Hashtable fStateSearchDictionary;
		private ListStore fStateSearchDictionaryStore;
		public Hashtable StateSearchDictionary		
		{
			get
			{
				return fStateSearchDictionary;
			}
			
			set
			{
				fStateSearchDictionary = value;
			}
		}
		
		public void BindStateSearchCompletion()
		{
			entStateSearch.Completion = new EntryCompletion();
			fStateSearchDictionaryStore = new ListStore(typeof(string));
			if (this.fStateSearchDictionary == null)
				throw new NotAllowedException("State Search Dictionary no set to instance of object");
			foreach (object searchKey in fStateSearchDictionary.Keys)
				fStateSearchDictionaryStore.AppendValues(searchKey);
			
			entStateSearch.Completion.Model =fStateSearchDictionaryStore; 
			entStateSearch.Completion.TextColumn = 0; 
		}
		
		private void OnStateSearch(object sender, EventArgs args)
		{
			fStateSearch = entStateSearch.Text;
			if (fStateSearch.Trim().Length > 0)
			{			
				if (fStateSearchDictionary == null)
				  throw new NotAllowedException("State Search Dictionary no set to instance of object");
				
				if (!fStateSearchDictionary.ContainsKey(fStateSearch))
				{
					fStateSearchDictionary.Add(fStateSearch,fStateSearch);
					BindStateSearchCompletion();
				}
				
				//fStateSource = Arise.Logic.DataSearch.GetFilteredDataSet(fStateCore.TaskManager.TaskStateSource, fStateSearch);				
			}
			else
				fStateSource = fStateCore.TaskManager.TaskStateSource;
			BindStates();
		}
		
		private void OnCreateState(object sender, EventArgs args)
		{
			fStateCore.CreateTaskState();
		}		
		
		private void OnEditState(object sender, EventArgs args)
		{
			TreeModel model;
			TreeIter iter;
			((TreeSelection)tvState.Selection).GetSelected (out model, out iter);				
			int stateId = -1;
			bool stateRequired = true;
			try
			{
				stateId = (int)model.GetValue(iter,0);
			}
			catch(Exception)
			{
				stateRequired = false;
				IGuiMessageDialog dialog = MessageFactory.Instance.CreateMessageDialog("Select state to edit" ,thisDialog);
				dialog.Title = "State Edit";
				dialog.ShowDialog();				
			}
			if (stateRequired && stateId != -1)
			{
				fStateCore.EditTaskState(stateId);				
			}													
		}
		
		private void OnDeleteState(object sender, EventArgs args)
		{
			TreeModel model;
			TreeIter iter;
			((TreeSelection)tvState.Selection).GetSelected (out model, out iter);				
			int stateId = -1;
			bool stateRequired = true;
			try
			{
				stateId = (int)model.GetValue(iter,0);
			}
			catch(Exception)
			{
				stateRequired = false;
				IGuiMessageDialog dialog = MessageFactory.Instance.CreateMessageDialog("Select state to edit" ,thisDialog);
				dialog.Title = "State Edit";
				dialog.ShowDialog();				
			}
			if (stateRequired && stateId != -1)
			{
				fStateCore.DeleteTaskState(stateId);
			}							
		}
		
		private void OnCreateConnection(object sender, EventArgs args)
		{
			TreeModel model;
			TreeIter iter;
			((TreeSelection)tvState.Selection).GetSelected (out model, out iter);				
			int stateId = -1;
			bool stateRequired = true;
			try
			{
				stateId = (int)model.GetValue(iter,0);
			}
			catch(Exception)
			{
				stateRequired = false;
				IGuiMessageDialog dialog = MessageFactory.Instance.CreateMessageDialog("Select state to edit" ,thisDialog);
				dialog.Title = "State Edit";
				dialog.ShowDialog();				
			}
			if (stateRequired && stateId != -1)
			{				
				fStateCore.CreateTaskStateConnection(stateId);
			}			
		}
		
		private void OnEditConnection(object sender, EventArgs args)
		{
		}
		
		private void OnDeleteConnection(object sender, EventArgs args)
		{
		}
		

	}
	
}
