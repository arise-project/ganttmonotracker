//----------------------------------------------------------------------------------------------
// <copyright file="ViewTaskAssign.cs" company="Artificial Renassance Inner Selft">
// Copyright (c) Artificial Renassance Inner Selft.  All rights reserved.
// </copyright>
//-------------------------------------------------------------------------------------------------
//author:Eugene Pirogov
//email:eugene.intalk@gmail.com
//license:GPLv3.0
//date:4/12/2014
// Auto-generated by Glade# Code Generator
// http://eric.extremeboredom.net/projects/gladesharpcodegenerator/

namespace GanttMonoTracker.GuiPresentation
{
    using System;
    using System.Data;
    using System.IO;
    using System.Threading;

    using GanttTracker.TaskManager.ManagerException;

    using Gtk;

    using TaskManagerInterface;

    public class ViewTaskAssign : IGuiMessageDialog, IDisposable
    {
		int fActorID;
		ListStore fActorStore;
		string fComment;

		#pragma warning disable 0649

        [Glade.Widget]
        ComboBoxEntry cbActor;
        
        [Glade.Widget]
        Label lbAssignAction;
        Dialog thisDialog;
        [Glade.Widget]
        TextView tvComment;

		#pragma warning restore 0649

        public ViewTaskAssign(Window parent)
        {
            Stream stream = System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream("ViewTaskAssign.glade");
            Glade.XML glade = new Glade.XML(stream, "ViewTaskAssign", null);
            stream.Close();
            glade.Autoconnect(this);

            thisDialog = ((Dialog)(glade.GetWidget("ViewTaskAssign")));
            thisDialog.Modal = true;
            thisDialog.TransientFor = parent;
            thisDialog.SetDefaultSize(200,450);
            thisDialog.WindowPosition = WindowPosition.Center;

            cbActor.Entry.IsEditable = false;
            cbActor.Changed += new EventHandler(OnCbActorChanged);
            tvComment.KeyReleaseEvent += CommentKeyReleaseEvent;
        }

        public int ActorID
        {
            get
            {
                return fActorID;
            }

            set
            {
                if (ActorSource == null)
                {
                    throw new ManagementException(ExceptionType.NotAllowed,"Bind combo before with BindActor method");
                }

                int index = 0;
                foreach(DataRow row in ActorSource.Tables["Actor"].Rows)
                {
                    if ((int)row["ID"] == 	value)
                    {
                        cbActor.Active = index;
                        fActorID = value;
                        return;
                    }

                    index++;
                }

                throw new ManagementException(ExceptionType.NotAllowed,"ActorID not found in Actor Source");
            }
        }

        public DataSet ActorSource
        {
            get;
            set;
        }

        public string AssignAction
        {
            get
            {
                return lbAssignAction.Text;
            }

            set
            {
                lbAssignAction.Text = value;
            }
        }

        public string Comment
        {
            get
            {
                return tvComment.Buffer.Text;
            }

            set
            {
                tvComment.Buffer.Text = value;
            }
        }

        public string Title
        {
            get
            {
                return thisDialog.Title;
            }

            set
            {
                thisDialog.Title = value;
            }
        }

        public void BindActor()
        {
            fActorStore = new ListStore(typeof(int),typeof(string));
            cbActor.Clear();
            foreach (DataRow row in ActorSource.Tables["Actor"].Rows)
            {
                fActorStore.AppendValues((int)row["ID"],(string)row["Name"]);
            }

            cbActor.Model = fActorStore;
            CellRendererText actorText = new CellRendererText();
            actorText.Style = Pango.Style.Oblique;

            //actorText.BackgroundGdk = new Gdk.Color(0x63,0,0);
            cbActor.PackStart(actorText,true);
            cbActor.AddAttribute(actorText,"text",1);
            TreeIter iter;
            if (fActorStore.GetIterFirst(out iter))
            {
                cbActor.SetActiveIter(iter);
                fActorID = (int)ActorSource.Tables["Actor"].Rows[0]["ID"];
            }
        }

        public void Dispose()
        {
            this.thisDialog.Dispose();
        }

        public int Run()
        {
            thisDialog.ShowAll();

            int result = 0;
            for (; true;)
            {
                result = thisDialog.Run();
                if ((result != ((int)(ResponseType.None))))
                {
                    break;
                }

                Thread.Sleep(500);
            }

            thisDialog.Destroy();
            return result;
        }

        public int ShowDialog()
        {
            return Run();
        }

        void CommentKeyReleaseEvent(object o, KeyReleaseEventArgs args)
        {
            fComment = tvComment.Buffer.Text;
        }

        private void OnCbActorChanged(object sender, EventArgs args)
        {
            if (cbActor.Active != -1)
            {
                ActorID = (int)ActorSource.Tables["Actor"].Rows[cbActor.Active]["ID"];
                cbActor.Entry.Text = (string)ActorSource.Tables["Actor"].Rows[cbActor.Active]["Name"];
            }
        }
    }
}