

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0500 */
/* at Fri Sep 10 13:28:29 2010
 */
/* Compiler settings for ..\Interfaces\WebKit.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __WebKit_h__
#define __WebKit_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IAccessibleComparable_FWD_DEFINED__
#define __IAccessibleComparable_FWD_DEFINED__
typedef interface IAccessibleComparable IAccessibleComparable;
#endif 	/* __IAccessibleComparable_FWD_DEFINED__ */


#ifndef __IWebScriptObject_FWD_DEFINED__
#define __IWebScriptObject_FWD_DEFINED__
typedef interface IWebScriptObject IWebScriptObject;
#endif 	/* __IWebScriptObject_FWD_DEFINED__ */


#ifndef __IDOMViewCSS_FWD_DEFINED__
#define __IDOMViewCSS_FWD_DEFINED__
typedef interface IDOMViewCSS IDOMViewCSS;
#endif 	/* __IDOMViewCSS_FWD_DEFINED__ */


#ifndef __IDOMObject_FWD_DEFINED__
#define __IDOMObject_FWD_DEFINED__
typedef interface IDOMObject IDOMObject;
#endif 	/* __IDOMObject_FWD_DEFINED__ */


#ifndef __IDOMCSSRuleList_FWD_DEFINED__
#define __IDOMCSSRuleList_FWD_DEFINED__
typedef interface IDOMCSSRuleList IDOMCSSRuleList;
#endif 	/* __IDOMCSSRuleList_FWD_DEFINED__ */


#ifndef __IDOMCSSRule_FWD_DEFINED__
#define __IDOMCSSRule_FWD_DEFINED__
typedef interface IDOMCSSRule IDOMCSSRule;
#endif 	/* __IDOMCSSRule_FWD_DEFINED__ */


#ifndef __IDOMCSSStyleDeclaration_FWD_DEFINED__
#define __IDOMCSSStyleDeclaration_FWD_DEFINED__
typedef interface IDOMCSSStyleDeclaration IDOMCSSStyleDeclaration;
#endif 	/* __IDOMCSSStyleDeclaration_FWD_DEFINED__ */


#ifndef __IDOMCSSValue_FWD_DEFINED__
#define __IDOMCSSValue_FWD_DEFINED__
typedef interface IDOMCSSValue IDOMCSSValue;
#endif 	/* __IDOMCSSValue_FWD_DEFINED__ */


#ifndef __IDOMCSSStyleSheet_FWD_DEFINED__
#define __IDOMCSSStyleSheet_FWD_DEFINED__
typedef interface IDOMCSSStyleSheet IDOMCSSStyleSheet;
#endif 	/* __IDOMCSSStyleSheet_FWD_DEFINED__ */


#ifndef __IDOMElementCSSInlineStyle_FWD_DEFINED__
#define __IDOMElementCSSInlineStyle_FWD_DEFINED__
typedef interface IDOMElementCSSInlineStyle IDOMElementCSSInlineStyle;
#endif 	/* __IDOMElementCSSInlineStyle_FWD_DEFINED__ */


#ifndef __IDOMImplementation_FWD_DEFINED__
#define __IDOMImplementation_FWD_DEFINED__
typedef interface IDOMImplementation IDOMImplementation;
#endif 	/* __IDOMImplementation_FWD_DEFINED__ */


#ifndef __IDOMNode_FWD_DEFINED__
#define __IDOMNode_FWD_DEFINED__
typedef interface IDOMNode IDOMNode;
#endif 	/* __IDOMNode_FWD_DEFINED__ */


#ifndef __IDOMNodeList_FWD_DEFINED__
#define __IDOMNodeList_FWD_DEFINED__
typedef interface IDOMNodeList IDOMNodeList;
#endif 	/* __IDOMNodeList_FWD_DEFINED__ */


#ifndef __IDOMNamedNodeMap_FWD_DEFINED__
#define __IDOMNamedNodeMap_FWD_DEFINED__
typedef interface IDOMNamedNodeMap IDOMNamedNodeMap;
#endif 	/* __IDOMNamedNodeMap_FWD_DEFINED__ */


#ifndef __IDOMDocument_FWD_DEFINED__
#define __IDOMDocument_FWD_DEFINED__
typedef interface IDOMDocument IDOMDocument;
#endif 	/* __IDOMDocument_FWD_DEFINED__ */


#ifndef __IDOMCharacterData_FWD_DEFINED__
#define __IDOMCharacterData_FWD_DEFINED__
typedef interface IDOMCharacterData IDOMCharacterData;
#endif 	/* __IDOMCharacterData_FWD_DEFINED__ */


#ifndef __IDOMAttr_FWD_DEFINED__
#define __IDOMAttr_FWD_DEFINED__
typedef interface IDOMAttr IDOMAttr;
#endif 	/* __IDOMAttr_FWD_DEFINED__ */


#ifndef __IDOMElement_FWD_DEFINED__
#define __IDOMElement_FWD_DEFINED__
typedef interface IDOMElement IDOMElement;
#endif 	/* __IDOMElement_FWD_DEFINED__ */


#ifndef __IDOMElementExtensions_FWD_DEFINED__
#define __IDOMElementExtensions_FWD_DEFINED__
typedef interface IDOMElementExtensions IDOMElementExtensions;
#endif 	/* __IDOMElementExtensions_FWD_DEFINED__ */


#ifndef __IDOMText_FWD_DEFINED__
#define __IDOMText_FWD_DEFINED__
typedef interface IDOMText IDOMText;
#endif 	/* __IDOMText_FWD_DEFINED__ */


#ifndef __IDOMComment_FWD_DEFINED__
#define __IDOMComment_FWD_DEFINED__
typedef interface IDOMComment IDOMComment;
#endif 	/* __IDOMComment_FWD_DEFINED__ */


#ifndef __IDOMCDATASection_FWD_DEFINED__
#define __IDOMCDATASection_FWD_DEFINED__
typedef interface IDOMCDATASection IDOMCDATASection;
#endif 	/* __IDOMCDATASection_FWD_DEFINED__ */


#ifndef __IDOMDocumentType_FWD_DEFINED__
#define __IDOMDocumentType_FWD_DEFINED__
typedef interface IDOMDocumentType IDOMDocumentType;
#endif 	/* __IDOMDocumentType_FWD_DEFINED__ */


#ifndef __IDOMEntityReference_FWD_DEFINED__
#define __IDOMEntityReference_FWD_DEFINED__
typedef interface IDOMEntityReference IDOMEntityReference;
#endif 	/* __IDOMEntityReference_FWD_DEFINED__ */


#ifndef __IDOMProcessingInstruction_FWD_DEFINED__
#define __IDOMProcessingInstruction_FWD_DEFINED__
typedef interface IDOMProcessingInstruction IDOMProcessingInstruction;
#endif 	/* __IDOMProcessingInstruction_FWD_DEFINED__ */


#ifndef __IDOMDocumentFragment_FWD_DEFINED__
#define __IDOMDocumentFragment_FWD_DEFINED__
typedef interface IDOMDocumentFragment IDOMDocumentFragment;
#endif 	/* __IDOMDocumentFragment_FWD_DEFINED__ */


#ifndef __IDOMEventListener_FWD_DEFINED__
#define __IDOMEventListener_FWD_DEFINED__
typedef interface IDOMEventListener IDOMEventListener;
#endif 	/* __IDOMEventListener_FWD_DEFINED__ */


#ifndef __IDOMEvent_FWD_DEFINED__
#define __IDOMEvent_FWD_DEFINED__
typedef interface IDOMEvent IDOMEvent;
#endif 	/* __IDOMEvent_FWD_DEFINED__ */


#ifndef __IDOMEventTarget_FWD_DEFINED__
#define __IDOMEventTarget_FWD_DEFINED__
typedef interface IDOMEventTarget IDOMEventTarget;
#endif 	/* __IDOMEventTarget_FWD_DEFINED__ */


#ifndef __IDOMDocumentEvent_FWD_DEFINED__
#define __IDOMDocumentEvent_FWD_DEFINED__
typedef interface IDOMDocumentEvent IDOMDocumentEvent;
#endif 	/* __IDOMDocumentEvent_FWD_DEFINED__ */


#ifndef __IDOMUIEvent_FWD_DEFINED__
#define __IDOMUIEvent_FWD_DEFINED__
typedef interface IDOMUIEvent IDOMUIEvent;
#endif 	/* __IDOMUIEvent_FWD_DEFINED__ */


#ifndef __IDOMKeyboardEvent_FWD_DEFINED__
#define __IDOMKeyboardEvent_FWD_DEFINED__
typedef interface IDOMKeyboardEvent IDOMKeyboardEvent;
#endif 	/* __IDOMKeyboardEvent_FWD_DEFINED__ */


#ifndef __IDOMMouseEvent_FWD_DEFINED__
#define __IDOMMouseEvent_FWD_DEFINED__
typedef interface IDOMMouseEvent IDOMMouseEvent;
#endif 	/* __IDOMMouseEvent_FWD_DEFINED__ */


#ifndef __IDOMMutationEvent_FWD_DEFINED__
#define __IDOMMutationEvent_FWD_DEFINED__
typedef interface IDOMMutationEvent IDOMMutationEvent;
#endif 	/* __IDOMMutationEvent_FWD_DEFINED__ */


#ifndef __IDOMOverflowEvent_FWD_DEFINED__
#define __IDOMOverflowEvent_FWD_DEFINED__
typedef interface IDOMOverflowEvent IDOMOverflowEvent;
#endif 	/* __IDOMOverflowEvent_FWD_DEFINED__ */


#ifndef __IDOMWheelEvent_FWD_DEFINED__
#define __IDOMWheelEvent_FWD_DEFINED__
typedef interface IDOMWheelEvent IDOMWheelEvent;
#endif 	/* __IDOMWheelEvent_FWD_DEFINED__ */


#ifndef __IDOMNodeExtensions_FWD_DEFINED__
#define __IDOMNodeExtensions_FWD_DEFINED__
typedef interface IDOMNodeExtensions IDOMNodeExtensions;
#endif 	/* __IDOMNodeExtensions_FWD_DEFINED__ */


#ifndef __IDOMHTMLCollection_FWD_DEFINED__
#define __IDOMHTMLCollection_FWD_DEFINED__
typedef interface IDOMHTMLCollection IDOMHTMLCollection;
#endif 	/* __IDOMHTMLCollection_FWD_DEFINED__ */


#ifndef __IDOMHTMLOptionsCollection_FWD_DEFINED__
#define __IDOMHTMLOptionsCollection_FWD_DEFINED__
typedef interface IDOMHTMLOptionsCollection IDOMHTMLOptionsCollection;
#endif 	/* __IDOMHTMLOptionsCollection_FWD_DEFINED__ */


#ifndef __IDOMHTMLDocument_FWD_DEFINED__
#define __IDOMHTMLDocument_FWD_DEFINED__
typedef interface IDOMHTMLDocument IDOMHTMLDocument;
#endif 	/* __IDOMHTMLDocument_FWD_DEFINED__ */


#ifndef __IDOMHTMLElement_FWD_DEFINED__
#define __IDOMHTMLElement_FWD_DEFINED__
typedef interface IDOMHTMLElement IDOMHTMLElement;
#endif 	/* __IDOMHTMLElement_FWD_DEFINED__ */


#ifndef __IDOMHTMLFormElement_FWD_DEFINED__
#define __IDOMHTMLFormElement_FWD_DEFINED__
typedef interface IDOMHTMLFormElement IDOMHTMLFormElement;
#endif 	/* __IDOMHTMLFormElement_FWD_DEFINED__ */


#ifndef __IDOMHTMLSelectElement_FWD_DEFINED__
#define __IDOMHTMLSelectElement_FWD_DEFINED__
typedef interface IDOMHTMLSelectElement IDOMHTMLSelectElement;
#endif 	/* __IDOMHTMLSelectElement_FWD_DEFINED__ */


#ifndef __IDOMHTMLOptionElement_FWD_DEFINED__
#define __IDOMHTMLOptionElement_FWD_DEFINED__
typedef interface IDOMHTMLOptionElement IDOMHTMLOptionElement;
#endif 	/* __IDOMHTMLOptionElement_FWD_DEFINED__ */


#ifndef __IDOMHTMLInputElement_FWD_DEFINED__
#define __IDOMHTMLInputElement_FWD_DEFINED__
typedef interface IDOMHTMLInputElement IDOMHTMLInputElement;
#endif 	/* __IDOMHTMLInputElement_FWD_DEFINED__ */


#ifndef __IDOMHTMLTextAreaElement_FWD_DEFINED__
#define __IDOMHTMLTextAreaElement_FWD_DEFINED__
typedef interface IDOMHTMLTextAreaElement IDOMHTMLTextAreaElement;
#endif 	/* __IDOMHTMLTextAreaElement_FWD_DEFINED__ */


#ifndef __IDOMHTMLIFrameElement_FWD_DEFINED__
#define __IDOMHTMLIFrameElement_FWD_DEFINED__
typedef interface IDOMHTMLIFrameElement IDOMHTMLIFrameElement;
#endif 	/* __IDOMHTMLIFrameElement_FWD_DEFINED__ */


#ifndef __IDOMElementPrivate_FWD_DEFINED__
#define __IDOMElementPrivate_FWD_DEFINED__
typedef interface IDOMElementPrivate IDOMElementPrivate;
#endif 	/* __IDOMElementPrivate_FWD_DEFINED__ */


#ifndef __IFormsAutoFillTransition_FWD_DEFINED__
#define __IFormsAutoFillTransition_FWD_DEFINED__
typedef interface IFormsAutoFillTransition IFormsAutoFillTransition;
#endif 	/* __IFormsAutoFillTransition_FWD_DEFINED__ */


#ifndef __IFormPromptAdditions_FWD_DEFINED__
#define __IFormPromptAdditions_FWD_DEFINED__
typedef interface IFormPromptAdditions IFormPromptAdditions;
#endif 	/* __IFormPromptAdditions_FWD_DEFINED__ */


#ifndef __IFormsAutoFillTransitionSelect_FWD_DEFINED__
#define __IFormsAutoFillTransitionSelect_FWD_DEFINED__
typedef interface IFormsAutoFillTransitionSelect IFormsAutoFillTransitionSelect;
#endif 	/* __IFormsAutoFillTransitionSelect_FWD_DEFINED__ */


#ifndef __IDOMRange_FWD_DEFINED__
#define __IDOMRange_FWD_DEFINED__
typedef interface IDOMRange IDOMRange;
#endif 	/* __IDOMRange_FWD_DEFINED__ */


#ifndef __IDOMWindow_FWD_DEFINED__
#define __IDOMWindow_FWD_DEFINED__
typedef interface IDOMWindow IDOMWindow;
#endif 	/* __IDOMWindow_FWD_DEFINED__ */


#ifndef __IWebArchive_FWD_DEFINED__
#define __IWebArchive_FWD_DEFINED__
typedef interface IWebArchive IWebArchive;
#endif 	/* __IWebArchive_FWD_DEFINED__ */


#ifndef __IWebBackForwardList_FWD_DEFINED__
#define __IWebBackForwardList_FWD_DEFINED__
typedef interface IWebBackForwardList IWebBackForwardList;
#endif 	/* __IWebBackForwardList_FWD_DEFINED__ */


#ifndef __IWebBackForwardListPrivate_FWD_DEFINED__
#define __IWebBackForwardListPrivate_FWD_DEFINED__
typedef interface IWebBackForwardListPrivate IWebBackForwardListPrivate;
#endif 	/* __IWebBackForwardListPrivate_FWD_DEFINED__ */


#ifndef __IWebCache_FWD_DEFINED__
#define __IWebCache_FWD_DEFINED__
typedef interface IWebCache IWebCache;
#endif 	/* __IWebCache_FWD_DEFINED__ */


#ifndef __IWebCookieManager_FWD_DEFINED__
#define __IWebCookieManager_FWD_DEFINED__
typedef interface IWebCookieManager IWebCookieManager;
#endif 	/* __IWebCookieManager_FWD_DEFINED__ */


#ifndef __IWebCoreStatistics_FWD_DEFINED__
#define __IWebCoreStatistics_FWD_DEFINED__
typedef interface IWebCoreStatistics IWebCoreStatistics;
#endif 	/* __IWebCoreStatistics_FWD_DEFINED__ */


#ifndef __IWebDataSource_FWD_DEFINED__
#define __IWebDataSource_FWD_DEFINED__
typedef interface IWebDataSource IWebDataSource;
#endif 	/* __IWebDataSource_FWD_DEFINED__ */


#ifndef __IWebDataSourcePrivate_FWD_DEFINED__
#define __IWebDataSourcePrivate_FWD_DEFINED__
typedef interface IWebDataSourcePrivate IWebDataSourcePrivate;
#endif 	/* __IWebDataSourcePrivate_FWD_DEFINED__ */


#ifndef __IWebDatabaseManager_FWD_DEFINED__
#define __IWebDatabaseManager_FWD_DEFINED__
typedef interface IWebDatabaseManager IWebDatabaseManager;
#endif 	/* __IWebDatabaseManager_FWD_DEFINED__ */


#ifndef __IWebDesktopNotification_FWD_DEFINED__
#define __IWebDesktopNotification_FWD_DEFINED__
typedef interface IWebDesktopNotification IWebDesktopNotification;
#endif 	/* __IWebDesktopNotification_FWD_DEFINED__ */


#ifndef __IWebDesktopNotificationsDelegate_FWD_DEFINED__
#define __IWebDesktopNotificationsDelegate_FWD_DEFINED__
typedef interface IWebDesktopNotificationsDelegate IWebDesktopNotificationsDelegate;
#endif 	/* __IWebDesktopNotificationsDelegate_FWD_DEFINED__ */


#ifndef __IWebDocumentView_FWD_DEFINED__
#define __IWebDocumentView_FWD_DEFINED__
typedef interface IWebDocumentView IWebDocumentView;
#endif 	/* __IWebDocumentView_FWD_DEFINED__ */


#ifndef __IWebDocumentSearching_FWD_DEFINED__
#define __IWebDocumentSearching_FWD_DEFINED__
typedef interface IWebDocumentSearching IWebDocumentSearching;
#endif 	/* __IWebDocumentSearching_FWD_DEFINED__ */


#ifndef __IWebDocumentText_FWD_DEFINED__
#define __IWebDocumentText_FWD_DEFINED__
typedef interface IWebDocumentText IWebDocumentText;
#endif 	/* __IWebDocumentText_FWD_DEFINED__ */


#ifndef __IWebDocumentRepresentation_FWD_DEFINED__
#define __IWebDocumentRepresentation_FWD_DEFINED__
typedef interface IWebDocumentRepresentation IWebDocumentRepresentation;
#endif 	/* __IWebDocumentRepresentation_FWD_DEFINED__ */


#ifndef __IWebDownload_FWD_DEFINED__
#define __IWebDownload_FWD_DEFINED__
typedef interface IWebDownload IWebDownload;
#endif 	/* __IWebDownload_FWD_DEFINED__ */


#ifndef __IWebDownloadDelegate_FWD_DEFINED__
#define __IWebDownloadDelegate_FWD_DEFINED__
typedef interface IWebDownloadDelegate IWebDownloadDelegate;
#endif 	/* __IWebDownloadDelegate_FWD_DEFINED__ */


#ifndef __IEnumSpellingGuesses_FWD_DEFINED__
#define __IEnumSpellingGuesses_FWD_DEFINED__
typedef interface IEnumSpellingGuesses IEnumSpellingGuesses;
#endif 	/* __IEnumSpellingGuesses_FWD_DEFINED__ */


#ifndef __IWebGrammarDetail_FWD_DEFINED__
#define __IWebGrammarDetail_FWD_DEFINED__
typedef interface IWebGrammarDetail IWebGrammarDetail;
#endif 	/* __IWebGrammarDetail_FWD_DEFINED__ */


#ifndef __IEnumWebGrammarDetails_FWD_DEFINED__
#define __IEnumWebGrammarDetails_FWD_DEFINED__
typedef interface IEnumWebGrammarDetails IEnumWebGrammarDetails;
#endif 	/* __IEnumWebGrammarDetails_FWD_DEFINED__ */


#ifndef __IWebEditingDelegate_FWD_DEFINED__
#define __IWebEditingDelegate_FWD_DEFINED__
typedef interface IWebEditingDelegate IWebEditingDelegate;
#endif 	/* __IWebEditingDelegate_FWD_DEFINED__ */


#ifndef __IWebEmbeddedView_FWD_DEFINED__
#define __IWebEmbeddedView_FWD_DEFINED__
typedef interface IWebEmbeddedView IWebEmbeddedView;
#endif 	/* __IWebEmbeddedView_FWD_DEFINED__ */


#ifndef __IWebError_FWD_DEFINED__
#define __IWebError_FWD_DEFINED__
typedef interface IWebError IWebError;
#endif 	/* __IWebError_FWD_DEFINED__ */


#ifndef __IWebErrorPrivate_FWD_DEFINED__
#define __IWebErrorPrivate_FWD_DEFINED__
typedef interface IWebErrorPrivate IWebErrorPrivate;
#endif 	/* __IWebErrorPrivate_FWD_DEFINED__ */


#ifndef __IWebFormSubmissionListener_FWD_DEFINED__
#define __IWebFormSubmissionListener_FWD_DEFINED__
typedef interface IWebFormSubmissionListener IWebFormSubmissionListener;
#endif 	/* __IWebFormSubmissionListener_FWD_DEFINED__ */


#ifndef __IWebFormDelegate_FWD_DEFINED__
#define __IWebFormDelegate_FWD_DEFINED__
typedef interface IWebFormDelegate IWebFormDelegate;
#endif 	/* __IWebFormDelegate_FWD_DEFINED__ */


#ifndef __IWebFrame_FWD_DEFINED__
#define __IWebFrame_FWD_DEFINED__
typedef interface IWebFrame IWebFrame;
#endif 	/* __IWebFrame_FWD_DEFINED__ */


#ifndef __IWebFrameLoadDelegate_FWD_DEFINED__
#define __IWebFrameLoadDelegate_FWD_DEFINED__
typedef interface IWebFrameLoadDelegate IWebFrameLoadDelegate;
#endif 	/* __IWebFrameLoadDelegate_FWD_DEFINED__ */


#ifndef __IWebFrameLoadDelegatePrivate_FWD_DEFINED__
#define __IWebFrameLoadDelegatePrivate_FWD_DEFINED__
typedef interface IWebFrameLoadDelegatePrivate IWebFrameLoadDelegatePrivate;
#endif 	/* __IWebFrameLoadDelegatePrivate_FWD_DEFINED__ */


#ifndef __IWebFrameLoadDelegatePrivate2_FWD_DEFINED__
#define __IWebFrameLoadDelegatePrivate2_FWD_DEFINED__
typedef interface IWebFrameLoadDelegatePrivate2 IWebFrameLoadDelegatePrivate2;
#endif 	/* __IWebFrameLoadDelegatePrivate2_FWD_DEFINED__ */


#ifndef __IWebFramePrivate_FWD_DEFINED__
#define __IWebFramePrivate_FWD_DEFINED__
typedef interface IWebFramePrivate IWebFramePrivate;
#endif 	/* __IWebFramePrivate_FWD_DEFINED__ */


#ifndef __IWebFrameView_FWD_DEFINED__
#define __IWebFrameView_FWD_DEFINED__
typedef interface IWebFrameView IWebFrameView;
#endif 	/* __IWebFrameView_FWD_DEFINED__ */


#ifndef __IWebGeolocationPolicyListener_FWD_DEFINED__
#define __IWebGeolocationPolicyListener_FWD_DEFINED__
typedef interface IWebGeolocationPolicyListener IWebGeolocationPolicyListener;
#endif 	/* __IWebGeolocationPolicyListener_FWD_DEFINED__ */


#ifndef __IWebGeolocationPosition_FWD_DEFINED__
#define __IWebGeolocationPosition_FWD_DEFINED__
typedef interface IWebGeolocationPosition IWebGeolocationPosition;
#endif 	/* __IWebGeolocationPosition_FWD_DEFINED__ */


#ifndef __IWebGeolocationProvider_FWD_DEFINED__
#define __IWebGeolocationProvider_FWD_DEFINED__
typedef interface IWebGeolocationProvider IWebGeolocationProvider;
#endif 	/* __IWebGeolocationProvider_FWD_DEFINED__ */


#ifndef __IWebHTMLRepresentation_FWD_DEFINED__
#define __IWebHTMLRepresentation_FWD_DEFINED__
typedef interface IWebHTMLRepresentation IWebHTMLRepresentation;
#endif 	/* __IWebHTMLRepresentation_FWD_DEFINED__ */


#ifndef __IWebURLResponse_FWD_DEFINED__
#define __IWebURLResponse_FWD_DEFINED__
typedef interface IWebURLResponse IWebURLResponse;
#endif 	/* __IWebURLResponse_FWD_DEFINED__ */


#ifndef __IWebHTTPURLResponse_FWD_DEFINED__
#define __IWebHTTPURLResponse_FWD_DEFINED__
typedef interface IWebHTTPURLResponse IWebHTTPURLResponse;
#endif 	/* __IWebHTTPURLResponse_FWD_DEFINED__ */


#ifndef __IWebHistory_FWD_DEFINED__
#define __IWebHistory_FWD_DEFINED__
typedef interface IWebHistory IWebHistory;
#endif 	/* __IWebHistory_FWD_DEFINED__ */


#ifndef __IWebHistoryDelegate_FWD_DEFINED__
#define __IWebHistoryDelegate_FWD_DEFINED__
typedef interface IWebHistoryDelegate IWebHistoryDelegate;
#endif 	/* __IWebHistoryDelegate_FWD_DEFINED__ */


#ifndef __IWebHistoryItem_FWD_DEFINED__
#define __IWebHistoryItem_FWD_DEFINED__
typedef interface IWebHistoryItem IWebHistoryItem;
#endif 	/* __IWebHistoryItem_FWD_DEFINED__ */


#ifndef __IWebHistoryItemPrivate_FWD_DEFINED__
#define __IWebHistoryItemPrivate_FWD_DEFINED__
typedef interface IWebHistoryItemPrivate IWebHistoryItemPrivate;
#endif 	/* __IWebHistoryItemPrivate_FWD_DEFINED__ */


#ifndef __IWebHistoryPrivate_FWD_DEFINED__
#define __IWebHistoryPrivate_FWD_DEFINED__
typedef interface IWebHistoryPrivate IWebHistoryPrivate;
#endif 	/* __IWebHistoryPrivate_FWD_DEFINED__ */


#ifndef __IWebIconDatabase_FWD_DEFINED__
#define __IWebIconDatabase_FWD_DEFINED__
typedef interface IWebIconDatabase IWebIconDatabase;
#endif 	/* __IWebIconDatabase_FWD_DEFINED__ */


#ifndef __IWebIconFetcherDelegate_FWD_DEFINED__
#define __IWebIconFetcherDelegate_FWD_DEFINED__
typedef interface IWebIconFetcherDelegate IWebIconFetcherDelegate;
#endif 	/* __IWebIconFetcherDelegate_FWD_DEFINED__ */


#ifndef __IWebIconFetcher_FWD_DEFINED__
#define __IWebIconFetcher_FWD_DEFINED__
typedef interface IWebIconFetcher IWebIconFetcher;
#endif 	/* __IWebIconFetcher_FWD_DEFINED__ */


#ifndef __IWebInspector_FWD_DEFINED__
#define __IWebInspector_FWD_DEFINED__
typedef interface IWebInspector IWebInspector;
#endif 	/* __IWebInspector_FWD_DEFINED__ */


#ifndef __IWebInspectorPrivate_FWD_DEFINED__
#define __IWebInspectorPrivate_FWD_DEFINED__
typedef interface IWebInspectorPrivate IWebInspectorPrivate;
#endif 	/* __IWebInspectorPrivate_FWD_DEFINED__ */


#ifndef __IWebJavaScriptCollector_FWD_DEFINED__
#define __IWebJavaScriptCollector_FWD_DEFINED__
typedef interface IWebJavaScriptCollector IWebJavaScriptCollector;
#endif 	/* __IWebJavaScriptCollector_FWD_DEFINED__ */


#ifndef __IWebKitStatistics_FWD_DEFINED__
#define __IWebKitStatistics_FWD_DEFINED__
typedef interface IWebKitStatistics IWebKitStatistics;
#endif 	/* __IWebKitStatistics_FWD_DEFINED__ */


#ifndef __IWebMutableURLRequestPrivate_FWD_DEFINED__
#define __IWebMutableURLRequestPrivate_FWD_DEFINED__
typedef interface IWebMutableURLRequestPrivate IWebMutableURLRequestPrivate;
#endif 	/* __IWebMutableURLRequestPrivate_FWD_DEFINED__ */


#ifndef __IWebNavigationData_FWD_DEFINED__
#define __IWebNavigationData_FWD_DEFINED__
typedef interface IWebNavigationData IWebNavigationData;
#endif 	/* __IWebNavigationData_FWD_DEFINED__ */


#ifndef __IWebNotification_FWD_DEFINED__
#define __IWebNotification_FWD_DEFINED__
typedef interface IWebNotification IWebNotification;
#endif 	/* __IWebNotification_FWD_DEFINED__ */


#ifndef __IWebNotificationCenter_FWD_DEFINED__
#define __IWebNotificationCenter_FWD_DEFINED__
typedef interface IWebNotificationCenter IWebNotificationCenter;
#endif 	/* __IWebNotificationCenter_FWD_DEFINED__ */


#ifndef __IWebNotificationObserver_FWD_DEFINED__
#define __IWebNotificationObserver_FWD_DEFINED__
typedef interface IWebNotificationObserver IWebNotificationObserver;
#endif 	/* __IWebNotificationObserver_FWD_DEFINED__ */


#ifndef __IWebPluginHalterDelegate_FWD_DEFINED__
#define __IWebPluginHalterDelegate_FWD_DEFINED__
typedef interface IWebPluginHalterDelegate IWebPluginHalterDelegate;
#endif 	/* __IWebPluginHalterDelegate_FWD_DEFINED__ */


#ifndef __IWebPolicyDecisionListener_FWD_DEFINED__
#define __IWebPolicyDecisionListener_FWD_DEFINED__
typedef interface IWebPolicyDecisionListener IWebPolicyDecisionListener;
#endif 	/* __IWebPolicyDecisionListener_FWD_DEFINED__ */


#ifndef __IWebPolicyDelegate_FWD_DEFINED__
#define __IWebPolicyDelegate_FWD_DEFINED__
typedef interface IWebPolicyDelegate IWebPolicyDelegate;
#endif 	/* __IWebPolicyDelegate_FWD_DEFINED__ */


#ifndef __IWebPolicyDelegatePrivate_FWD_DEFINED__
#define __IWebPolicyDelegatePrivate_FWD_DEFINED__
typedef interface IWebPolicyDelegatePrivate IWebPolicyDelegatePrivate;
#endif 	/* __IWebPolicyDelegatePrivate_FWD_DEFINED__ */


#ifndef __IWebPreferences_FWD_DEFINED__
#define __IWebPreferences_FWD_DEFINED__
typedef interface IWebPreferences IWebPreferences;
#endif 	/* __IWebPreferences_FWD_DEFINED__ */


#ifndef __IWebPreferencesPrivate_FWD_DEFINED__
#define __IWebPreferencesPrivate_FWD_DEFINED__
typedef interface IWebPreferencesPrivate IWebPreferencesPrivate;
#endif 	/* __IWebPreferencesPrivate_FWD_DEFINED__ */


#ifndef __IWebResource_FWD_DEFINED__
#define __IWebResource_FWD_DEFINED__
typedef interface IWebResource IWebResource;
#endif 	/* __IWebResource_FWD_DEFINED__ */


#ifndef __IWebResourceLoadDelegate_FWD_DEFINED__
#define __IWebResourceLoadDelegate_FWD_DEFINED__
typedef interface IWebResourceLoadDelegate IWebResourceLoadDelegate;
#endif 	/* __IWebResourceLoadDelegate_FWD_DEFINED__ */


#ifndef __IWebResourceLoadDelegatePrivate_FWD_DEFINED__
#define __IWebResourceLoadDelegatePrivate_FWD_DEFINED__
typedef interface IWebResourceLoadDelegatePrivate IWebResourceLoadDelegatePrivate;
#endif 	/* __IWebResourceLoadDelegatePrivate_FWD_DEFINED__ */


#ifndef __IWebScriptWorld_FWD_DEFINED__
#define __IWebScriptWorld_FWD_DEFINED__
typedef interface IWebScriptWorld IWebScriptWorld;
#endif 	/* __IWebScriptWorld_FWD_DEFINED__ */


#ifndef __IWebScrollBarDelegatePrivate_FWD_DEFINED__
#define __IWebScrollBarDelegatePrivate_FWD_DEFINED__
typedef interface IWebScrollBarDelegatePrivate IWebScrollBarDelegatePrivate;
#endif 	/* __IWebScrollBarDelegatePrivate_FWD_DEFINED__ */


#ifndef __IWebScrollBarPrivate_FWD_DEFINED__
#define __IWebScrollBarPrivate_FWD_DEFINED__
typedef interface IWebScrollBarPrivate IWebScrollBarPrivate;
#endif 	/* __IWebScrollBarPrivate_FWD_DEFINED__ */


#ifndef __IWebSecurityOrigin_FWD_DEFINED__
#define __IWebSecurityOrigin_FWD_DEFINED__
typedef interface IWebSecurityOrigin IWebSecurityOrigin;
#endif 	/* __IWebSecurityOrigin_FWD_DEFINED__ */


#ifndef __IWebSerializedJSValue_FWD_DEFINED__
#define __IWebSerializedJSValue_FWD_DEFINED__
typedef interface IWebSerializedJSValue IWebSerializedJSValue;
#endif 	/* __IWebSerializedJSValue_FWD_DEFINED__ */


#ifndef __IWebTextRenderer_FWD_DEFINED__
#define __IWebTextRenderer_FWD_DEFINED__
typedef interface IWebTextRenderer IWebTextRenderer;
#endif 	/* __IWebTextRenderer_FWD_DEFINED__ */


#ifndef __IWebOpenPanelResultListener_FWD_DEFINED__
#define __IWebOpenPanelResultListener_FWD_DEFINED__
typedef interface IWebOpenPanelResultListener IWebOpenPanelResultListener;
#endif 	/* __IWebOpenPanelResultListener_FWD_DEFINED__ */


#ifndef __IWebUIDelegate_FWD_DEFINED__
#define __IWebUIDelegate_FWD_DEFINED__
typedef interface IWebUIDelegate IWebUIDelegate;
#endif 	/* __IWebUIDelegate_FWD_DEFINED__ */


#ifndef __IWebUIDelegate2_FWD_DEFINED__
#define __IWebUIDelegate2_FWD_DEFINED__
typedef interface IWebUIDelegate2 IWebUIDelegate2;
#endif 	/* __IWebUIDelegate2_FWD_DEFINED__ */


#ifndef __IWebUIDelegatePrivate_FWD_DEFINED__
#define __IWebUIDelegatePrivate_FWD_DEFINED__
typedef interface IWebUIDelegatePrivate IWebUIDelegatePrivate;
#endif 	/* __IWebUIDelegatePrivate_FWD_DEFINED__ */


#ifndef __IWebUIDelegatePrivate2_FWD_DEFINED__
#define __IWebUIDelegatePrivate2_FWD_DEFINED__
typedef interface IWebUIDelegatePrivate2 IWebUIDelegatePrivate2;
#endif 	/* __IWebUIDelegatePrivate2_FWD_DEFINED__ */


#ifndef __IWebUIDelegatePrivate3_FWD_DEFINED__
#define __IWebUIDelegatePrivate3_FWD_DEFINED__
typedef interface IWebUIDelegatePrivate3 IWebUIDelegatePrivate3;
#endif 	/* __IWebUIDelegatePrivate3_FWD_DEFINED__ */


#ifndef __IWebURLAuthenticationChallenge_FWD_DEFINED__
#define __IWebURLAuthenticationChallenge_FWD_DEFINED__
typedef interface IWebURLAuthenticationChallenge IWebURLAuthenticationChallenge;
#endif 	/* __IWebURLAuthenticationChallenge_FWD_DEFINED__ */


#ifndef __IWebURLAuthenticationChallengeSender_FWD_DEFINED__
#define __IWebURLAuthenticationChallengeSender_FWD_DEFINED__
typedef interface IWebURLAuthenticationChallengeSender IWebURLAuthenticationChallengeSender;
#endif 	/* __IWebURLAuthenticationChallengeSender_FWD_DEFINED__ */


#ifndef __IWebURLProtectionSpace_FWD_DEFINED__
#define __IWebURLProtectionSpace_FWD_DEFINED__
typedef interface IWebURLProtectionSpace IWebURLProtectionSpace;
#endif 	/* __IWebURLProtectionSpace_FWD_DEFINED__ */


#ifndef __IWebURLCredential_FWD_DEFINED__
#define __IWebURLCredential_FWD_DEFINED__
typedef interface IWebURLCredential IWebURLCredential;
#endif 	/* __IWebURLCredential_FWD_DEFINED__ */


#ifndef __IWebURLRequest_FWD_DEFINED__
#define __IWebURLRequest_FWD_DEFINED__
typedef interface IWebURLRequest IWebURLRequest;
#endif 	/* __IWebURLRequest_FWD_DEFINED__ */


#ifndef __IWebMutableURLRequest_FWD_DEFINED__
#define __IWebMutableURLRequest_FWD_DEFINED__
typedef interface IWebMutableURLRequest IWebMutableURLRequest;
#endif 	/* __IWebMutableURLRequest_FWD_DEFINED__ */


#ifndef __IWebURLResponsePrivate_FWD_DEFINED__
#define __IWebURLResponsePrivate_FWD_DEFINED__
typedef interface IWebURLResponsePrivate IWebURLResponsePrivate;
#endif 	/* __IWebURLResponsePrivate_FWD_DEFINED__ */


#ifndef __IWebUndoManager_FWD_DEFINED__
#define __IWebUndoManager_FWD_DEFINED__
typedef interface IWebUndoManager IWebUndoManager;
#endif 	/* __IWebUndoManager_FWD_DEFINED__ */


#ifndef __IWebInvocation_FWD_DEFINED__
#define __IWebInvocation_FWD_DEFINED__
typedef interface IWebInvocation IWebInvocation;
#endif 	/* __IWebInvocation_FWD_DEFINED__ */


#ifndef __IWebMethodSignature_FWD_DEFINED__
#define __IWebMethodSignature_FWD_DEFINED__
typedef interface IWebMethodSignature IWebMethodSignature;
#endif 	/* __IWebMethodSignature_FWD_DEFINED__ */


#ifndef __IWebUndoTarget_FWD_DEFINED__
#define __IWebUndoTarget_FWD_DEFINED__
typedef interface IWebUndoTarget IWebUndoTarget;
#endif 	/* __IWebUndoTarget_FWD_DEFINED__ */


#ifndef __IWebUserContentURLPattern_FWD_DEFINED__
#define __IWebUserContentURLPattern_FWD_DEFINED__
typedef interface IWebUserContentURLPattern IWebUserContentURLPattern;
#endif 	/* __IWebUserContentURLPattern_FWD_DEFINED__ */


#ifndef __IEnumTextMatches_FWD_DEFINED__
#define __IEnumTextMatches_FWD_DEFINED__
typedef interface IEnumTextMatches IEnumTextMatches;
#endif 	/* __IEnumTextMatches_FWD_DEFINED__ */


#ifndef __IWebView_FWD_DEFINED__
#define __IWebView_FWD_DEFINED__
typedef interface IWebView IWebView;
#endif 	/* __IWebView_FWD_DEFINED__ */


#ifndef __IWebIBActions_FWD_DEFINED__
#define __IWebIBActions_FWD_DEFINED__
typedef interface IWebIBActions IWebIBActions;
#endif 	/* __IWebIBActions_FWD_DEFINED__ */


#ifndef __IWebViewCSS_FWD_DEFINED__
#define __IWebViewCSS_FWD_DEFINED__
typedef interface IWebViewCSS IWebViewCSS;
#endif 	/* __IWebViewCSS_FWD_DEFINED__ */


#ifndef __IWebViewEditing_FWD_DEFINED__
#define __IWebViewEditing_FWD_DEFINED__
typedef interface IWebViewEditing IWebViewEditing;
#endif 	/* __IWebViewEditing_FWD_DEFINED__ */


#ifndef __IWebViewUndoableEditing_FWD_DEFINED__
#define __IWebViewUndoableEditing_FWD_DEFINED__
typedef interface IWebViewUndoableEditing IWebViewUndoableEditing;
#endif 	/* __IWebViewUndoableEditing_FWD_DEFINED__ */


#ifndef __IWebViewEditingActions_FWD_DEFINED__
#define __IWebViewEditingActions_FWD_DEFINED__
typedef interface IWebViewEditingActions IWebViewEditingActions;
#endif 	/* __IWebViewEditingActions_FWD_DEFINED__ */


#ifndef __IWebViewPrivate_FWD_DEFINED__
#define __IWebViewPrivate_FWD_DEFINED__
typedef interface IWebViewPrivate IWebViewPrivate;
#endif 	/* __IWebViewPrivate_FWD_DEFINED__ */


#ifndef __IWebWorkersPrivate_FWD_DEFINED__
#define __IWebWorkersPrivate_FWD_DEFINED__
typedef interface IWebWorkersPrivate IWebWorkersPrivate;
#endif 	/* __IWebWorkersPrivate_FWD_DEFINED__ */


#ifndef __WebView_FWD_DEFINED__
#define __WebView_FWD_DEFINED__

#ifdef __cplusplus
typedef class WebView WebView;
#else
typedef struct WebView WebView;
#endif /* __cplusplus */

#endif 	/* __WebView_FWD_DEFINED__ */


#ifndef __WebFrame_FWD_DEFINED__
#define __WebFrame_FWD_DEFINED__

#ifdef __cplusplus
typedef class WebFrame WebFrame;
#else
typedef struct WebFrame WebFrame;
#endif /* __cplusplus */

#endif 	/* __WebFrame_FWD_DEFINED__ */


#ifndef __WebIconDatabase_FWD_DEFINED__
#define __WebIconDatabase_FWD_DEFINED__

#ifdef __cplusplus
typedef class WebIconDatabase WebIconDatabase;
#else
typedef struct WebIconDatabase WebIconDatabase;
#endif /* __cplusplus */

#endif 	/* __WebIconDatabase_FWD_DEFINED__ */


#ifndef __WebMutableURLRequest_FWD_DEFINED__
#define __WebMutableURLRequest_FWD_DEFINED__

#ifdef __cplusplus
typedef class WebMutableURLRequest WebMutableURLRequest;
#else
typedef struct WebMutableURLRequest WebMutableURLRequest;
#endif /* __cplusplus */

#endif 	/* __WebMutableURLRequest_FWD_DEFINED__ */


#ifndef __WebNotificationCenter_FWD_DEFINED__
#define __WebNotificationCenter_FWD_DEFINED__

#ifdef __cplusplus
typedef class WebNotificationCenter WebNotificationCenter;
#else
typedef struct WebNotificationCenter WebNotificationCenter;
#endif /* __cplusplus */

#endif 	/* __WebNotificationCenter_FWD_DEFINED__ */


#ifndef __WebHistory_FWD_DEFINED__
#define __WebHistory_FWD_DEFINED__

#ifdef __cplusplus
typedef class WebHistory WebHistory;
#else
typedef struct WebHistory WebHistory;
#endif /* __cplusplus */

#endif 	/* __WebHistory_FWD_DEFINED__ */


#ifndef __CFDictionaryPropertyBag_FWD_DEFINED__
#define __CFDictionaryPropertyBag_FWD_DEFINED__

#ifdef __cplusplus
typedef class CFDictionaryPropertyBag CFDictionaryPropertyBag;
#else
typedef struct CFDictionaryPropertyBag CFDictionaryPropertyBag;
#endif /* __cplusplus */

#endif 	/* __CFDictionaryPropertyBag_FWD_DEFINED__ */


#ifndef __WebHistoryItem_FWD_DEFINED__
#define __WebHistoryItem_FWD_DEFINED__

#ifdef __cplusplus
typedef class WebHistoryItem WebHistoryItem;
#else
typedef struct WebHistoryItem WebHistoryItem;
#endif /* __cplusplus */

#endif 	/* __WebHistoryItem_FWD_DEFINED__ */


#ifndef __WebCache_FWD_DEFINED__
#define __WebCache_FWD_DEFINED__

#ifdef __cplusplus
typedef class WebCache WebCache;
#else
typedef struct WebCache WebCache;
#endif /* __cplusplus */

#endif 	/* __WebCache_FWD_DEFINED__ */


#ifndef __WebJavaScriptCollector_FWD_DEFINED__
#define __WebJavaScriptCollector_FWD_DEFINED__

#ifdef __cplusplus
typedef class WebJavaScriptCollector WebJavaScriptCollector;
#else
typedef struct WebJavaScriptCollector WebJavaScriptCollector;
#endif /* __cplusplus */

#endif 	/* __WebJavaScriptCollector_FWD_DEFINED__ */


#ifndef __WebPreferences_FWD_DEFINED__
#define __WebPreferences_FWD_DEFINED__

#ifdef __cplusplus
typedef class WebPreferences WebPreferences;
#else
typedef struct WebPreferences WebPreferences;
#endif /* __cplusplus */

#endif 	/* __WebPreferences_FWD_DEFINED__ */


#ifndef __WebKitStatistics_FWD_DEFINED__
#define __WebKitStatistics_FWD_DEFINED__

#ifdef __cplusplus
typedef class WebKitStatistics WebKitStatistics;
#else
typedef struct WebKitStatistics WebKitStatistics;
#endif /* __cplusplus */

#endif 	/* __WebKitStatistics_FWD_DEFINED__ */


#ifndef __WebError_FWD_DEFINED__
#define __WebError_FWD_DEFINED__

#ifdef __cplusplus
typedef class WebError WebError;
#else
typedef struct WebError WebError;
#endif /* __cplusplus */

#endif 	/* __WebError_FWD_DEFINED__ */


#ifndef __WebURLCredential_FWD_DEFINED__
#define __WebURLCredential_FWD_DEFINED__

#ifdef __cplusplus
typedef class WebURLCredential WebURLCredential;
#else
typedef struct WebURLCredential WebURLCredential;
#endif /* __cplusplus */

#endif 	/* __WebURLCredential_FWD_DEFINED__ */


#ifndef __WebDownload_FWD_DEFINED__
#define __WebDownload_FWD_DEFINED__

#ifdef __cplusplus
typedef class WebDownload WebDownload;
#else
typedef struct WebDownload WebDownload;
#endif /* __cplusplus */

#endif 	/* __WebDownload_FWD_DEFINED__ */


#ifndef __WebURLRequest_FWD_DEFINED__
#define __WebURLRequest_FWD_DEFINED__

#ifdef __cplusplus
typedef class WebURLRequest WebURLRequest;
#else
typedef struct WebURLRequest WebURLRequest;
#endif /* __cplusplus */

#endif 	/* __WebURLRequest_FWD_DEFINED__ */


#ifndef __WebURLProtectionSpace_FWD_DEFINED__
#define __WebURLProtectionSpace_FWD_DEFINED__

#ifdef __cplusplus
typedef class WebURLProtectionSpace WebURLProtectionSpace;
#else
typedef struct WebURLProtectionSpace WebURLProtectionSpace;
#endif /* __cplusplus */

#endif 	/* __WebURLProtectionSpace_FWD_DEFINED__ */


#ifndef __WebScrollBar_FWD_DEFINED__
#define __WebScrollBar_FWD_DEFINED__

#ifdef __cplusplus
typedef class WebScrollBar WebScrollBar;
#else
typedef struct WebScrollBar WebScrollBar;
#endif /* __cplusplus */

#endif 	/* __WebScrollBar_FWD_DEFINED__ */


#ifndef __WebURLResponse_FWD_DEFINED__
#define __WebURLResponse_FWD_DEFINED__

#ifdef __cplusplus
typedef class WebURLResponse WebURLResponse;
#else
typedef struct WebURLResponse WebURLResponse;
#endif /* __cplusplus */

#endif 	/* __WebURLResponse_FWD_DEFINED__ */


#ifndef __WebTextRenderer_FWD_DEFINED__
#define __WebTextRenderer_FWD_DEFINED__

#ifdef __cplusplus
typedef class WebTextRenderer WebTextRenderer;
#else
typedef struct WebTextRenderer WebTextRenderer;
#endif /* __cplusplus */

#endif 	/* __WebTextRenderer_FWD_DEFINED__ */


#ifndef __WebDatabaseManager_FWD_DEFINED__
#define __WebDatabaseManager_FWD_DEFINED__

#ifdef __cplusplus
typedef class WebDatabaseManager WebDatabaseManager;
#else
typedef struct WebDatabaseManager WebDatabaseManager;
#endif /* __cplusplus */

#endif 	/* __WebDatabaseManager_FWD_DEFINED__ */


#ifndef __WebArchive_FWD_DEFINED__
#define __WebArchive_FWD_DEFINED__

#ifdef __cplusplus
typedef class WebArchive WebArchive;
#else
typedef struct WebArchive WebArchive;
#endif /* __cplusplus */

#endif 	/* __WebArchive_FWD_DEFINED__ */


#ifndef __WebCoreStatistics_FWD_DEFINED__
#define __WebCoreStatistics_FWD_DEFINED__

#ifdef __cplusplus
typedef class WebCoreStatistics WebCoreStatistics;
#else
typedef struct WebCoreStatistics WebCoreStatistics;
#endif /* __cplusplus */

#endif 	/* __WebCoreStatistics_FWD_DEFINED__ */


#ifndef __WebCookieManager_FWD_DEFINED__
#define __WebCookieManager_FWD_DEFINED__

#ifdef __cplusplus
typedef class WebCookieManager WebCookieManager;
#else
typedef struct WebCookieManager WebCookieManager;
#endif /* __cplusplus */

#endif 	/* __WebCookieManager_FWD_DEFINED__ */


#ifndef __WebWorkersPrivate_FWD_DEFINED__
#define __WebWorkersPrivate_FWD_DEFINED__

#ifdef __cplusplus
typedef class WebWorkersPrivate WebWorkersPrivate;
#else
typedef struct WebWorkersPrivate WebWorkersPrivate;
#endif /* __cplusplus */

#endif 	/* __WebWorkersPrivate_FWD_DEFINED__ */


#ifndef __WebScriptWorld_FWD_DEFINED__
#define __WebScriptWorld_FWD_DEFINED__

#ifdef __cplusplus
typedef class WebScriptWorld WebScriptWorld;
#else
typedef struct WebScriptWorld WebScriptWorld;
#endif /* __cplusplus */

#endif 	/* __WebScriptWorld_FWD_DEFINED__ */


#ifndef __WebSerializedJSValue_FWD_DEFINED__
#define __WebSerializedJSValue_FWD_DEFINED__

#ifdef __cplusplus
typedef class WebSerializedJSValue WebSerializedJSValue;
#else
typedef struct WebSerializedJSValue WebSerializedJSValue;
#endif /* __cplusplus */

#endif 	/* __WebSerializedJSValue_FWD_DEFINED__ */


#ifndef __WebGeolocationPosition_FWD_DEFINED__
#define __WebGeolocationPosition_FWD_DEFINED__

#ifdef __cplusplus
typedef class WebGeolocationPosition WebGeolocationPosition;
#else
typedef struct WebGeolocationPosition WebGeolocationPosition;
#endif /* __cplusplus */

#endif 	/* __WebGeolocationPosition_FWD_DEFINED__ */


#ifndef __WebUserContentURLPattern_FWD_DEFINED__
#define __WebUserContentURLPattern_FWD_DEFINED__

#ifdef __cplusplus
typedef class WebUserContentURLPattern WebUserContentURLPattern;
#else
typedef struct WebUserContentURLPattern WebUserContentURLPattern;
#endif /* __cplusplus */

#endif 	/* __WebUserContentURLPattern_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"
#include "oleacc.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_WebKit_0000_0000 */
/* [local] */ 

/*
 * Copyright (C) 2006, 2007, 2008, 2009, 2010 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE COMPUTER, INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
extern const GUID  __declspec(selectany) SID_AccessibleComparable = { 0x62b8cb5f, 0xfb7a, 0x4faf, 0x81, 0xe8, 0x52, 0xb6, 0x5f, 0x12, 0x8b, 0x31 };


extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0000_v0_0_s_ifspec;

#ifndef __IAccessibleComparable_INTERFACE_DEFINED__
#define __IAccessibleComparable_INTERFACE_DEFINED__

/* interface IAccessibleComparable */
/* [unique][dual][hidden][uuid][object] */ 


EXTERN_C const IID IID_IAccessibleComparable;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4f0381ad-dab3-42ad-9ca2-a85b0ae041c0")
    IAccessibleComparable : public IAccessible
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE isSameObject( 
            /* [in] */ IAccessibleComparable *other,
            /* [retval][out] */ BOOL *result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAccessibleComparableVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IAccessibleComparable * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IAccessibleComparable * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IAccessibleComparable * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IAccessibleComparable * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IAccessibleComparable * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IAccessibleComparable * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IAccessibleComparable * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_accParent )( 
            IAccessibleComparable * This,
            /* [retval][out] */ IDispatch **ppdispParent);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_accChildCount )( 
            IAccessibleComparable * This,
            /* [retval][out] */ long *pcountChildren);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_accChild )( 
            IAccessibleComparable * This,
            /* [in] */ VARIANT varChild,
            /* [retval][out] */ IDispatch **ppdispChild);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_accName )( 
            IAccessibleComparable * This,
            /* [optional][in] */ VARIANT varChild,
            /* [retval][out] */ BSTR *pszName);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_accValue )( 
            IAccessibleComparable * This,
            /* [optional][in] */ VARIANT varChild,
            /* [retval][out] */ BSTR *pszValue);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_accDescription )( 
            IAccessibleComparable * This,
            /* [optional][in] */ VARIANT varChild,
            /* [retval][out] */ BSTR *pszDescription);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_accRole )( 
            IAccessibleComparable * This,
            /* [optional][in] */ VARIANT varChild,
            /* [retval][out] */ VARIANT *pvarRole);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_accState )( 
            IAccessibleComparable * This,
            /* [optional][in] */ VARIANT varChild,
            /* [retval][out] */ VARIANT *pvarState);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_accHelp )( 
            IAccessibleComparable * This,
            /* [optional][in] */ VARIANT varChild,
            /* [retval][out] */ BSTR *pszHelp);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_accHelpTopic )( 
            IAccessibleComparable * This,
            /* [out] */ BSTR *pszHelpFile,
            /* [optional][in] */ VARIANT varChild,
            /* [retval][out] */ long *pidTopic);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_accKeyboardShortcut )( 
            IAccessibleComparable * This,
            /* [optional][in] */ VARIANT varChild,
            /* [retval][out] */ BSTR *pszKeyboardShortcut);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_accFocus )( 
            IAccessibleComparable * This,
            /* [retval][out] */ VARIANT *pvarChild);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_accSelection )( 
            IAccessibleComparable * This,
            /* [retval][out] */ VARIANT *pvarChildren);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_accDefaultAction )( 
            IAccessibleComparable * This,
            /* [optional][in] */ VARIANT varChild,
            /* [retval][out] */ BSTR *pszDefaultAction);
        
        /* [id][hidden] */ HRESULT ( STDMETHODCALLTYPE *accSelect )( 
            IAccessibleComparable * This,
            /* [in] */ long flagsSelect,
            /* [optional][in] */ VARIANT varChild);
        
        /* [id][hidden] */ HRESULT ( STDMETHODCALLTYPE *accLocation )( 
            IAccessibleComparable * This,
            /* [out] */ long *pxLeft,
            /* [out] */ long *pyTop,
            /* [out] */ long *pcxWidth,
            /* [out] */ long *pcyHeight,
            /* [optional][in] */ VARIANT varChild);
        
        /* [id][hidden] */ HRESULT ( STDMETHODCALLTYPE *accNavigate )( 
            IAccessibleComparable * This,
            /* [in] */ long navDir,
            /* [optional][in] */ VARIANT varStart,
            /* [retval][out] */ VARIANT *pvarEndUpAt);
        
        /* [id][hidden] */ HRESULT ( STDMETHODCALLTYPE *accHitTest )( 
            IAccessibleComparable * This,
            /* [in] */ long xLeft,
            /* [in] */ long yTop,
            /* [retval][out] */ VARIANT *pvarChild);
        
        /* [id][hidden] */ HRESULT ( STDMETHODCALLTYPE *accDoDefaultAction )( 
            IAccessibleComparable * This,
            /* [optional][in] */ VARIANT varChild);
        
        /* [id][propput][hidden] */ HRESULT ( STDMETHODCALLTYPE *put_accName )( 
            IAccessibleComparable * This,
            /* [optional][in] */ VARIANT varChild,
            /* [in] */ BSTR szName);
        
        /* [id][propput][hidden] */ HRESULT ( STDMETHODCALLTYPE *put_accValue )( 
            IAccessibleComparable * This,
            /* [optional][in] */ VARIANT varChild,
            /* [in] */ BSTR szValue);
        
        HRESULT ( STDMETHODCALLTYPE *isSameObject )( 
            IAccessibleComparable * This,
            /* [in] */ IAccessibleComparable *other,
            /* [retval][out] */ BOOL *result);
        
        END_INTERFACE
    } IAccessibleComparableVtbl;

    interface IAccessibleComparable
    {
        CONST_VTBL struct IAccessibleComparableVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAccessibleComparable_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IAccessibleComparable_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IAccessibleComparable_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IAccessibleComparable_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IAccessibleComparable_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IAccessibleComparable_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IAccessibleComparable_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IAccessibleComparable_get_accParent(This,ppdispParent)	\
    ( (This)->lpVtbl -> get_accParent(This,ppdispParent) ) 

#define IAccessibleComparable_get_accChildCount(This,pcountChildren)	\
    ( (This)->lpVtbl -> get_accChildCount(This,pcountChildren) ) 

#define IAccessibleComparable_get_accChild(This,varChild,ppdispChild)	\
    ( (This)->lpVtbl -> get_accChild(This,varChild,ppdispChild) ) 

#define IAccessibleComparable_get_accName(This,varChild,pszName)	\
    ( (This)->lpVtbl -> get_accName(This,varChild,pszName) ) 

#define IAccessibleComparable_get_accValue(This,varChild,pszValue)	\
    ( (This)->lpVtbl -> get_accValue(This,varChild,pszValue) ) 

#define IAccessibleComparable_get_accDescription(This,varChild,pszDescription)	\
    ( (This)->lpVtbl -> get_accDescription(This,varChild,pszDescription) ) 

#define IAccessibleComparable_get_accRole(This,varChild,pvarRole)	\
    ( (This)->lpVtbl -> get_accRole(This,varChild,pvarRole) ) 

#define IAccessibleComparable_get_accState(This,varChild,pvarState)	\
    ( (This)->lpVtbl -> get_accState(This,varChild,pvarState) ) 

#define IAccessibleComparable_get_accHelp(This,varChild,pszHelp)	\
    ( (This)->lpVtbl -> get_accHelp(This,varChild,pszHelp) ) 

#define IAccessibleComparable_get_accHelpTopic(This,pszHelpFile,varChild,pidTopic)	\
    ( (This)->lpVtbl -> get_accHelpTopic(This,pszHelpFile,varChild,pidTopic) ) 

#define IAccessibleComparable_get_accKeyboardShortcut(This,varChild,pszKeyboardShortcut)	\
    ( (This)->lpVtbl -> get_accKeyboardShortcut(This,varChild,pszKeyboardShortcut) ) 

#define IAccessibleComparable_get_accFocus(This,pvarChild)	\
    ( (This)->lpVtbl -> get_accFocus(This,pvarChild) ) 

#define IAccessibleComparable_get_accSelection(This,pvarChildren)	\
    ( (This)->lpVtbl -> get_accSelection(This,pvarChildren) ) 

#define IAccessibleComparable_get_accDefaultAction(This,varChild,pszDefaultAction)	\
    ( (This)->lpVtbl -> get_accDefaultAction(This,varChild,pszDefaultAction) ) 

#define IAccessibleComparable_accSelect(This,flagsSelect,varChild)	\
    ( (This)->lpVtbl -> accSelect(This,flagsSelect,varChild) ) 

#define IAccessibleComparable_accLocation(This,pxLeft,pyTop,pcxWidth,pcyHeight,varChild)	\
    ( (This)->lpVtbl -> accLocation(This,pxLeft,pyTop,pcxWidth,pcyHeight,varChild) ) 

#define IAccessibleComparable_accNavigate(This,navDir,varStart,pvarEndUpAt)	\
    ( (This)->lpVtbl -> accNavigate(This,navDir,varStart,pvarEndUpAt) ) 

#define IAccessibleComparable_accHitTest(This,xLeft,yTop,pvarChild)	\
    ( (This)->lpVtbl -> accHitTest(This,xLeft,yTop,pvarChild) ) 

#define IAccessibleComparable_accDoDefaultAction(This,varChild)	\
    ( (This)->lpVtbl -> accDoDefaultAction(This,varChild) ) 

#define IAccessibleComparable_put_accName(This,varChild,szName)	\
    ( (This)->lpVtbl -> put_accName(This,varChild,szName) ) 

#define IAccessibleComparable_put_accValue(This,varChild,szValue)	\
    ( (This)->lpVtbl -> put_accValue(This,varChild,szValue) ) 


#define IAccessibleComparable_isSameObject(This,other,result)	\
    ( (This)->lpVtbl -> isSameObject(This,other,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IAccessibleComparable_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0001 */
/* [local] */ 

typedef 
enum WebScrollBarOrientation
    {	WebHorizontalScrollbar	= 0,
	WebVerticalScrollbar	= ( WebHorizontalScrollbar + 1 ) 
    } 	WebScrollBarOrientation;

typedef 
enum WebScrollBarControlSize
    {	WebRegularScrollbar	= 0,
	WebSmallScrollbar	= ( WebRegularScrollbar + 1 ) ,
	WebMiniScrollbar	= ( WebSmallScrollbar + 1 ) 
    } 	WebScrollBarControlSize;

typedef 
enum WebScrollDirection
    {	WebScrollUp	= 0,
	WebScrollDown	= ( WebScrollUp + 1 ) ,
	WebScrollLeft	= ( WebScrollDown + 1 ) ,
	WebScrollRight	= ( WebScrollLeft + 1 ) 
    } 	WebScrollDirection;

typedef 
enum WebScrollGranularity
    {	WebScrollByLine	= 0,
	WebScrollByPage	= ( WebScrollByLine + 1 ) ,
	WebScrollByDocument	= ( WebScrollByPage + 1 ) ,
	WebScrollByWheel	= ( WebScrollByDocument + 1 ) 
    } 	WebScrollGranularity;

typedef unsigned int WebScrollbarControlState;

typedef 
enum WebScrollbarControlStateMask
    {	WebActiveScrollbarState	= 1,
	WebEnabledScrollbarState	= ( 1 << 1 ) ,
	WebPressedScrollbarState	= ( 1 << 2 ) 
    } 	WebScrollbarControlStateMask;

typedef unsigned int WebScrollbarControlPartMask;

typedef 
enum WebScrollbarControlPart
    {	WebNoScrollPart	= 0,
	WebBackButtonPart	= 1,
	WebBackTrackPart	= ( 1 << 1 ) ,
	WebThumbPart	= ( 1 << 2 ) ,
	WebForwardTrackPart	= ( 1 << 3 ) ,
	WebForwardButtonPart	= ( 1 << 4 ) ,
	WebAllParts	= 0xffffffff
    } 	WebScrollbarControlPart;

// this is done to get midl to treat the JavaScriptCore API types as pointer types
#if 0
typedef void *JSContextRef;

typedef void *JSObjectRef;

typedef void *JSValueRef;

#else
typedef const struct OpaqueJSValue* JSValueRef;
typedef struct OpaqueJSValue* JSObjectRef;
typedef const struct OpaqueJSContext* JSContextRef;
#endif


extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0001_v0_0_s_ifspec;

#ifndef __IWebScriptObject_INTERFACE_DEFINED__
#define __IWebScriptObject_INTERFACE_DEFINED__

/* interface IWebScriptObject */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebScriptObject;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7022340A-649C-43fc-9214-85CA7D3BE3C7")
    IWebScriptObject : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE throwException( 
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE callWebScriptMethod( 
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE evaluateWebScript( 
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE removeWebScriptKey( 
            /* [in] */ BSTR name) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE stringRepresentation( 
            /* [retval][out] */ BSTR *stringRepresentation) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE webScriptValueAtIndex( 
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setWebScriptValueAtIndex( 
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setException( 
            /* [in] */ BSTR description) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebScriptObjectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebScriptObject * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebScriptObject * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebScriptObject * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IWebScriptObject * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IWebScriptObject * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IWebScriptObject * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IWebScriptObject * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IWebScriptObject * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IWebScriptObject * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IWebScriptObject * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IWebScriptObject * This,
            /* [in] */ BSTR description);
        
        END_INTERFACE
    } IWebScriptObjectVtbl;

    interface IWebScriptObject
    {
        CONST_VTBL struct IWebScriptObjectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebScriptObject_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebScriptObject_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebScriptObject_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebScriptObject_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IWebScriptObject_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IWebScriptObject_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IWebScriptObject_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IWebScriptObject_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IWebScriptObject_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IWebScriptObject_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IWebScriptObject_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebScriptObject_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0002 */
/* [local] */ 









extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0002_v0_0_s_ifspec;

#ifndef __IDOMViewCSS_INTERFACE_DEFINED__
#define __IDOMViewCSS_INTERFACE_DEFINED__

/* interface IDOMViewCSS */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMViewCSS;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("43EFE238-A4DF-400a-983D-FCE0C0F56BCD")
    IDOMViewCSS : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE getComputedStyle( 
            /* [in] */ IDOMElement *elt,
            /* [in] */ BSTR pseudoElt,
            /* [retval][out] */ IDOMCSSStyleDeclaration **result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMViewCSSVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMViewCSS * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMViewCSS * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMViewCSS * This);
        
        HRESULT ( STDMETHODCALLTYPE *getComputedStyle )( 
            IDOMViewCSS * This,
            /* [in] */ IDOMElement *elt,
            /* [in] */ BSTR pseudoElt,
            /* [retval][out] */ IDOMCSSStyleDeclaration **result);
        
        END_INTERFACE
    } IDOMViewCSSVtbl;

    interface IDOMViewCSS
    {
        CONST_VTBL struct IDOMViewCSSVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMViewCSS_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMViewCSS_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMViewCSS_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMViewCSS_getComputedStyle(This,elt,pseudoElt,result)	\
    ( (This)->lpVtbl -> getComputedStyle(This,elt,pseudoElt,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMViewCSS_INTERFACE_DEFINED__ */


#ifndef __IDOMObject_INTERFACE_DEFINED__
#define __IDOMObject_INTERFACE_DEFINED__

/* interface IDOMObject */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMObject;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A27FA225-F34E-425d-88EB-A35BD105A527")
    IDOMObject : public IWebScriptObject
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IDOMObjectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMObject * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMObject * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMObject * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMObject * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMObject * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMObject * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMObject * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMObject * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMObject * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMObject * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMObject * This,
            /* [in] */ BSTR description);
        
        END_INTERFACE
    } IDOMObjectVtbl;

    interface IDOMObject
    {
        CONST_VTBL struct IDOMObjectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMObject_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMObject_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMObject_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMObject_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMObject_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMObject_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMObject_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMObject_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMObject_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMObject_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMObject_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMObject_INTERFACE_DEFINED__ */


#ifndef __IDOMCSSRuleList_INTERFACE_DEFINED__
#define __IDOMCSSRuleList_INTERFACE_DEFINED__

/* interface IDOMCSSRuleList */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMCSSRuleList;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D45DA43D-5EDB-4315-A097-3ED3FA089193")
    IDOMCSSRuleList : public IDOMObject
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE length( 
            /* [retval][out] */ UINT *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE item( 
            /* [in] */ UINT index,
            /* [retval][out] */ IDOMCSSRule **result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMCSSRuleListVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMCSSRuleList * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMCSSRuleList * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMCSSRuleList * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMCSSRuleList * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMCSSRuleList * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMCSSRuleList * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMCSSRuleList * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMCSSRuleList * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMCSSRuleList * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMCSSRuleList * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMCSSRuleList * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *length )( 
            IDOMCSSRuleList * This,
            /* [retval][out] */ UINT *result);
        
        HRESULT ( STDMETHODCALLTYPE *item )( 
            IDOMCSSRuleList * This,
            /* [in] */ UINT index,
            /* [retval][out] */ IDOMCSSRule **result);
        
        END_INTERFACE
    } IDOMCSSRuleListVtbl;

    interface IDOMCSSRuleList
    {
        CONST_VTBL struct IDOMCSSRuleListVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMCSSRuleList_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMCSSRuleList_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMCSSRuleList_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMCSSRuleList_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMCSSRuleList_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMCSSRuleList_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMCSSRuleList_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMCSSRuleList_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMCSSRuleList_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMCSSRuleList_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMCSSRuleList_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMCSSRuleList_length(This,result)	\
    ( (This)->lpVtbl -> length(This,result) ) 

#define IDOMCSSRuleList_item(This,index,result)	\
    ( (This)->lpVtbl -> item(This,index,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMCSSRuleList_INTERFACE_DEFINED__ */


#ifndef __IDOMCSSRule_INTERFACE_DEFINED__
#define __IDOMCSSRule_INTERFACE_DEFINED__

/* interface IDOMCSSRule */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMCSSRule;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("05947A31-9E1C-4c98-8608-6688959D6542")
    IDOMCSSRule : public IDOMObject
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE type( 
            /* [retval][out] */ unsigned short *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE cssText( 
            /* [retval][out] */ BSTR *text) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setCssText( 
            /* [in] */ BSTR cssText) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE parentStyleSheet( 
            /* [retval][out] */ IDOMCSSStyleSheet **sheet) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE parentRule( 
            /* [retval][out] */ IDOMCSSRule **rule) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMCSSRuleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMCSSRule * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMCSSRule * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMCSSRule * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMCSSRule * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMCSSRule * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMCSSRule * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMCSSRule * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMCSSRule * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMCSSRule * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMCSSRule * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMCSSRule * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *type )( 
            IDOMCSSRule * This,
            /* [retval][out] */ unsigned short *result);
        
        HRESULT ( STDMETHODCALLTYPE *cssText )( 
            IDOMCSSRule * This,
            /* [retval][out] */ BSTR *text);
        
        HRESULT ( STDMETHODCALLTYPE *setCssText )( 
            IDOMCSSRule * This,
            /* [in] */ BSTR cssText);
        
        HRESULT ( STDMETHODCALLTYPE *parentStyleSheet )( 
            IDOMCSSRule * This,
            /* [retval][out] */ IDOMCSSStyleSheet **sheet);
        
        HRESULT ( STDMETHODCALLTYPE *parentRule )( 
            IDOMCSSRule * This,
            /* [retval][out] */ IDOMCSSRule **rule);
        
        END_INTERFACE
    } IDOMCSSRuleVtbl;

    interface IDOMCSSRule
    {
        CONST_VTBL struct IDOMCSSRuleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMCSSRule_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMCSSRule_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMCSSRule_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMCSSRule_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMCSSRule_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMCSSRule_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMCSSRule_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMCSSRule_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMCSSRule_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMCSSRule_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMCSSRule_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMCSSRule_type(This,result)	\
    ( (This)->lpVtbl -> type(This,result) ) 

#define IDOMCSSRule_cssText(This,text)	\
    ( (This)->lpVtbl -> cssText(This,text) ) 

#define IDOMCSSRule_setCssText(This,cssText)	\
    ( (This)->lpVtbl -> setCssText(This,cssText) ) 

#define IDOMCSSRule_parentStyleSheet(This,sheet)	\
    ( (This)->lpVtbl -> parentStyleSheet(This,sheet) ) 

#define IDOMCSSRule_parentRule(This,rule)	\
    ( (This)->lpVtbl -> parentRule(This,rule) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMCSSRule_INTERFACE_DEFINED__ */


#ifndef __IDOMCSSStyleDeclaration_INTERFACE_DEFINED__
#define __IDOMCSSStyleDeclaration_INTERFACE_DEFINED__

/* interface IDOMCSSStyleDeclaration */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMCSSStyleDeclaration;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("DBBE9A6B-D505-4647-B4AB-40A7CF3EE63E")
    IDOMCSSStyleDeclaration : public IDOMObject
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE cssText( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setCssText( 
            /* [in] */ BSTR cssText) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getPropertyValue( 
            /* [in] */ BSTR propertyName,
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getPropertyCSSValue( 
            /* [in] */ BSTR propertyName,
            /* [retval][out] */ IDOMCSSValue **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE removeProperty( 
            /* [in] */ BSTR propertyName,
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getPropertyPriority( 
            /* [in] */ BSTR propertyName,
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setProperty( 
            /* [in] */ BSTR propertyName,
            /* [in] */ BSTR value,
            /* [in] */ BSTR priority) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE length( 
            /* [retval][out] */ UINT *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE item( 
            /* [in] */ UINT index,
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE parentRule( 
            /* [retval][out] */ IDOMCSSRule **result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMCSSStyleDeclarationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMCSSStyleDeclaration * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMCSSStyleDeclaration * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMCSSStyleDeclaration * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMCSSStyleDeclaration * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMCSSStyleDeclaration * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMCSSStyleDeclaration * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMCSSStyleDeclaration * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMCSSStyleDeclaration * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMCSSStyleDeclaration * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMCSSStyleDeclaration * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMCSSStyleDeclaration * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *cssText )( 
            IDOMCSSStyleDeclaration * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setCssText )( 
            IDOMCSSStyleDeclaration * This,
            /* [in] */ BSTR cssText);
        
        HRESULT ( STDMETHODCALLTYPE *getPropertyValue )( 
            IDOMCSSStyleDeclaration * This,
            /* [in] */ BSTR propertyName,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *getPropertyCSSValue )( 
            IDOMCSSStyleDeclaration * This,
            /* [in] */ BSTR propertyName,
            /* [retval][out] */ IDOMCSSValue **result);
        
        HRESULT ( STDMETHODCALLTYPE *removeProperty )( 
            IDOMCSSStyleDeclaration * This,
            /* [in] */ BSTR propertyName,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *getPropertyPriority )( 
            IDOMCSSStyleDeclaration * This,
            /* [in] */ BSTR propertyName,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setProperty )( 
            IDOMCSSStyleDeclaration * This,
            /* [in] */ BSTR propertyName,
            /* [in] */ BSTR value,
            /* [in] */ BSTR priority);
        
        HRESULT ( STDMETHODCALLTYPE *length )( 
            IDOMCSSStyleDeclaration * This,
            /* [retval][out] */ UINT *result);
        
        HRESULT ( STDMETHODCALLTYPE *item )( 
            IDOMCSSStyleDeclaration * This,
            /* [in] */ UINT index,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *parentRule )( 
            IDOMCSSStyleDeclaration * This,
            /* [retval][out] */ IDOMCSSRule **result);
        
        END_INTERFACE
    } IDOMCSSStyleDeclarationVtbl;

    interface IDOMCSSStyleDeclaration
    {
        CONST_VTBL struct IDOMCSSStyleDeclarationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMCSSStyleDeclaration_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMCSSStyleDeclaration_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMCSSStyleDeclaration_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMCSSStyleDeclaration_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMCSSStyleDeclaration_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMCSSStyleDeclaration_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMCSSStyleDeclaration_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMCSSStyleDeclaration_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMCSSStyleDeclaration_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMCSSStyleDeclaration_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMCSSStyleDeclaration_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMCSSStyleDeclaration_cssText(This,result)	\
    ( (This)->lpVtbl -> cssText(This,result) ) 

#define IDOMCSSStyleDeclaration_setCssText(This,cssText)	\
    ( (This)->lpVtbl -> setCssText(This,cssText) ) 

#define IDOMCSSStyleDeclaration_getPropertyValue(This,propertyName,result)	\
    ( (This)->lpVtbl -> getPropertyValue(This,propertyName,result) ) 

#define IDOMCSSStyleDeclaration_getPropertyCSSValue(This,propertyName,result)	\
    ( (This)->lpVtbl -> getPropertyCSSValue(This,propertyName,result) ) 

#define IDOMCSSStyleDeclaration_removeProperty(This,propertyName,result)	\
    ( (This)->lpVtbl -> removeProperty(This,propertyName,result) ) 

#define IDOMCSSStyleDeclaration_getPropertyPriority(This,propertyName,result)	\
    ( (This)->lpVtbl -> getPropertyPriority(This,propertyName,result) ) 

#define IDOMCSSStyleDeclaration_setProperty(This,propertyName,value,priority)	\
    ( (This)->lpVtbl -> setProperty(This,propertyName,value,priority) ) 

#define IDOMCSSStyleDeclaration_length(This,result)	\
    ( (This)->lpVtbl -> length(This,result) ) 

#define IDOMCSSStyleDeclaration_item(This,index,result)	\
    ( (This)->lpVtbl -> item(This,index,result) ) 

#define IDOMCSSStyleDeclaration_parentRule(This,result)	\
    ( (This)->lpVtbl -> parentRule(This,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMCSSStyleDeclaration_INTERFACE_DEFINED__ */


#ifndef __IDOMCSSValue_INTERFACE_DEFINED__
#define __IDOMCSSValue_INTERFACE_DEFINED__

/* interface IDOMCSSValue */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMCSSValue;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("51D29553-2AF7-4f52-AFE6-3C59196A8BAA")
    IDOMCSSValue : public IDOMObject
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE cssText( 
            /* [retval][out] */ BSTR *text) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setCssText( 
            /* [in] */ BSTR text) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE cssValueType( 
            /* [retval][out] */ unsigned short *valueType) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMCSSValueVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMCSSValue * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMCSSValue * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMCSSValue * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMCSSValue * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMCSSValue * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMCSSValue * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMCSSValue * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMCSSValue * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMCSSValue * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMCSSValue * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMCSSValue * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *cssText )( 
            IDOMCSSValue * This,
            /* [retval][out] */ BSTR *text);
        
        HRESULT ( STDMETHODCALLTYPE *setCssText )( 
            IDOMCSSValue * This,
            /* [in] */ BSTR text);
        
        HRESULT ( STDMETHODCALLTYPE *cssValueType )( 
            IDOMCSSValue * This,
            /* [retval][out] */ unsigned short *valueType);
        
        END_INTERFACE
    } IDOMCSSValueVtbl;

    interface IDOMCSSValue
    {
        CONST_VTBL struct IDOMCSSValueVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMCSSValue_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMCSSValue_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMCSSValue_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMCSSValue_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMCSSValue_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMCSSValue_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMCSSValue_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMCSSValue_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMCSSValue_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMCSSValue_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMCSSValue_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMCSSValue_cssText(This,text)	\
    ( (This)->lpVtbl -> cssText(This,text) ) 

#define IDOMCSSValue_setCssText(This,text)	\
    ( (This)->lpVtbl -> setCssText(This,text) ) 

#define IDOMCSSValue_cssValueType(This,valueType)	\
    ( (This)->lpVtbl -> cssValueType(This,valueType) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMCSSValue_INTERFACE_DEFINED__ */


#ifndef __IDOMCSSStyleSheet_INTERFACE_DEFINED__
#define __IDOMCSSStyleSheet_INTERFACE_DEFINED__

/* interface IDOMCSSStyleSheet */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMCSSStyleSheet;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("14B1C213-1458-48a1-AD8F-54BFE64F9ECF")
    IDOMCSSStyleSheet : public IDOMObject
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ownerRule( 
            /* [retval][out] */ IDOMCSSRule **rule) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE cssRules( 
            /* [retval][out] */ IDOMCSSRuleList **ruleList) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE insertRule( 
            /* [in] */ BSTR rule,
            /* [in] */ UINT index,
            /* [retval][out] */ UINT *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE deleteRule( 
            /* [in] */ UINT index) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMCSSStyleSheetVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMCSSStyleSheet * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMCSSStyleSheet * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMCSSStyleSheet * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMCSSStyleSheet * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMCSSStyleSheet * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMCSSStyleSheet * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMCSSStyleSheet * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMCSSStyleSheet * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMCSSStyleSheet * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMCSSStyleSheet * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMCSSStyleSheet * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *ownerRule )( 
            IDOMCSSStyleSheet * This,
            /* [retval][out] */ IDOMCSSRule **rule);
        
        HRESULT ( STDMETHODCALLTYPE *cssRules )( 
            IDOMCSSStyleSheet * This,
            /* [retval][out] */ IDOMCSSRuleList **ruleList);
        
        HRESULT ( STDMETHODCALLTYPE *insertRule )( 
            IDOMCSSStyleSheet * This,
            /* [in] */ BSTR rule,
            /* [in] */ UINT index,
            /* [retval][out] */ UINT *result);
        
        HRESULT ( STDMETHODCALLTYPE *deleteRule )( 
            IDOMCSSStyleSheet * This,
            /* [in] */ UINT index);
        
        END_INTERFACE
    } IDOMCSSStyleSheetVtbl;

    interface IDOMCSSStyleSheet
    {
        CONST_VTBL struct IDOMCSSStyleSheetVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMCSSStyleSheet_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMCSSStyleSheet_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMCSSStyleSheet_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMCSSStyleSheet_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMCSSStyleSheet_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMCSSStyleSheet_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMCSSStyleSheet_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMCSSStyleSheet_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMCSSStyleSheet_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMCSSStyleSheet_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMCSSStyleSheet_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMCSSStyleSheet_ownerRule(This,rule)	\
    ( (This)->lpVtbl -> ownerRule(This,rule) ) 

#define IDOMCSSStyleSheet_cssRules(This,ruleList)	\
    ( (This)->lpVtbl -> cssRules(This,ruleList) ) 

#define IDOMCSSStyleSheet_insertRule(This,rule,index,result)	\
    ( (This)->lpVtbl -> insertRule(This,rule,index,result) ) 

#define IDOMCSSStyleSheet_deleteRule(This,index)	\
    ( (This)->lpVtbl -> deleteRule(This,index) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMCSSStyleSheet_INTERFACE_DEFINED__ */


#ifndef __IDOMElementCSSInlineStyle_INTERFACE_DEFINED__
#define __IDOMElementCSSInlineStyle_INTERFACE_DEFINED__

/* interface IDOMElementCSSInlineStyle */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMElementCSSInlineStyle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("585127E2-D698-44c4-83EC-4D1E6E07E90D")
    IDOMElementCSSInlineStyle : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE style( 
            /* [retval][out] */ IDOMCSSStyleDeclaration **result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMElementCSSInlineStyleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMElementCSSInlineStyle * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMElementCSSInlineStyle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMElementCSSInlineStyle * This);
        
        HRESULT ( STDMETHODCALLTYPE *style )( 
            IDOMElementCSSInlineStyle * This,
            /* [retval][out] */ IDOMCSSStyleDeclaration **result);
        
        END_INTERFACE
    } IDOMElementCSSInlineStyleVtbl;

    interface IDOMElementCSSInlineStyle
    {
        CONST_VTBL struct IDOMElementCSSInlineStyleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMElementCSSInlineStyle_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMElementCSSInlineStyle_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMElementCSSInlineStyle_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMElementCSSInlineStyle_style(This,result)	\
    ( (This)->lpVtbl -> style(This,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMElementCSSInlineStyle_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0009 */
/* [local] */ 

















extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0009_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0009_v0_0_s_ifspec;

#ifndef __IDOMImplementation_INTERFACE_DEFINED__
#define __IDOMImplementation_INTERFACE_DEFINED__

/* interface IDOMImplementation */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMImplementation;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6E48C25D-E542-4d1a-BC73-ACDC21E39C56")
    IDOMImplementation : public IDOMObject
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE hasFeature( 
            /* [in] */ BSTR feature,
            /* [in] */ BSTR version,
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE createDocumentType( 
            /* [in] */ BSTR qualifiedName,
            /* [in] */ BSTR publicId,
            /* [in] */ BSTR systemId,
            /* [retval][out] */ IDOMDocumentType **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE createDocument( 
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR qualifiedName,
            /* [in] */ IDOMDocumentType *doctype,
            /* [retval][out] */ IDOMDocument **result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMImplementationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMImplementation * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMImplementation * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMImplementation * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMImplementation * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMImplementation * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMImplementation * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMImplementation * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMImplementation * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMImplementation * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMImplementation * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMImplementation * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *hasFeature )( 
            IDOMImplementation * This,
            /* [in] */ BSTR feature,
            /* [in] */ BSTR version,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *createDocumentType )( 
            IDOMImplementation * This,
            /* [in] */ BSTR qualifiedName,
            /* [in] */ BSTR publicId,
            /* [in] */ BSTR systemId,
            /* [retval][out] */ IDOMDocumentType **result);
        
        HRESULT ( STDMETHODCALLTYPE *createDocument )( 
            IDOMImplementation * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR qualifiedName,
            /* [in] */ IDOMDocumentType *doctype,
            /* [retval][out] */ IDOMDocument **result);
        
        END_INTERFACE
    } IDOMImplementationVtbl;

    interface IDOMImplementation
    {
        CONST_VTBL struct IDOMImplementationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMImplementation_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMImplementation_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMImplementation_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMImplementation_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMImplementation_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMImplementation_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMImplementation_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMImplementation_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMImplementation_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMImplementation_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMImplementation_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMImplementation_hasFeature(This,feature,version,result)	\
    ( (This)->lpVtbl -> hasFeature(This,feature,version,result) ) 

#define IDOMImplementation_createDocumentType(This,qualifiedName,publicId,systemId,result)	\
    ( (This)->lpVtbl -> createDocumentType(This,qualifiedName,publicId,systemId,result) ) 

#define IDOMImplementation_createDocument(This,namespaceURI,qualifiedName,doctype,result)	\
    ( (This)->lpVtbl -> createDocument(This,namespaceURI,qualifiedName,doctype,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMImplementation_INTERFACE_DEFINED__ */


#ifndef __IDOMNode_INTERFACE_DEFINED__
#define __IDOMNode_INTERFACE_DEFINED__

/* interface IDOMNode */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMNode;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3EEA3E20-72DA-4be7-954F-79B5A14AD726")
    IDOMNode : public IDOMObject
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE nodeName( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE nodeValue( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setNodeValue( 
            /* [in] */ BSTR value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE nodeType( 
            /* [retval][out] */ unsigned short *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE parentNode( 
            /* [retval][out] */ IDOMNode **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE childNodes( 
            /* [retval][out] */ IDOMNodeList **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE firstChild( 
            /* [retval][out] */ IDOMNode **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE lastChild( 
            /* [retval][out] */ IDOMNode **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE previousSibling( 
            /* [retval][out] */ IDOMNode **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE nextSibling( 
            /* [retval][out] */ IDOMNode **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE attributes( 
            /* [retval][out] */ IDOMNamedNodeMap **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ownerDocument( 
            /* [retval][out] */ IDOMDocument **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE insertBefore( 
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *refChild,
            /* [retval][out] */ IDOMNode **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE replaceChild( 
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE removeChild( 
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE appendChild( 
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE hasChildNodes( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE cloneNode( 
            /* [in] */ BOOL deep,
            /* [retval][out] */ IDOMNode **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE normalize( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isSupported( 
            /* [in] */ BSTR feature,
            /* [in] */ BSTR version,
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE namespaceURI( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE prefix( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setPrefix( 
            /* [in] */ BSTR prefix) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE localName( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE hasAttributes( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isSameNode( 
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isEqualNode( 
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE textContent( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setTextContent( 
            /* [in] */ BSTR text) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMNodeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMNode * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMNode * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMNode * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMNode * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMNode * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMNode * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMNode * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMNode * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMNode * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMNode * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMNode * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *nodeName )( 
            IDOMNode * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *nodeValue )( 
            IDOMNode * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setNodeValue )( 
            IDOMNode * This,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *nodeType )( 
            IDOMNode * This,
            /* [retval][out] */ unsigned short *result);
        
        HRESULT ( STDMETHODCALLTYPE *parentNode )( 
            IDOMNode * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *childNodes )( 
            IDOMNode * This,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *firstChild )( 
            IDOMNode * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *lastChild )( 
            IDOMNode * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *previousSibling )( 
            IDOMNode * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *nextSibling )( 
            IDOMNode * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *attributes )( 
            IDOMNode * This,
            /* [retval][out] */ IDOMNamedNodeMap **result);
        
        HRESULT ( STDMETHODCALLTYPE *ownerDocument )( 
            IDOMNode * This,
            /* [retval][out] */ IDOMDocument **result);
        
        HRESULT ( STDMETHODCALLTYPE *insertBefore )( 
            IDOMNode * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *refChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *replaceChild )( 
            IDOMNode * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *removeChild )( 
            IDOMNode * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IDOMNode * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IDOMNode * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IDOMNode * This,
            /* [in] */ BOOL deep,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *normalize )( 
            IDOMNode * This);
        
        HRESULT ( STDMETHODCALLTYPE *isSupported )( 
            IDOMNode * This,
            /* [in] */ BSTR feature,
            /* [in] */ BSTR version,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *namespaceURI )( 
            IDOMNode * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *prefix )( 
            IDOMNode * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setPrefix )( 
            IDOMNode * This,
            /* [in] */ BSTR prefix);
        
        HRESULT ( STDMETHODCALLTYPE *localName )( 
            IDOMNode * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *hasAttributes )( 
            IDOMNode * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isSameNode )( 
            IDOMNode * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isEqualNode )( 
            IDOMNode * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *textContent )( 
            IDOMNode * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setTextContent )( 
            IDOMNode * This,
            /* [in] */ BSTR text);
        
        END_INTERFACE
    } IDOMNodeVtbl;

    interface IDOMNode
    {
        CONST_VTBL struct IDOMNodeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMNode_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMNode_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMNode_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMNode_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMNode_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMNode_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMNode_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMNode_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMNode_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMNode_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMNode_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMNode_nodeName(This,result)	\
    ( (This)->lpVtbl -> nodeName(This,result) ) 

#define IDOMNode_nodeValue(This,result)	\
    ( (This)->lpVtbl -> nodeValue(This,result) ) 

#define IDOMNode_setNodeValue(This,value)	\
    ( (This)->lpVtbl -> setNodeValue(This,value) ) 

#define IDOMNode_nodeType(This,result)	\
    ( (This)->lpVtbl -> nodeType(This,result) ) 

#define IDOMNode_parentNode(This,result)	\
    ( (This)->lpVtbl -> parentNode(This,result) ) 

#define IDOMNode_childNodes(This,result)	\
    ( (This)->lpVtbl -> childNodes(This,result) ) 

#define IDOMNode_firstChild(This,result)	\
    ( (This)->lpVtbl -> firstChild(This,result) ) 

#define IDOMNode_lastChild(This,result)	\
    ( (This)->lpVtbl -> lastChild(This,result) ) 

#define IDOMNode_previousSibling(This,result)	\
    ( (This)->lpVtbl -> previousSibling(This,result) ) 

#define IDOMNode_nextSibling(This,result)	\
    ( (This)->lpVtbl -> nextSibling(This,result) ) 

#define IDOMNode_attributes(This,result)	\
    ( (This)->lpVtbl -> attributes(This,result) ) 

#define IDOMNode_ownerDocument(This,result)	\
    ( (This)->lpVtbl -> ownerDocument(This,result) ) 

#define IDOMNode_insertBefore(This,newChild,refChild,result)	\
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,result) ) 

#define IDOMNode_replaceChild(This,newChild,oldChild,result)	\
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,result) ) 

#define IDOMNode_removeChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> removeChild(This,oldChild,result) ) 

#define IDOMNode_appendChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> appendChild(This,oldChild,result) ) 

#define IDOMNode_hasChildNodes(This,result)	\
    ( (This)->lpVtbl -> hasChildNodes(This,result) ) 

#define IDOMNode_cloneNode(This,deep,result)	\
    ( (This)->lpVtbl -> cloneNode(This,deep,result) ) 

#define IDOMNode_normalize(This)	\
    ( (This)->lpVtbl -> normalize(This) ) 

#define IDOMNode_isSupported(This,feature,version,result)	\
    ( (This)->lpVtbl -> isSupported(This,feature,version,result) ) 

#define IDOMNode_namespaceURI(This,result)	\
    ( (This)->lpVtbl -> namespaceURI(This,result) ) 

#define IDOMNode_prefix(This,result)	\
    ( (This)->lpVtbl -> prefix(This,result) ) 

#define IDOMNode_setPrefix(This,prefix)	\
    ( (This)->lpVtbl -> setPrefix(This,prefix) ) 

#define IDOMNode_localName(This,result)	\
    ( (This)->lpVtbl -> localName(This,result) ) 

#define IDOMNode_hasAttributes(This,result)	\
    ( (This)->lpVtbl -> hasAttributes(This,result) ) 

#define IDOMNode_isSameNode(This,other,result)	\
    ( (This)->lpVtbl -> isSameNode(This,other,result) ) 

#define IDOMNode_isEqualNode(This,other,result)	\
    ( (This)->lpVtbl -> isEqualNode(This,other,result) ) 

#define IDOMNode_textContent(This,result)	\
    ( (This)->lpVtbl -> textContent(This,result) ) 

#define IDOMNode_setTextContent(This,text)	\
    ( (This)->lpVtbl -> setTextContent(This,text) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMNode_INTERFACE_DEFINED__ */


#ifndef __IDOMNodeList_INTERFACE_DEFINED__
#define __IDOMNodeList_INTERFACE_DEFINED__

/* interface IDOMNodeList */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMNodeList;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10A05A96-CBD9-4493-83AD-FAFB952615CE")
    IDOMNodeList : public IDOMObject
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE item( 
            /* [in] */ UINT index,
            /* [retval][out] */ IDOMNode **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE length( 
            /* [retval][out] */ UINT *result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMNodeListVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMNodeList * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMNodeList * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMNodeList * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMNodeList * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMNodeList * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMNodeList * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMNodeList * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMNodeList * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMNodeList * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMNodeList * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMNodeList * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *item )( 
            IDOMNodeList * This,
            /* [in] */ UINT index,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *length )( 
            IDOMNodeList * This,
            /* [retval][out] */ UINT *result);
        
        END_INTERFACE
    } IDOMNodeListVtbl;

    interface IDOMNodeList
    {
        CONST_VTBL struct IDOMNodeListVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMNodeList_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMNodeList_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMNodeList_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMNodeList_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMNodeList_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMNodeList_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMNodeList_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMNodeList_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMNodeList_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMNodeList_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMNodeList_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMNodeList_item(This,index,result)	\
    ( (This)->lpVtbl -> item(This,index,result) ) 

#define IDOMNodeList_length(This,result)	\
    ( (This)->lpVtbl -> length(This,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMNodeList_INTERFACE_DEFINED__ */


#ifndef __IDOMNamedNodeMap_INTERFACE_DEFINED__
#define __IDOMNamedNodeMap_INTERFACE_DEFINED__

/* interface IDOMNamedNodeMap */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMNamedNodeMap;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("E6CBF396-C9F9-431b-A8D6-BCB525067E9F")
    IDOMNamedNodeMap : public IDOMObject
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE getNamedItem( 
            /* [in] */ BSTR name,
            /* [retval][out] */ IDOMNode **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setNamedItem( 
            /* [in] */ IDOMNode *arg,
            /* [retval][out] */ IDOMNode **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE removeNamedItem( 
            /* [in] */ BSTR name,
            /* [retval][out] */ IDOMNode **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE item( 
            /* [in] */ UINT index,
            /* [retval][out] */ IDOMNode **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE length( 
            /* [retval][out] */ UINT *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getNamedItemNS( 
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ IDOMNode **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setNamedItemNS( 
            /* [in] */ IDOMNode *arg,
            /* [retval][out] */ IDOMNode **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE removeNamedItemNS( 
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ IDOMNode **result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMNamedNodeMapVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMNamedNodeMap * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMNamedNodeMap * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMNamedNodeMap * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMNamedNodeMap * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMNamedNodeMap * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMNamedNodeMap * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMNamedNodeMap * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMNamedNodeMap * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMNamedNodeMap * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMNamedNodeMap * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMNamedNodeMap * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *getNamedItem )( 
            IDOMNamedNodeMap * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *setNamedItem )( 
            IDOMNamedNodeMap * This,
            /* [in] */ IDOMNode *arg,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *removeNamedItem )( 
            IDOMNamedNodeMap * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *item )( 
            IDOMNamedNodeMap * This,
            /* [in] */ UINT index,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *length )( 
            IDOMNamedNodeMap * This,
            /* [retval][out] */ UINT *result);
        
        HRESULT ( STDMETHODCALLTYPE *getNamedItemNS )( 
            IDOMNamedNodeMap * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *setNamedItemNS )( 
            IDOMNamedNodeMap * This,
            /* [in] */ IDOMNode *arg,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *removeNamedItemNS )( 
            IDOMNamedNodeMap * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ IDOMNode **result);
        
        END_INTERFACE
    } IDOMNamedNodeMapVtbl;

    interface IDOMNamedNodeMap
    {
        CONST_VTBL struct IDOMNamedNodeMapVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMNamedNodeMap_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMNamedNodeMap_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMNamedNodeMap_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMNamedNodeMap_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMNamedNodeMap_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMNamedNodeMap_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMNamedNodeMap_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMNamedNodeMap_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMNamedNodeMap_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMNamedNodeMap_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMNamedNodeMap_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMNamedNodeMap_getNamedItem(This,name,result)	\
    ( (This)->lpVtbl -> getNamedItem(This,name,result) ) 

#define IDOMNamedNodeMap_setNamedItem(This,arg,result)	\
    ( (This)->lpVtbl -> setNamedItem(This,arg,result) ) 

#define IDOMNamedNodeMap_removeNamedItem(This,name,result)	\
    ( (This)->lpVtbl -> removeNamedItem(This,name,result) ) 

#define IDOMNamedNodeMap_item(This,index,result)	\
    ( (This)->lpVtbl -> item(This,index,result) ) 

#define IDOMNamedNodeMap_length(This,result)	\
    ( (This)->lpVtbl -> length(This,result) ) 

#define IDOMNamedNodeMap_getNamedItemNS(This,namespaceURI,localName,result)	\
    ( (This)->lpVtbl -> getNamedItemNS(This,namespaceURI,localName,result) ) 

#define IDOMNamedNodeMap_setNamedItemNS(This,arg,result)	\
    ( (This)->lpVtbl -> setNamedItemNS(This,arg,result) ) 

#define IDOMNamedNodeMap_removeNamedItemNS(This,namespaceURI,localName,result)	\
    ( (This)->lpVtbl -> removeNamedItemNS(This,namespaceURI,localName,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMNamedNodeMap_INTERFACE_DEFINED__ */


#ifndef __IDOMDocument_INTERFACE_DEFINED__
#define __IDOMDocument_INTERFACE_DEFINED__

/* interface IDOMDocument */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMDocument;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A83C2C44-0BAC-45c7-8E17-6A49975D5CCA")
    IDOMDocument : public IDOMNode
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE doctype( 
            /* [retval][out] */ IDOMDocumentType **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE implementation( 
            /* [retval][out] */ IDOMImplementation **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE documentElement( 
            /* [retval][out] */ IDOMElement **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE createElement( 
            /* [in] */ BSTR tagName,
            /* [retval][out] */ IDOMElement **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE createDocumentFragment( 
            /* [retval][out] */ IDOMDocumentFragment **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE createTextNode( 
            /* [in] */ BSTR data,
            /* [retval][out] */ IDOMText **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE createComment( 
            /* [in] */ BSTR data,
            /* [retval][out] */ IDOMComment **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE createCDATASection( 
            /* [in] */ BSTR data,
            /* [retval][out] */ IDOMCDATASection **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE createProcessingInstruction( 
            /* [in] */ BSTR target,
            /* [in] */ BSTR data,
            /* [retval][out] */ IDOMProcessingInstruction **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE createAttribute( 
            /* [in] */ BSTR name,
            /* [retval][out] */ IDOMAttr **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE createEntityReference( 
            /* [in] */ BSTR name,
            /* [retval][out] */ IDOMEntityReference **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getElementsByTagName( 
            /* [in] */ BSTR tagName,
            /* [retval][out] */ IDOMNodeList **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE importNode( 
            /* [in] */ IDOMNode *importedNode,
            /* [in] */ BOOL deep,
            /* [retval][out] */ IDOMNode **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE createElementNS( 
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR qualifiedName,
            /* [retval][out] */ IDOMElement **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE createAttributeNS( 
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR qualifiedName,
            /* [retval][out] */ IDOMAttr **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getElementsByTagNameNS( 
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ IDOMNodeList **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getElementById( 
            /* [in] */ BSTR elementId,
            /* [retval][out] */ IDOMElement **result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMDocumentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMDocument * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMDocument * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMDocument * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMDocument * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMDocument * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMDocument * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMDocument * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMDocument * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMDocument * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMDocument * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMDocument * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *nodeName )( 
            IDOMDocument * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *nodeValue )( 
            IDOMDocument * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setNodeValue )( 
            IDOMDocument * This,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *nodeType )( 
            IDOMDocument * This,
            /* [retval][out] */ unsigned short *result);
        
        HRESULT ( STDMETHODCALLTYPE *parentNode )( 
            IDOMDocument * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *childNodes )( 
            IDOMDocument * This,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *firstChild )( 
            IDOMDocument * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *lastChild )( 
            IDOMDocument * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *previousSibling )( 
            IDOMDocument * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *nextSibling )( 
            IDOMDocument * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *attributes )( 
            IDOMDocument * This,
            /* [retval][out] */ IDOMNamedNodeMap **result);
        
        HRESULT ( STDMETHODCALLTYPE *ownerDocument )( 
            IDOMDocument * This,
            /* [retval][out] */ IDOMDocument **result);
        
        HRESULT ( STDMETHODCALLTYPE *insertBefore )( 
            IDOMDocument * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *refChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *replaceChild )( 
            IDOMDocument * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *removeChild )( 
            IDOMDocument * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IDOMDocument * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IDOMDocument * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IDOMDocument * This,
            /* [in] */ BOOL deep,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *normalize )( 
            IDOMDocument * This);
        
        HRESULT ( STDMETHODCALLTYPE *isSupported )( 
            IDOMDocument * This,
            /* [in] */ BSTR feature,
            /* [in] */ BSTR version,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *namespaceURI )( 
            IDOMDocument * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *prefix )( 
            IDOMDocument * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setPrefix )( 
            IDOMDocument * This,
            /* [in] */ BSTR prefix);
        
        HRESULT ( STDMETHODCALLTYPE *localName )( 
            IDOMDocument * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *hasAttributes )( 
            IDOMDocument * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isSameNode )( 
            IDOMDocument * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isEqualNode )( 
            IDOMDocument * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *textContent )( 
            IDOMDocument * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setTextContent )( 
            IDOMDocument * This,
            /* [in] */ BSTR text);
        
        HRESULT ( STDMETHODCALLTYPE *doctype )( 
            IDOMDocument * This,
            /* [retval][out] */ IDOMDocumentType **result);
        
        HRESULT ( STDMETHODCALLTYPE *implementation )( 
            IDOMDocument * This,
            /* [retval][out] */ IDOMImplementation **result);
        
        HRESULT ( STDMETHODCALLTYPE *documentElement )( 
            IDOMDocument * This,
            /* [retval][out] */ IDOMElement **result);
        
        HRESULT ( STDMETHODCALLTYPE *createElement )( 
            IDOMDocument * This,
            /* [in] */ BSTR tagName,
            /* [retval][out] */ IDOMElement **result);
        
        HRESULT ( STDMETHODCALLTYPE *createDocumentFragment )( 
            IDOMDocument * This,
            /* [retval][out] */ IDOMDocumentFragment **result);
        
        HRESULT ( STDMETHODCALLTYPE *createTextNode )( 
            IDOMDocument * This,
            /* [in] */ BSTR data,
            /* [retval][out] */ IDOMText **result);
        
        HRESULT ( STDMETHODCALLTYPE *createComment )( 
            IDOMDocument * This,
            /* [in] */ BSTR data,
            /* [retval][out] */ IDOMComment **result);
        
        HRESULT ( STDMETHODCALLTYPE *createCDATASection )( 
            IDOMDocument * This,
            /* [in] */ BSTR data,
            /* [retval][out] */ IDOMCDATASection **result);
        
        HRESULT ( STDMETHODCALLTYPE *createProcessingInstruction )( 
            IDOMDocument * This,
            /* [in] */ BSTR target,
            /* [in] */ BSTR data,
            /* [retval][out] */ IDOMProcessingInstruction **result);
        
        HRESULT ( STDMETHODCALLTYPE *createAttribute )( 
            IDOMDocument * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *createEntityReference )( 
            IDOMDocument * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ IDOMEntityReference **result);
        
        HRESULT ( STDMETHODCALLTYPE *getElementsByTagName )( 
            IDOMDocument * This,
            /* [in] */ BSTR tagName,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *importNode )( 
            IDOMDocument * This,
            /* [in] */ IDOMNode *importedNode,
            /* [in] */ BOOL deep,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *createElementNS )( 
            IDOMDocument * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR qualifiedName,
            /* [retval][out] */ IDOMElement **result);
        
        HRESULT ( STDMETHODCALLTYPE *createAttributeNS )( 
            IDOMDocument * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR qualifiedName,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *getElementsByTagNameNS )( 
            IDOMDocument * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *getElementById )( 
            IDOMDocument * This,
            /* [in] */ BSTR elementId,
            /* [retval][out] */ IDOMElement **result);
        
        END_INTERFACE
    } IDOMDocumentVtbl;

    interface IDOMDocument
    {
        CONST_VTBL struct IDOMDocumentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMDocument_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMDocument_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMDocument_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMDocument_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMDocument_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMDocument_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMDocument_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMDocument_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMDocument_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMDocument_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMDocument_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMDocument_nodeName(This,result)	\
    ( (This)->lpVtbl -> nodeName(This,result) ) 

#define IDOMDocument_nodeValue(This,result)	\
    ( (This)->lpVtbl -> nodeValue(This,result) ) 

#define IDOMDocument_setNodeValue(This,value)	\
    ( (This)->lpVtbl -> setNodeValue(This,value) ) 

#define IDOMDocument_nodeType(This,result)	\
    ( (This)->lpVtbl -> nodeType(This,result) ) 

#define IDOMDocument_parentNode(This,result)	\
    ( (This)->lpVtbl -> parentNode(This,result) ) 

#define IDOMDocument_childNodes(This,result)	\
    ( (This)->lpVtbl -> childNodes(This,result) ) 

#define IDOMDocument_firstChild(This,result)	\
    ( (This)->lpVtbl -> firstChild(This,result) ) 

#define IDOMDocument_lastChild(This,result)	\
    ( (This)->lpVtbl -> lastChild(This,result) ) 

#define IDOMDocument_previousSibling(This,result)	\
    ( (This)->lpVtbl -> previousSibling(This,result) ) 

#define IDOMDocument_nextSibling(This,result)	\
    ( (This)->lpVtbl -> nextSibling(This,result) ) 

#define IDOMDocument_attributes(This,result)	\
    ( (This)->lpVtbl -> attributes(This,result) ) 

#define IDOMDocument_ownerDocument(This,result)	\
    ( (This)->lpVtbl -> ownerDocument(This,result) ) 

#define IDOMDocument_insertBefore(This,newChild,refChild,result)	\
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,result) ) 

#define IDOMDocument_replaceChild(This,newChild,oldChild,result)	\
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,result) ) 

#define IDOMDocument_removeChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> removeChild(This,oldChild,result) ) 

#define IDOMDocument_appendChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> appendChild(This,oldChild,result) ) 

#define IDOMDocument_hasChildNodes(This,result)	\
    ( (This)->lpVtbl -> hasChildNodes(This,result) ) 

#define IDOMDocument_cloneNode(This,deep,result)	\
    ( (This)->lpVtbl -> cloneNode(This,deep,result) ) 

#define IDOMDocument_normalize(This)	\
    ( (This)->lpVtbl -> normalize(This) ) 

#define IDOMDocument_isSupported(This,feature,version,result)	\
    ( (This)->lpVtbl -> isSupported(This,feature,version,result) ) 

#define IDOMDocument_namespaceURI(This,result)	\
    ( (This)->lpVtbl -> namespaceURI(This,result) ) 

#define IDOMDocument_prefix(This,result)	\
    ( (This)->lpVtbl -> prefix(This,result) ) 

#define IDOMDocument_setPrefix(This,prefix)	\
    ( (This)->lpVtbl -> setPrefix(This,prefix) ) 

#define IDOMDocument_localName(This,result)	\
    ( (This)->lpVtbl -> localName(This,result) ) 

#define IDOMDocument_hasAttributes(This,result)	\
    ( (This)->lpVtbl -> hasAttributes(This,result) ) 

#define IDOMDocument_isSameNode(This,other,result)	\
    ( (This)->lpVtbl -> isSameNode(This,other,result) ) 

#define IDOMDocument_isEqualNode(This,other,result)	\
    ( (This)->lpVtbl -> isEqualNode(This,other,result) ) 

#define IDOMDocument_textContent(This,result)	\
    ( (This)->lpVtbl -> textContent(This,result) ) 

#define IDOMDocument_setTextContent(This,text)	\
    ( (This)->lpVtbl -> setTextContent(This,text) ) 


#define IDOMDocument_doctype(This,result)	\
    ( (This)->lpVtbl -> doctype(This,result) ) 

#define IDOMDocument_implementation(This,result)	\
    ( (This)->lpVtbl -> implementation(This,result) ) 

#define IDOMDocument_documentElement(This,result)	\
    ( (This)->lpVtbl -> documentElement(This,result) ) 

#define IDOMDocument_createElement(This,tagName,result)	\
    ( (This)->lpVtbl -> createElement(This,tagName,result) ) 

#define IDOMDocument_createDocumentFragment(This,result)	\
    ( (This)->lpVtbl -> createDocumentFragment(This,result) ) 

#define IDOMDocument_createTextNode(This,data,result)	\
    ( (This)->lpVtbl -> createTextNode(This,data,result) ) 

#define IDOMDocument_createComment(This,data,result)	\
    ( (This)->lpVtbl -> createComment(This,data,result) ) 

#define IDOMDocument_createCDATASection(This,data,result)	\
    ( (This)->lpVtbl -> createCDATASection(This,data,result) ) 

#define IDOMDocument_createProcessingInstruction(This,target,data,result)	\
    ( (This)->lpVtbl -> createProcessingInstruction(This,target,data,result) ) 

#define IDOMDocument_createAttribute(This,name,result)	\
    ( (This)->lpVtbl -> createAttribute(This,name,result) ) 

#define IDOMDocument_createEntityReference(This,name,result)	\
    ( (This)->lpVtbl -> createEntityReference(This,name,result) ) 

#define IDOMDocument_getElementsByTagName(This,tagName,result)	\
    ( (This)->lpVtbl -> getElementsByTagName(This,tagName,result) ) 

#define IDOMDocument_importNode(This,importedNode,deep,result)	\
    ( (This)->lpVtbl -> importNode(This,importedNode,deep,result) ) 

#define IDOMDocument_createElementNS(This,namespaceURI,qualifiedName,result)	\
    ( (This)->lpVtbl -> createElementNS(This,namespaceURI,qualifiedName,result) ) 

#define IDOMDocument_createAttributeNS(This,namespaceURI,qualifiedName,result)	\
    ( (This)->lpVtbl -> createAttributeNS(This,namespaceURI,qualifiedName,result) ) 

#define IDOMDocument_getElementsByTagNameNS(This,namespaceURI,localName,result)	\
    ( (This)->lpVtbl -> getElementsByTagNameNS(This,namespaceURI,localName,result) ) 

#define IDOMDocument_getElementById(This,elementId,result)	\
    ( (This)->lpVtbl -> getElementById(This,elementId,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMDocument_INTERFACE_DEFINED__ */


#ifndef __IDOMCharacterData_INTERFACE_DEFINED__
#define __IDOMCharacterData_INTERFACE_DEFINED__

/* interface IDOMCharacterData */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMCharacterData;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F4DED047-FE61-461a-BDBD-BB87F79DB713")
    IDOMCharacterData : public IDOMNode
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE data( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setData( 
            /* [in] */ BSTR data) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE length( 
            /* [retval][out] */ UINT *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE substringData( 
            /* [in] */ UINT offset,
            /* [in] */ UINT count,
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE appendData( 
            /* [in] */ BSTR arg) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE insertData( 
            /* [in] */ UINT offset,
            /* [in] */ BSTR arg) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE deleteData( 
            /* [in] */ UINT offset,
            /* [in] */ UINT count) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE replaceData( 
            /* [in] */ UINT offset,
            /* [in] */ UINT count,
            /* [in] */ BSTR arg) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMCharacterDataVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMCharacterData * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMCharacterData * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMCharacterData * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMCharacterData * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMCharacterData * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMCharacterData * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMCharacterData * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMCharacterData * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMCharacterData * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMCharacterData * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMCharacterData * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *nodeName )( 
            IDOMCharacterData * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *nodeValue )( 
            IDOMCharacterData * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setNodeValue )( 
            IDOMCharacterData * This,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *nodeType )( 
            IDOMCharacterData * This,
            /* [retval][out] */ unsigned short *result);
        
        HRESULT ( STDMETHODCALLTYPE *parentNode )( 
            IDOMCharacterData * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *childNodes )( 
            IDOMCharacterData * This,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *firstChild )( 
            IDOMCharacterData * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *lastChild )( 
            IDOMCharacterData * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *previousSibling )( 
            IDOMCharacterData * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *nextSibling )( 
            IDOMCharacterData * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *attributes )( 
            IDOMCharacterData * This,
            /* [retval][out] */ IDOMNamedNodeMap **result);
        
        HRESULT ( STDMETHODCALLTYPE *ownerDocument )( 
            IDOMCharacterData * This,
            /* [retval][out] */ IDOMDocument **result);
        
        HRESULT ( STDMETHODCALLTYPE *insertBefore )( 
            IDOMCharacterData * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *refChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *replaceChild )( 
            IDOMCharacterData * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *removeChild )( 
            IDOMCharacterData * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IDOMCharacterData * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IDOMCharacterData * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IDOMCharacterData * This,
            /* [in] */ BOOL deep,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *normalize )( 
            IDOMCharacterData * This);
        
        HRESULT ( STDMETHODCALLTYPE *isSupported )( 
            IDOMCharacterData * This,
            /* [in] */ BSTR feature,
            /* [in] */ BSTR version,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *namespaceURI )( 
            IDOMCharacterData * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *prefix )( 
            IDOMCharacterData * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setPrefix )( 
            IDOMCharacterData * This,
            /* [in] */ BSTR prefix);
        
        HRESULT ( STDMETHODCALLTYPE *localName )( 
            IDOMCharacterData * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *hasAttributes )( 
            IDOMCharacterData * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isSameNode )( 
            IDOMCharacterData * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isEqualNode )( 
            IDOMCharacterData * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *textContent )( 
            IDOMCharacterData * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setTextContent )( 
            IDOMCharacterData * This,
            /* [in] */ BSTR text);
        
        HRESULT ( STDMETHODCALLTYPE *data )( 
            IDOMCharacterData * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setData )( 
            IDOMCharacterData * This,
            /* [in] */ BSTR data);
        
        HRESULT ( STDMETHODCALLTYPE *length )( 
            IDOMCharacterData * This,
            /* [retval][out] */ UINT *result);
        
        HRESULT ( STDMETHODCALLTYPE *substringData )( 
            IDOMCharacterData * This,
            /* [in] */ UINT offset,
            /* [in] */ UINT count,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *appendData )( 
            IDOMCharacterData * This,
            /* [in] */ BSTR arg);
        
        HRESULT ( STDMETHODCALLTYPE *insertData )( 
            IDOMCharacterData * This,
            /* [in] */ UINT offset,
            /* [in] */ BSTR arg);
        
        HRESULT ( STDMETHODCALLTYPE *deleteData )( 
            IDOMCharacterData * This,
            /* [in] */ UINT offset,
            /* [in] */ UINT count);
        
        HRESULT ( STDMETHODCALLTYPE *replaceData )( 
            IDOMCharacterData * This,
            /* [in] */ UINT offset,
            /* [in] */ UINT count,
            /* [in] */ BSTR arg);
        
        END_INTERFACE
    } IDOMCharacterDataVtbl;

    interface IDOMCharacterData
    {
        CONST_VTBL struct IDOMCharacterDataVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMCharacterData_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMCharacterData_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMCharacterData_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMCharacterData_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMCharacterData_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMCharacterData_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMCharacterData_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMCharacterData_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMCharacterData_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMCharacterData_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMCharacterData_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMCharacterData_nodeName(This,result)	\
    ( (This)->lpVtbl -> nodeName(This,result) ) 

#define IDOMCharacterData_nodeValue(This,result)	\
    ( (This)->lpVtbl -> nodeValue(This,result) ) 

#define IDOMCharacterData_setNodeValue(This,value)	\
    ( (This)->lpVtbl -> setNodeValue(This,value) ) 

#define IDOMCharacterData_nodeType(This,result)	\
    ( (This)->lpVtbl -> nodeType(This,result) ) 

#define IDOMCharacterData_parentNode(This,result)	\
    ( (This)->lpVtbl -> parentNode(This,result) ) 

#define IDOMCharacterData_childNodes(This,result)	\
    ( (This)->lpVtbl -> childNodes(This,result) ) 

#define IDOMCharacterData_firstChild(This,result)	\
    ( (This)->lpVtbl -> firstChild(This,result) ) 

#define IDOMCharacterData_lastChild(This,result)	\
    ( (This)->lpVtbl -> lastChild(This,result) ) 

#define IDOMCharacterData_previousSibling(This,result)	\
    ( (This)->lpVtbl -> previousSibling(This,result) ) 

#define IDOMCharacterData_nextSibling(This,result)	\
    ( (This)->lpVtbl -> nextSibling(This,result) ) 

#define IDOMCharacterData_attributes(This,result)	\
    ( (This)->lpVtbl -> attributes(This,result) ) 

#define IDOMCharacterData_ownerDocument(This,result)	\
    ( (This)->lpVtbl -> ownerDocument(This,result) ) 

#define IDOMCharacterData_insertBefore(This,newChild,refChild,result)	\
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,result) ) 

#define IDOMCharacterData_replaceChild(This,newChild,oldChild,result)	\
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,result) ) 

#define IDOMCharacterData_removeChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> removeChild(This,oldChild,result) ) 

#define IDOMCharacterData_appendChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> appendChild(This,oldChild,result) ) 

#define IDOMCharacterData_hasChildNodes(This,result)	\
    ( (This)->lpVtbl -> hasChildNodes(This,result) ) 

#define IDOMCharacterData_cloneNode(This,deep,result)	\
    ( (This)->lpVtbl -> cloneNode(This,deep,result) ) 

#define IDOMCharacterData_normalize(This)	\
    ( (This)->lpVtbl -> normalize(This) ) 

#define IDOMCharacterData_isSupported(This,feature,version,result)	\
    ( (This)->lpVtbl -> isSupported(This,feature,version,result) ) 

#define IDOMCharacterData_namespaceURI(This,result)	\
    ( (This)->lpVtbl -> namespaceURI(This,result) ) 

#define IDOMCharacterData_prefix(This,result)	\
    ( (This)->lpVtbl -> prefix(This,result) ) 

#define IDOMCharacterData_setPrefix(This,prefix)	\
    ( (This)->lpVtbl -> setPrefix(This,prefix) ) 

#define IDOMCharacterData_localName(This,result)	\
    ( (This)->lpVtbl -> localName(This,result) ) 

#define IDOMCharacterData_hasAttributes(This,result)	\
    ( (This)->lpVtbl -> hasAttributes(This,result) ) 

#define IDOMCharacterData_isSameNode(This,other,result)	\
    ( (This)->lpVtbl -> isSameNode(This,other,result) ) 

#define IDOMCharacterData_isEqualNode(This,other,result)	\
    ( (This)->lpVtbl -> isEqualNode(This,other,result) ) 

#define IDOMCharacterData_textContent(This,result)	\
    ( (This)->lpVtbl -> textContent(This,result) ) 

#define IDOMCharacterData_setTextContent(This,text)	\
    ( (This)->lpVtbl -> setTextContent(This,text) ) 


#define IDOMCharacterData_data(This,result)	\
    ( (This)->lpVtbl -> data(This,result) ) 

#define IDOMCharacterData_setData(This,data)	\
    ( (This)->lpVtbl -> setData(This,data) ) 

#define IDOMCharacterData_length(This,result)	\
    ( (This)->lpVtbl -> length(This,result) ) 

#define IDOMCharacterData_substringData(This,offset,count,result)	\
    ( (This)->lpVtbl -> substringData(This,offset,count,result) ) 

#define IDOMCharacterData_appendData(This,arg)	\
    ( (This)->lpVtbl -> appendData(This,arg) ) 

#define IDOMCharacterData_insertData(This,offset,arg)	\
    ( (This)->lpVtbl -> insertData(This,offset,arg) ) 

#define IDOMCharacterData_deleteData(This,offset,count)	\
    ( (This)->lpVtbl -> deleteData(This,offset,count) ) 

#define IDOMCharacterData_replaceData(This,offset,count,arg)	\
    ( (This)->lpVtbl -> replaceData(This,offset,count,arg) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMCharacterData_INTERFACE_DEFINED__ */


#ifndef __IDOMAttr_INTERFACE_DEFINED__
#define __IDOMAttr_INTERFACE_DEFINED__

/* interface IDOMAttr */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMAttr;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B587E098-8206-4b5a-A7DB-422F218571A0")
    IDOMAttr : public IDOMNode
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE name( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE specified( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE value( 
            /* [retval][out] */ BSTR *value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setValue( 
            /* [in] */ BSTR value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ownerElement( 
            /* [retval][out] */ IDOMElement **result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMAttrVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMAttr * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMAttr * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMAttr * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMAttr * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMAttr * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMAttr * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMAttr * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMAttr * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMAttr * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMAttr * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMAttr * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *nodeName )( 
            IDOMAttr * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *nodeValue )( 
            IDOMAttr * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setNodeValue )( 
            IDOMAttr * This,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *nodeType )( 
            IDOMAttr * This,
            /* [retval][out] */ unsigned short *result);
        
        HRESULT ( STDMETHODCALLTYPE *parentNode )( 
            IDOMAttr * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *childNodes )( 
            IDOMAttr * This,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *firstChild )( 
            IDOMAttr * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *lastChild )( 
            IDOMAttr * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *previousSibling )( 
            IDOMAttr * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *nextSibling )( 
            IDOMAttr * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *attributes )( 
            IDOMAttr * This,
            /* [retval][out] */ IDOMNamedNodeMap **result);
        
        HRESULT ( STDMETHODCALLTYPE *ownerDocument )( 
            IDOMAttr * This,
            /* [retval][out] */ IDOMDocument **result);
        
        HRESULT ( STDMETHODCALLTYPE *insertBefore )( 
            IDOMAttr * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *refChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *replaceChild )( 
            IDOMAttr * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *removeChild )( 
            IDOMAttr * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IDOMAttr * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IDOMAttr * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IDOMAttr * This,
            /* [in] */ BOOL deep,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *normalize )( 
            IDOMAttr * This);
        
        HRESULT ( STDMETHODCALLTYPE *isSupported )( 
            IDOMAttr * This,
            /* [in] */ BSTR feature,
            /* [in] */ BSTR version,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *namespaceURI )( 
            IDOMAttr * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *prefix )( 
            IDOMAttr * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setPrefix )( 
            IDOMAttr * This,
            /* [in] */ BSTR prefix);
        
        HRESULT ( STDMETHODCALLTYPE *localName )( 
            IDOMAttr * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *hasAttributes )( 
            IDOMAttr * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isSameNode )( 
            IDOMAttr * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isEqualNode )( 
            IDOMAttr * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *textContent )( 
            IDOMAttr * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setTextContent )( 
            IDOMAttr * This,
            /* [in] */ BSTR text);
        
        HRESULT ( STDMETHODCALLTYPE *name )( 
            IDOMAttr * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *specified )( 
            IDOMAttr * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *value )( 
            IDOMAttr * This,
            /* [retval][out] */ BSTR *value);
        
        HRESULT ( STDMETHODCALLTYPE *setValue )( 
            IDOMAttr * This,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *ownerElement )( 
            IDOMAttr * This,
            /* [retval][out] */ IDOMElement **result);
        
        END_INTERFACE
    } IDOMAttrVtbl;

    interface IDOMAttr
    {
        CONST_VTBL struct IDOMAttrVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMAttr_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMAttr_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMAttr_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMAttr_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMAttr_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMAttr_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMAttr_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMAttr_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMAttr_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMAttr_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMAttr_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMAttr_nodeName(This,result)	\
    ( (This)->lpVtbl -> nodeName(This,result) ) 

#define IDOMAttr_nodeValue(This,result)	\
    ( (This)->lpVtbl -> nodeValue(This,result) ) 

#define IDOMAttr_setNodeValue(This,value)	\
    ( (This)->lpVtbl -> setNodeValue(This,value) ) 

#define IDOMAttr_nodeType(This,result)	\
    ( (This)->lpVtbl -> nodeType(This,result) ) 

#define IDOMAttr_parentNode(This,result)	\
    ( (This)->lpVtbl -> parentNode(This,result) ) 

#define IDOMAttr_childNodes(This,result)	\
    ( (This)->lpVtbl -> childNodes(This,result) ) 

#define IDOMAttr_firstChild(This,result)	\
    ( (This)->lpVtbl -> firstChild(This,result) ) 

#define IDOMAttr_lastChild(This,result)	\
    ( (This)->lpVtbl -> lastChild(This,result) ) 

#define IDOMAttr_previousSibling(This,result)	\
    ( (This)->lpVtbl -> previousSibling(This,result) ) 

#define IDOMAttr_nextSibling(This,result)	\
    ( (This)->lpVtbl -> nextSibling(This,result) ) 

#define IDOMAttr_attributes(This,result)	\
    ( (This)->lpVtbl -> attributes(This,result) ) 

#define IDOMAttr_ownerDocument(This,result)	\
    ( (This)->lpVtbl -> ownerDocument(This,result) ) 

#define IDOMAttr_insertBefore(This,newChild,refChild,result)	\
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,result) ) 

#define IDOMAttr_replaceChild(This,newChild,oldChild,result)	\
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,result) ) 

#define IDOMAttr_removeChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> removeChild(This,oldChild,result) ) 

#define IDOMAttr_appendChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> appendChild(This,oldChild,result) ) 

#define IDOMAttr_hasChildNodes(This,result)	\
    ( (This)->lpVtbl -> hasChildNodes(This,result) ) 

#define IDOMAttr_cloneNode(This,deep,result)	\
    ( (This)->lpVtbl -> cloneNode(This,deep,result) ) 

#define IDOMAttr_normalize(This)	\
    ( (This)->lpVtbl -> normalize(This) ) 

#define IDOMAttr_isSupported(This,feature,version,result)	\
    ( (This)->lpVtbl -> isSupported(This,feature,version,result) ) 

#define IDOMAttr_namespaceURI(This,result)	\
    ( (This)->lpVtbl -> namespaceURI(This,result) ) 

#define IDOMAttr_prefix(This,result)	\
    ( (This)->lpVtbl -> prefix(This,result) ) 

#define IDOMAttr_setPrefix(This,prefix)	\
    ( (This)->lpVtbl -> setPrefix(This,prefix) ) 

#define IDOMAttr_localName(This,result)	\
    ( (This)->lpVtbl -> localName(This,result) ) 

#define IDOMAttr_hasAttributes(This,result)	\
    ( (This)->lpVtbl -> hasAttributes(This,result) ) 

#define IDOMAttr_isSameNode(This,other,result)	\
    ( (This)->lpVtbl -> isSameNode(This,other,result) ) 

#define IDOMAttr_isEqualNode(This,other,result)	\
    ( (This)->lpVtbl -> isEqualNode(This,other,result) ) 

#define IDOMAttr_textContent(This,result)	\
    ( (This)->lpVtbl -> textContent(This,result) ) 

#define IDOMAttr_setTextContent(This,text)	\
    ( (This)->lpVtbl -> setTextContent(This,text) ) 


#define IDOMAttr_name(This,result)	\
    ( (This)->lpVtbl -> name(This,result) ) 

#define IDOMAttr_specified(This,result)	\
    ( (This)->lpVtbl -> specified(This,result) ) 

#define IDOMAttr_value(This,value)	\
    ( (This)->lpVtbl -> value(This,value) ) 

#define IDOMAttr_setValue(This,value)	\
    ( (This)->lpVtbl -> setValue(This,value) ) 

#define IDOMAttr_ownerElement(This,result)	\
    ( (This)->lpVtbl -> ownerElement(This,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMAttr_INTERFACE_DEFINED__ */


#ifndef __IDOMElement_INTERFACE_DEFINED__
#define __IDOMElement_INTERFACE_DEFINED__

/* interface IDOMElement */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("E053A35B-7775-4859-80EA-C35D02D145A2")
    IDOMElement : public IDOMNode
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE tagName( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getAttribute( 
            /* [in] */ BSTR name,
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setAttribute( 
            /* [in] */ BSTR name,
            /* [in] */ BSTR value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE removeAttribute( 
            /* [in] */ BSTR name) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getAttributeNode( 
            /* [in] */ BSTR name,
            /* [retval][out] */ IDOMAttr **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setAttributeNode( 
            /* [in] */ IDOMAttr *newAttr,
            /* [retval][out] */ IDOMAttr **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE removeAttributeNode( 
            /* [in] */ IDOMAttr *oldAttr,
            /* [retval][out] */ IDOMAttr **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getElementsByTagName( 
            /* [in] */ BSTR name,
            /* [retval][out] */ IDOMNodeList **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getAttributeNS( 
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setAttributeNS( 
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR qualifiedName,
            /* [in] */ BSTR value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE removeAttributeNS( 
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getAttributeNodeNS( 
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ IDOMAttr **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setAttributeNodeNS( 
            /* [in] */ IDOMAttr *newAttr,
            /* [retval][out] */ IDOMAttr **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getElementsByTagNameNS( 
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ IDOMNodeList **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE hasAttribute( 
            /* [in] */ BSTR name,
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE hasAttributeNS( 
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE focus( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE blur( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMElement * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMElement * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMElement * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMElement * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMElement * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMElement * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMElement * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMElement * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *nodeName )( 
            IDOMElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *nodeValue )( 
            IDOMElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setNodeValue )( 
            IDOMElement * This,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *nodeType )( 
            IDOMElement * This,
            /* [retval][out] */ unsigned short *result);
        
        HRESULT ( STDMETHODCALLTYPE *parentNode )( 
            IDOMElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *childNodes )( 
            IDOMElement * This,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *firstChild )( 
            IDOMElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *lastChild )( 
            IDOMElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *previousSibling )( 
            IDOMElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *nextSibling )( 
            IDOMElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *attributes )( 
            IDOMElement * This,
            /* [retval][out] */ IDOMNamedNodeMap **result);
        
        HRESULT ( STDMETHODCALLTYPE *ownerDocument )( 
            IDOMElement * This,
            /* [retval][out] */ IDOMDocument **result);
        
        HRESULT ( STDMETHODCALLTYPE *insertBefore )( 
            IDOMElement * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *refChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *replaceChild )( 
            IDOMElement * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *removeChild )( 
            IDOMElement * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IDOMElement * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IDOMElement * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IDOMElement * This,
            /* [in] */ BOOL deep,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *normalize )( 
            IDOMElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *isSupported )( 
            IDOMElement * This,
            /* [in] */ BSTR feature,
            /* [in] */ BSTR version,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *namespaceURI )( 
            IDOMElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *prefix )( 
            IDOMElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setPrefix )( 
            IDOMElement * This,
            /* [in] */ BSTR prefix);
        
        HRESULT ( STDMETHODCALLTYPE *localName )( 
            IDOMElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *hasAttributes )( 
            IDOMElement * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isSameNode )( 
            IDOMElement * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isEqualNode )( 
            IDOMElement * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *textContent )( 
            IDOMElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setTextContent )( 
            IDOMElement * This,
            /* [in] */ BSTR text);
        
        HRESULT ( STDMETHODCALLTYPE *tagName )( 
            IDOMElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *getAttribute )( 
            IDOMElement * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setAttribute )( 
            IDOMElement * This,
            /* [in] */ BSTR name,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *removeAttribute )( 
            IDOMElement * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *getAttributeNode )( 
            IDOMElement * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *setAttributeNode )( 
            IDOMElement * This,
            /* [in] */ IDOMAttr *newAttr,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *removeAttributeNode )( 
            IDOMElement * This,
            /* [in] */ IDOMAttr *oldAttr,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *getElementsByTagName )( 
            IDOMElement * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *getAttributeNS )( 
            IDOMElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setAttributeNS )( 
            IDOMElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR qualifiedName,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *removeAttributeNS )( 
            IDOMElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName);
        
        HRESULT ( STDMETHODCALLTYPE *getAttributeNodeNS )( 
            IDOMElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *setAttributeNodeNS )( 
            IDOMElement * This,
            /* [in] */ IDOMAttr *newAttr,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *getElementsByTagNameNS )( 
            IDOMElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *hasAttribute )( 
            IDOMElement * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *hasAttributeNS )( 
            IDOMElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *focus )( 
            IDOMElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *blur )( 
            IDOMElement * This);
        
        END_INTERFACE
    } IDOMElementVtbl;

    interface IDOMElement
    {
        CONST_VTBL struct IDOMElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMElement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMElement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMElement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMElement_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMElement_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMElement_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMElement_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMElement_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMElement_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMElement_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMElement_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMElement_nodeName(This,result)	\
    ( (This)->lpVtbl -> nodeName(This,result) ) 

#define IDOMElement_nodeValue(This,result)	\
    ( (This)->lpVtbl -> nodeValue(This,result) ) 

#define IDOMElement_setNodeValue(This,value)	\
    ( (This)->lpVtbl -> setNodeValue(This,value) ) 

#define IDOMElement_nodeType(This,result)	\
    ( (This)->lpVtbl -> nodeType(This,result) ) 

#define IDOMElement_parentNode(This,result)	\
    ( (This)->lpVtbl -> parentNode(This,result) ) 

#define IDOMElement_childNodes(This,result)	\
    ( (This)->lpVtbl -> childNodes(This,result) ) 

#define IDOMElement_firstChild(This,result)	\
    ( (This)->lpVtbl -> firstChild(This,result) ) 

#define IDOMElement_lastChild(This,result)	\
    ( (This)->lpVtbl -> lastChild(This,result) ) 

#define IDOMElement_previousSibling(This,result)	\
    ( (This)->lpVtbl -> previousSibling(This,result) ) 

#define IDOMElement_nextSibling(This,result)	\
    ( (This)->lpVtbl -> nextSibling(This,result) ) 

#define IDOMElement_attributes(This,result)	\
    ( (This)->lpVtbl -> attributes(This,result) ) 

#define IDOMElement_ownerDocument(This,result)	\
    ( (This)->lpVtbl -> ownerDocument(This,result) ) 

#define IDOMElement_insertBefore(This,newChild,refChild,result)	\
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,result) ) 

#define IDOMElement_replaceChild(This,newChild,oldChild,result)	\
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,result) ) 

#define IDOMElement_removeChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> removeChild(This,oldChild,result) ) 

#define IDOMElement_appendChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> appendChild(This,oldChild,result) ) 

#define IDOMElement_hasChildNodes(This,result)	\
    ( (This)->lpVtbl -> hasChildNodes(This,result) ) 

#define IDOMElement_cloneNode(This,deep,result)	\
    ( (This)->lpVtbl -> cloneNode(This,deep,result) ) 

#define IDOMElement_normalize(This)	\
    ( (This)->lpVtbl -> normalize(This) ) 

#define IDOMElement_isSupported(This,feature,version,result)	\
    ( (This)->lpVtbl -> isSupported(This,feature,version,result) ) 

#define IDOMElement_namespaceURI(This,result)	\
    ( (This)->lpVtbl -> namespaceURI(This,result) ) 

#define IDOMElement_prefix(This,result)	\
    ( (This)->lpVtbl -> prefix(This,result) ) 

#define IDOMElement_setPrefix(This,prefix)	\
    ( (This)->lpVtbl -> setPrefix(This,prefix) ) 

#define IDOMElement_localName(This,result)	\
    ( (This)->lpVtbl -> localName(This,result) ) 

#define IDOMElement_hasAttributes(This,result)	\
    ( (This)->lpVtbl -> hasAttributes(This,result) ) 

#define IDOMElement_isSameNode(This,other,result)	\
    ( (This)->lpVtbl -> isSameNode(This,other,result) ) 

#define IDOMElement_isEqualNode(This,other,result)	\
    ( (This)->lpVtbl -> isEqualNode(This,other,result) ) 

#define IDOMElement_textContent(This,result)	\
    ( (This)->lpVtbl -> textContent(This,result) ) 

#define IDOMElement_setTextContent(This,text)	\
    ( (This)->lpVtbl -> setTextContent(This,text) ) 


#define IDOMElement_tagName(This,result)	\
    ( (This)->lpVtbl -> tagName(This,result) ) 

#define IDOMElement_getAttribute(This,name,result)	\
    ( (This)->lpVtbl -> getAttribute(This,name,result) ) 

#define IDOMElement_setAttribute(This,name,value)	\
    ( (This)->lpVtbl -> setAttribute(This,name,value) ) 

#define IDOMElement_removeAttribute(This,name)	\
    ( (This)->lpVtbl -> removeAttribute(This,name) ) 

#define IDOMElement_getAttributeNode(This,name,result)	\
    ( (This)->lpVtbl -> getAttributeNode(This,name,result) ) 

#define IDOMElement_setAttributeNode(This,newAttr,result)	\
    ( (This)->lpVtbl -> setAttributeNode(This,newAttr,result) ) 

#define IDOMElement_removeAttributeNode(This,oldAttr,result)	\
    ( (This)->lpVtbl -> removeAttributeNode(This,oldAttr,result) ) 

#define IDOMElement_getElementsByTagName(This,name,result)	\
    ( (This)->lpVtbl -> getElementsByTagName(This,name,result) ) 

#define IDOMElement_getAttributeNS(This,namespaceURI,localName,result)	\
    ( (This)->lpVtbl -> getAttributeNS(This,namespaceURI,localName,result) ) 

#define IDOMElement_setAttributeNS(This,namespaceURI,qualifiedName,value)	\
    ( (This)->lpVtbl -> setAttributeNS(This,namespaceURI,qualifiedName,value) ) 

#define IDOMElement_removeAttributeNS(This,namespaceURI,localName)	\
    ( (This)->lpVtbl -> removeAttributeNS(This,namespaceURI,localName) ) 

#define IDOMElement_getAttributeNodeNS(This,namespaceURI,localName,result)	\
    ( (This)->lpVtbl -> getAttributeNodeNS(This,namespaceURI,localName,result) ) 

#define IDOMElement_setAttributeNodeNS(This,newAttr,result)	\
    ( (This)->lpVtbl -> setAttributeNodeNS(This,newAttr,result) ) 

#define IDOMElement_getElementsByTagNameNS(This,namespaceURI,localName,result)	\
    ( (This)->lpVtbl -> getElementsByTagNameNS(This,namespaceURI,localName,result) ) 

#define IDOMElement_hasAttribute(This,name,result)	\
    ( (This)->lpVtbl -> hasAttribute(This,name,result) ) 

#define IDOMElement_hasAttributeNS(This,namespaceURI,localName,result)	\
    ( (This)->lpVtbl -> hasAttributeNS(This,namespaceURI,localName,result) ) 

#define IDOMElement_focus(This)	\
    ( (This)->lpVtbl -> focus(This) ) 

#define IDOMElement_blur(This)	\
    ( (This)->lpVtbl -> blur(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMElement_INTERFACE_DEFINED__ */


#ifndef __IDOMElementExtensions_INTERFACE_DEFINED__
#define __IDOMElementExtensions_INTERFACE_DEFINED__

/* interface IDOMElementExtensions */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMElementExtensions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("98E481F5-4405-4c2a-BF77-1CE95FE5F992")
    IDOMElementExtensions : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE offsetLeft( 
            /* [retval][out] */ int *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE offsetTop( 
            /* [retval][out] */ int *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE offsetWidth( 
            /* [retval][out] */ int *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE offsetHeight( 
            /* [retval][out] */ int *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE offsetParent( 
            /* [retval][out] */ IDOMElement **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE clientWidth( 
            /* [retval][out] */ int *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE clientHeight( 
            /* [retval][out] */ int *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE scrollLeft( 
            /* [retval][out] */ int *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setScrollLeft( 
            /* [in] */ int newScrollLeft) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE scrollTop( 
            /* [retval][out] */ int *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setScrollTop( 
            /* [in] */ int newScrollTop) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE scrollWidth( 
            /* [retval][out] */ int *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE scrollHeight( 
            /* [retval][out] */ int *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE scrollIntoView( 
            /* [in] */ BOOL alignWithTop) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE scrollIntoViewIfNeeded( 
            /* [in] */ BOOL centerIfNeeded) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMElementExtensionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMElementExtensions * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMElementExtensions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMElementExtensions * This);
        
        HRESULT ( STDMETHODCALLTYPE *offsetLeft )( 
            IDOMElementExtensions * This,
            /* [retval][out] */ int *result);
        
        HRESULT ( STDMETHODCALLTYPE *offsetTop )( 
            IDOMElementExtensions * This,
            /* [retval][out] */ int *result);
        
        HRESULT ( STDMETHODCALLTYPE *offsetWidth )( 
            IDOMElementExtensions * This,
            /* [retval][out] */ int *result);
        
        HRESULT ( STDMETHODCALLTYPE *offsetHeight )( 
            IDOMElementExtensions * This,
            /* [retval][out] */ int *result);
        
        HRESULT ( STDMETHODCALLTYPE *offsetParent )( 
            IDOMElementExtensions * This,
            /* [retval][out] */ IDOMElement **result);
        
        HRESULT ( STDMETHODCALLTYPE *clientWidth )( 
            IDOMElementExtensions * This,
            /* [retval][out] */ int *result);
        
        HRESULT ( STDMETHODCALLTYPE *clientHeight )( 
            IDOMElementExtensions * This,
            /* [retval][out] */ int *result);
        
        HRESULT ( STDMETHODCALLTYPE *scrollLeft )( 
            IDOMElementExtensions * This,
            /* [retval][out] */ int *result);
        
        HRESULT ( STDMETHODCALLTYPE *setScrollLeft )( 
            IDOMElementExtensions * This,
            /* [in] */ int newScrollLeft);
        
        HRESULT ( STDMETHODCALLTYPE *scrollTop )( 
            IDOMElementExtensions * This,
            /* [retval][out] */ int *result);
        
        HRESULT ( STDMETHODCALLTYPE *setScrollTop )( 
            IDOMElementExtensions * This,
            /* [in] */ int newScrollTop);
        
        HRESULT ( STDMETHODCALLTYPE *scrollWidth )( 
            IDOMElementExtensions * This,
            /* [retval][out] */ int *result);
        
        HRESULT ( STDMETHODCALLTYPE *scrollHeight )( 
            IDOMElementExtensions * This,
            /* [retval][out] */ int *result);
        
        HRESULT ( STDMETHODCALLTYPE *scrollIntoView )( 
            IDOMElementExtensions * This,
            /* [in] */ BOOL alignWithTop);
        
        HRESULT ( STDMETHODCALLTYPE *scrollIntoViewIfNeeded )( 
            IDOMElementExtensions * This,
            /* [in] */ BOOL centerIfNeeded);
        
        END_INTERFACE
    } IDOMElementExtensionsVtbl;

    interface IDOMElementExtensions
    {
        CONST_VTBL struct IDOMElementExtensionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMElementExtensions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMElementExtensions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMElementExtensions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMElementExtensions_offsetLeft(This,result)	\
    ( (This)->lpVtbl -> offsetLeft(This,result) ) 

#define IDOMElementExtensions_offsetTop(This,result)	\
    ( (This)->lpVtbl -> offsetTop(This,result) ) 

#define IDOMElementExtensions_offsetWidth(This,result)	\
    ( (This)->lpVtbl -> offsetWidth(This,result) ) 

#define IDOMElementExtensions_offsetHeight(This,result)	\
    ( (This)->lpVtbl -> offsetHeight(This,result) ) 

#define IDOMElementExtensions_offsetParent(This,result)	\
    ( (This)->lpVtbl -> offsetParent(This,result) ) 

#define IDOMElementExtensions_clientWidth(This,result)	\
    ( (This)->lpVtbl -> clientWidth(This,result) ) 

#define IDOMElementExtensions_clientHeight(This,result)	\
    ( (This)->lpVtbl -> clientHeight(This,result) ) 

#define IDOMElementExtensions_scrollLeft(This,result)	\
    ( (This)->lpVtbl -> scrollLeft(This,result) ) 

#define IDOMElementExtensions_setScrollLeft(This,newScrollLeft)	\
    ( (This)->lpVtbl -> setScrollLeft(This,newScrollLeft) ) 

#define IDOMElementExtensions_scrollTop(This,result)	\
    ( (This)->lpVtbl -> scrollTop(This,result) ) 

#define IDOMElementExtensions_setScrollTop(This,newScrollTop)	\
    ( (This)->lpVtbl -> setScrollTop(This,newScrollTop) ) 

#define IDOMElementExtensions_scrollWidth(This,result)	\
    ( (This)->lpVtbl -> scrollWidth(This,result) ) 

#define IDOMElementExtensions_scrollHeight(This,result)	\
    ( (This)->lpVtbl -> scrollHeight(This,result) ) 

#define IDOMElementExtensions_scrollIntoView(This,alignWithTop)	\
    ( (This)->lpVtbl -> scrollIntoView(This,alignWithTop) ) 

#define IDOMElementExtensions_scrollIntoViewIfNeeded(This,centerIfNeeded)	\
    ( (This)->lpVtbl -> scrollIntoViewIfNeeded(This,centerIfNeeded) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMElementExtensions_INTERFACE_DEFINED__ */


#ifndef __IDOMText_INTERFACE_DEFINED__
#define __IDOMText_INTERFACE_DEFINED__

/* interface IDOMText */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMText;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("74638F45-1AA0-4db5-958C-82066E00BD2B")
    IDOMText : public IDOMCharacterData
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE splitText( 
            /* [in] */ UINT offset,
            /* [retval][out] */ IDOMText **result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMTextVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMText * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMText * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMText * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMText * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMText * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMText * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMText * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMText * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMText * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMText * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMText * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *nodeName )( 
            IDOMText * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *nodeValue )( 
            IDOMText * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setNodeValue )( 
            IDOMText * This,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *nodeType )( 
            IDOMText * This,
            /* [retval][out] */ unsigned short *result);
        
        HRESULT ( STDMETHODCALLTYPE *parentNode )( 
            IDOMText * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *childNodes )( 
            IDOMText * This,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *firstChild )( 
            IDOMText * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *lastChild )( 
            IDOMText * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *previousSibling )( 
            IDOMText * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *nextSibling )( 
            IDOMText * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *attributes )( 
            IDOMText * This,
            /* [retval][out] */ IDOMNamedNodeMap **result);
        
        HRESULT ( STDMETHODCALLTYPE *ownerDocument )( 
            IDOMText * This,
            /* [retval][out] */ IDOMDocument **result);
        
        HRESULT ( STDMETHODCALLTYPE *insertBefore )( 
            IDOMText * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *refChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *replaceChild )( 
            IDOMText * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *removeChild )( 
            IDOMText * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IDOMText * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IDOMText * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IDOMText * This,
            /* [in] */ BOOL deep,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *normalize )( 
            IDOMText * This);
        
        HRESULT ( STDMETHODCALLTYPE *isSupported )( 
            IDOMText * This,
            /* [in] */ BSTR feature,
            /* [in] */ BSTR version,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *namespaceURI )( 
            IDOMText * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *prefix )( 
            IDOMText * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setPrefix )( 
            IDOMText * This,
            /* [in] */ BSTR prefix);
        
        HRESULT ( STDMETHODCALLTYPE *localName )( 
            IDOMText * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *hasAttributes )( 
            IDOMText * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isSameNode )( 
            IDOMText * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isEqualNode )( 
            IDOMText * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *textContent )( 
            IDOMText * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setTextContent )( 
            IDOMText * This,
            /* [in] */ BSTR text);
        
        HRESULT ( STDMETHODCALLTYPE *data )( 
            IDOMText * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setData )( 
            IDOMText * This,
            /* [in] */ BSTR data);
        
        HRESULT ( STDMETHODCALLTYPE *length )( 
            IDOMText * This,
            /* [retval][out] */ UINT *result);
        
        HRESULT ( STDMETHODCALLTYPE *substringData )( 
            IDOMText * This,
            /* [in] */ UINT offset,
            /* [in] */ UINT count,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *appendData )( 
            IDOMText * This,
            /* [in] */ BSTR arg);
        
        HRESULT ( STDMETHODCALLTYPE *insertData )( 
            IDOMText * This,
            /* [in] */ UINT offset,
            /* [in] */ BSTR arg);
        
        HRESULT ( STDMETHODCALLTYPE *deleteData )( 
            IDOMText * This,
            /* [in] */ UINT offset,
            /* [in] */ UINT count);
        
        HRESULT ( STDMETHODCALLTYPE *replaceData )( 
            IDOMText * This,
            /* [in] */ UINT offset,
            /* [in] */ UINT count,
            /* [in] */ BSTR arg);
        
        HRESULT ( STDMETHODCALLTYPE *splitText )( 
            IDOMText * This,
            /* [in] */ UINT offset,
            /* [retval][out] */ IDOMText **result);
        
        END_INTERFACE
    } IDOMTextVtbl;

    interface IDOMText
    {
        CONST_VTBL struct IDOMTextVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMText_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMText_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMText_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMText_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMText_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMText_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMText_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMText_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMText_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMText_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMText_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMText_nodeName(This,result)	\
    ( (This)->lpVtbl -> nodeName(This,result) ) 

#define IDOMText_nodeValue(This,result)	\
    ( (This)->lpVtbl -> nodeValue(This,result) ) 

#define IDOMText_setNodeValue(This,value)	\
    ( (This)->lpVtbl -> setNodeValue(This,value) ) 

#define IDOMText_nodeType(This,result)	\
    ( (This)->lpVtbl -> nodeType(This,result) ) 

#define IDOMText_parentNode(This,result)	\
    ( (This)->lpVtbl -> parentNode(This,result) ) 

#define IDOMText_childNodes(This,result)	\
    ( (This)->lpVtbl -> childNodes(This,result) ) 

#define IDOMText_firstChild(This,result)	\
    ( (This)->lpVtbl -> firstChild(This,result) ) 

#define IDOMText_lastChild(This,result)	\
    ( (This)->lpVtbl -> lastChild(This,result) ) 

#define IDOMText_previousSibling(This,result)	\
    ( (This)->lpVtbl -> previousSibling(This,result) ) 

#define IDOMText_nextSibling(This,result)	\
    ( (This)->lpVtbl -> nextSibling(This,result) ) 

#define IDOMText_attributes(This,result)	\
    ( (This)->lpVtbl -> attributes(This,result) ) 

#define IDOMText_ownerDocument(This,result)	\
    ( (This)->lpVtbl -> ownerDocument(This,result) ) 

#define IDOMText_insertBefore(This,newChild,refChild,result)	\
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,result) ) 

#define IDOMText_replaceChild(This,newChild,oldChild,result)	\
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,result) ) 

#define IDOMText_removeChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> removeChild(This,oldChild,result) ) 

#define IDOMText_appendChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> appendChild(This,oldChild,result) ) 

#define IDOMText_hasChildNodes(This,result)	\
    ( (This)->lpVtbl -> hasChildNodes(This,result) ) 

#define IDOMText_cloneNode(This,deep,result)	\
    ( (This)->lpVtbl -> cloneNode(This,deep,result) ) 

#define IDOMText_normalize(This)	\
    ( (This)->lpVtbl -> normalize(This) ) 

#define IDOMText_isSupported(This,feature,version,result)	\
    ( (This)->lpVtbl -> isSupported(This,feature,version,result) ) 

#define IDOMText_namespaceURI(This,result)	\
    ( (This)->lpVtbl -> namespaceURI(This,result) ) 

#define IDOMText_prefix(This,result)	\
    ( (This)->lpVtbl -> prefix(This,result) ) 

#define IDOMText_setPrefix(This,prefix)	\
    ( (This)->lpVtbl -> setPrefix(This,prefix) ) 

#define IDOMText_localName(This,result)	\
    ( (This)->lpVtbl -> localName(This,result) ) 

#define IDOMText_hasAttributes(This,result)	\
    ( (This)->lpVtbl -> hasAttributes(This,result) ) 

#define IDOMText_isSameNode(This,other,result)	\
    ( (This)->lpVtbl -> isSameNode(This,other,result) ) 

#define IDOMText_isEqualNode(This,other,result)	\
    ( (This)->lpVtbl -> isEqualNode(This,other,result) ) 

#define IDOMText_textContent(This,result)	\
    ( (This)->lpVtbl -> textContent(This,result) ) 

#define IDOMText_setTextContent(This,text)	\
    ( (This)->lpVtbl -> setTextContent(This,text) ) 


#define IDOMText_data(This,result)	\
    ( (This)->lpVtbl -> data(This,result) ) 

#define IDOMText_setData(This,data)	\
    ( (This)->lpVtbl -> setData(This,data) ) 

#define IDOMText_length(This,result)	\
    ( (This)->lpVtbl -> length(This,result) ) 

#define IDOMText_substringData(This,offset,count,result)	\
    ( (This)->lpVtbl -> substringData(This,offset,count,result) ) 

#define IDOMText_appendData(This,arg)	\
    ( (This)->lpVtbl -> appendData(This,arg) ) 

#define IDOMText_insertData(This,offset,arg)	\
    ( (This)->lpVtbl -> insertData(This,offset,arg) ) 

#define IDOMText_deleteData(This,offset,count)	\
    ( (This)->lpVtbl -> deleteData(This,offset,count) ) 

#define IDOMText_replaceData(This,offset,count,arg)	\
    ( (This)->lpVtbl -> replaceData(This,offset,count,arg) ) 


#define IDOMText_splitText(This,offset,result)	\
    ( (This)->lpVtbl -> splitText(This,offset,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMText_INTERFACE_DEFINED__ */


#ifndef __IDOMComment_INTERFACE_DEFINED__
#define __IDOMComment_INTERFACE_DEFINED__

/* interface IDOMComment */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMComment;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("118002E8-847F-4b1a-968C-B25A6AC7B128")
    IDOMComment : public IDOMCharacterData
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IDOMCommentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMComment * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMComment * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMComment * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMComment * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMComment * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMComment * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMComment * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMComment * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMComment * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMComment * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMComment * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *nodeName )( 
            IDOMComment * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *nodeValue )( 
            IDOMComment * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setNodeValue )( 
            IDOMComment * This,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *nodeType )( 
            IDOMComment * This,
            /* [retval][out] */ unsigned short *result);
        
        HRESULT ( STDMETHODCALLTYPE *parentNode )( 
            IDOMComment * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *childNodes )( 
            IDOMComment * This,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *firstChild )( 
            IDOMComment * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *lastChild )( 
            IDOMComment * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *previousSibling )( 
            IDOMComment * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *nextSibling )( 
            IDOMComment * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *attributes )( 
            IDOMComment * This,
            /* [retval][out] */ IDOMNamedNodeMap **result);
        
        HRESULT ( STDMETHODCALLTYPE *ownerDocument )( 
            IDOMComment * This,
            /* [retval][out] */ IDOMDocument **result);
        
        HRESULT ( STDMETHODCALLTYPE *insertBefore )( 
            IDOMComment * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *refChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *replaceChild )( 
            IDOMComment * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *removeChild )( 
            IDOMComment * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IDOMComment * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IDOMComment * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IDOMComment * This,
            /* [in] */ BOOL deep,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *normalize )( 
            IDOMComment * This);
        
        HRESULT ( STDMETHODCALLTYPE *isSupported )( 
            IDOMComment * This,
            /* [in] */ BSTR feature,
            /* [in] */ BSTR version,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *namespaceURI )( 
            IDOMComment * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *prefix )( 
            IDOMComment * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setPrefix )( 
            IDOMComment * This,
            /* [in] */ BSTR prefix);
        
        HRESULT ( STDMETHODCALLTYPE *localName )( 
            IDOMComment * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *hasAttributes )( 
            IDOMComment * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isSameNode )( 
            IDOMComment * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isEqualNode )( 
            IDOMComment * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *textContent )( 
            IDOMComment * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setTextContent )( 
            IDOMComment * This,
            /* [in] */ BSTR text);
        
        HRESULT ( STDMETHODCALLTYPE *data )( 
            IDOMComment * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setData )( 
            IDOMComment * This,
            /* [in] */ BSTR data);
        
        HRESULT ( STDMETHODCALLTYPE *length )( 
            IDOMComment * This,
            /* [retval][out] */ UINT *result);
        
        HRESULT ( STDMETHODCALLTYPE *substringData )( 
            IDOMComment * This,
            /* [in] */ UINT offset,
            /* [in] */ UINT count,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *appendData )( 
            IDOMComment * This,
            /* [in] */ BSTR arg);
        
        HRESULT ( STDMETHODCALLTYPE *insertData )( 
            IDOMComment * This,
            /* [in] */ UINT offset,
            /* [in] */ BSTR arg);
        
        HRESULT ( STDMETHODCALLTYPE *deleteData )( 
            IDOMComment * This,
            /* [in] */ UINT offset,
            /* [in] */ UINT count);
        
        HRESULT ( STDMETHODCALLTYPE *replaceData )( 
            IDOMComment * This,
            /* [in] */ UINT offset,
            /* [in] */ UINT count,
            /* [in] */ BSTR arg);
        
        END_INTERFACE
    } IDOMCommentVtbl;

    interface IDOMComment
    {
        CONST_VTBL struct IDOMCommentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMComment_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMComment_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMComment_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMComment_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMComment_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMComment_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMComment_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMComment_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMComment_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMComment_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMComment_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMComment_nodeName(This,result)	\
    ( (This)->lpVtbl -> nodeName(This,result) ) 

#define IDOMComment_nodeValue(This,result)	\
    ( (This)->lpVtbl -> nodeValue(This,result) ) 

#define IDOMComment_setNodeValue(This,value)	\
    ( (This)->lpVtbl -> setNodeValue(This,value) ) 

#define IDOMComment_nodeType(This,result)	\
    ( (This)->lpVtbl -> nodeType(This,result) ) 

#define IDOMComment_parentNode(This,result)	\
    ( (This)->lpVtbl -> parentNode(This,result) ) 

#define IDOMComment_childNodes(This,result)	\
    ( (This)->lpVtbl -> childNodes(This,result) ) 

#define IDOMComment_firstChild(This,result)	\
    ( (This)->lpVtbl -> firstChild(This,result) ) 

#define IDOMComment_lastChild(This,result)	\
    ( (This)->lpVtbl -> lastChild(This,result) ) 

#define IDOMComment_previousSibling(This,result)	\
    ( (This)->lpVtbl -> previousSibling(This,result) ) 

#define IDOMComment_nextSibling(This,result)	\
    ( (This)->lpVtbl -> nextSibling(This,result) ) 

#define IDOMComment_attributes(This,result)	\
    ( (This)->lpVtbl -> attributes(This,result) ) 

#define IDOMComment_ownerDocument(This,result)	\
    ( (This)->lpVtbl -> ownerDocument(This,result) ) 

#define IDOMComment_insertBefore(This,newChild,refChild,result)	\
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,result) ) 

#define IDOMComment_replaceChild(This,newChild,oldChild,result)	\
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,result) ) 

#define IDOMComment_removeChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> removeChild(This,oldChild,result) ) 

#define IDOMComment_appendChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> appendChild(This,oldChild,result) ) 

#define IDOMComment_hasChildNodes(This,result)	\
    ( (This)->lpVtbl -> hasChildNodes(This,result) ) 

#define IDOMComment_cloneNode(This,deep,result)	\
    ( (This)->lpVtbl -> cloneNode(This,deep,result) ) 

#define IDOMComment_normalize(This)	\
    ( (This)->lpVtbl -> normalize(This) ) 

#define IDOMComment_isSupported(This,feature,version,result)	\
    ( (This)->lpVtbl -> isSupported(This,feature,version,result) ) 

#define IDOMComment_namespaceURI(This,result)	\
    ( (This)->lpVtbl -> namespaceURI(This,result) ) 

#define IDOMComment_prefix(This,result)	\
    ( (This)->lpVtbl -> prefix(This,result) ) 

#define IDOMComment_setPrefix(This,prefix)	\
    ( (This)->lpVtbl -> setPrefix(This,prefix) ) 

#define IDOMComment_localName(This,result)	\
    ( (This)->lpVtbl -> localName(This,result) ) 

#define IDOMComment_hasAttributes(This,result)	\
    ( (This)->lpVtbl -> hasAttributes(This,result) ) 

#define IDOMComment_isSameNode(This,other,result)	\
    ( (This)->lpVtbl -> isSameNode(This,other,result) ) 

#define IDOMComment_isEqualNode(This,other,result)	\
    ( (This)->lpVtbl -> isEqualNode(This,other,result) ) 

#define IDOMComment_textContent(This,result)	\
    ( (This)->lpVtbl -> textContent(This,result) ) 

#define IDOMComment_setTextContent(This,text)	\
    ( (This)->lpVtbl -> setTextContent(This,text) ) 


#define IDOMComment_data(This,result)	\
    ( (This)->lpVtbl -> data(This,result) ) 

#define IDOMComment_setData(This,data)	\
    ( (This)->lpVtbl -> setData(This,data) ) 

#define IDOMComment_length(This,result)	\
    ( (This)->lpVtbl -> length(This,result) ) 

#define IDOMComment_substringData(This,offset,count,result)	\
    ( (This)->lpVtbl -> substringData(This,offset,count,result) ) 

#define IDOMComment_appendData(This,arg)	\
    ( (This)->lpVtbl -> appendData(This,arg) ) 

#define IDOMComment_insertData(This,offset,arg)	\
    ( (This)->lpVtbl -> insertData(This,offset,arg) ) 

#define IDOMComment_deleteData(This,offset,count)	\
    ( (This)->lpVtbl -> deleteData(This,offset,count) ) 

#define IDOMComment_replaceData(This,offset,count,arg)	\
    ( (This)->lpVtbl -> replaceData(This,offset,count,arg) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMComment_INTERFACE_DEFINED__ */


#ifndef __IDOMCDATASection_INTERFACE_DEFINED__
#define __IDOMCDATASection_INTERFACE_DEFINED__

/* interface IDOMCDATASection */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMCDATASection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("31B506C1-45A3-4d72-815A-311B0A897E58")
    IDOMCDATASection : public IDOMText
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IDOMCDATASectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMCDATASection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMCDATASection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMCDATASection * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMCDATASection * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMCDATASection * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMCDATASection * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMCDATASection * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMCDATASection * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMCDATASection * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMCDATASection * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMCDATASection * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *nodeName )( 
            IDOMCDATASection * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *nodeValue )( 
            IDOMCDATASection * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setNodeValue )( 
            IDOMCDATASection * This,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *nodeType )( 
            IDOMCDATASection * This,
            /* [retval][out] */ unsigned short *result);
        
        HRESULT ( STDMETHODCALLTYPE *parentNode )( 
            IDOMCDATASection * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *childNodes )( 
            IDOMCDATASection * This,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *firstChild )( 
            IDOMCDATASection * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *lastChild )( 
            IDOMCDATASection * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *previousSibling )( 
            IDOMCDATASection * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *nextSibling )( 
            IDOMCDATASection * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *attributes )( 
            IDOMCDATASection * This,
            /* [retval][out] */ IDOMNamedNodeMap **result);
        
        HRESULT ( STDMETHODCALLTYPE *ownerDocument )( 
            IDOMCDATASection * This,
            /* [retval][out] */ IDOMDocument **result);
        
        HRESULT ( STDMETHODCALLTYPE *insertBefore )( 
            IDOMCDATASection * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *refChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *replaceChild )( 
            IDOMCDATASection * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *removeChild )( 
            IDOMCDATASection * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IDOMCDATASection * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IDOMCDATASection * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IDOMCDATASection * This,
            /* [in] */ BOOL deep,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *normalize )( 
            IDOMCDATASection * This);
        
        HRESULT ( STDMETHODCALLTYPE *isSupported )( 
            IDOMCDATASection * This,
            /* [in] */ BSTR feature,
            /* [in] */ BSTR version,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *namespaceURI )( 
            IDOMCDATASection * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *prefix )( 
            IDOMCDATASection * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setPrefix )( 
            IDOMCDATASection * This,
            /* [in] */ BSTR prefix);
        
        HRESULT ( STDMETHODCALLTYPE *localName )( 
            IDOMCDATASection * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *hasAttributes )( 
            IDOMCDATASection * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isSameNode )( 
            IDOMCDATASection * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isEqualNode )( 
            IDOMCDATASection * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *textContent )( 
            IDOMCDATASection * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setTextContent )( 
            IDOMCDATASection * This,
            /* [in] */ BSTR text);
        
        HRESULT ( STDMETHODCALLTYPE *data )( 
            IDOMCDATASection * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setData )( 
            IDOMCDATASection * This,
            /* [in] */ BSTR data);
        
        HRESULT ( STDMETHODCALLTYPE *length )( 
            IDOMCDATASection * This,
            /* [retval][out] */ UINT *result);
        
        HRESULT ( STDMETHODCALLTYPE *substringData )( 
            IDOMCDATASection * This,
            /* [in] */ UINT offset,
            /* [in] */ UINT count,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *appendData )( 
            IDOMCDATASection * This,
            /* [in] */ BSTR arg);
        
        HRESULT ( STDMETHODCALLTYPE *insertData )( 
            IDOMCDATASection * This,
            /* [in] */ UINT offset,
            /* [in] */ BSTR arg);
        
        HRESULT ( STDMETHODCALLTYPE *deleteData )( 
            IDOMCDATASection * This,
            /* [in] */ UINT offset,
            /* [in] */ UINT count);
        
        HRESULT ( STDMETHODCALLTYPE *replaceData )( 
            IDOMCDATASection * This,
            /* [in] */ UINT offset,
            /* [in] */ UINT count,
            /* [in] */ BSTR arg);
        
        HRESULT ( STDMETHODCALLTYPE *splitText )( 
            IDOMCDATASection * This,
            /* [in] */ UINT offset,
            /* [retval][out] */ IDOMText **result);
        
        END_INTERFACE
    } IDOMCDATASectionVtbl;

    interface IDOMCDATASection
    {
        CONST_VTBL struct IDOMCDATASectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMCDATASection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMCDATASection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMCDATASection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMCDATASection_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMCDATASection_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMCDATASection_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMCDATASection_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMCDATASection_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMCDATASection_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMCDATASection_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMCDATASection_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMCDATASection_nodeName(This,result)	\
    ( (This)->lpVtbl -> nodeName(This,result) ) 

#define IDOMCDATASection_nodeValue(This,result)	\
    ( (This)->lpVtbl -> nodeValue(This,result) ) 

#define IDOMCDATASection_setNodeValue(This,value)	\
    ( (This)->lpVtbl -> setNodeValue(This,value) ) 

#define IDOMCDATASection_nodeType(This,result)	\
    ( (This)->lpVtbl -> nodeType(This,result) ) 

#define IDOMCDATASection_parentNode(This,result)	\
    ( (This)->lpVtbl -> parentNode(This,result) ) 

#define IDOMCDATASection_childNodes(This,result)	\
    ( (This)->lpVtbl -> childNodes(This,result) ) 

#define IDOMCDATASection_firstChild(This,result)	\
    ( (This)->lpVtbl -> firstChild(This,result) ) 

#define IDOMCDATASection_lastChild(This,result)	\
    ( (This)->lpVtbl -> lastChild(This,result) ) 

#define IDOMCDATASection_previousSibling(This,result)	\
    ( (This)->lpVtbl -> previousSibling(This,result) ) 

#define IDOMCDATASection_nextSibling(This,result)	\
    ( (This)->lpVtbl -> nextSibling(This,result) ) 

#define IDOMCDATASection_attributes(This,result)	\
    ( (This)->lpVtbl -> attributes(This,result) ) 

#define IDOMCDATASection_ownerDocument(This,result)	\
    ( (This)->lpVtbl -> ownerDocument(This,result) ) 

#define IDOMCDATASection_insertBefore(This,newChild,refChild,result)	\
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,result) ) 

#define IDOMCDATASection_replaceChild(This,newChild,oldChild,result)	\
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,result) ) 

#define IDOMCDATASection_removeChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> removeChild(This,oldChild,result) ) 

#define IDOMCDATASection_appendChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> appendChild(This,oldChild,result) ) 

#define IDOMCDATASection_hasChildNodes(This,result)	\
    ( (This)->lpVtbl -> hasChildNodes(This,result) ) 

#define IDOMCDATASection_cloneNode(This,deep,result)	\
    ( (This)->lpVtbl -> cloneNode(This,deep,result) ) 

#define IDOMCDATASection_normalize(This)	\
    ( (This)->lpVtbl -> normalize(This) ) 

#define IDOMCDATASection_isSupported(This,feature,version,result)	\
    ( (This)->lpVtbl -> isSupported(This,feature,version,result) ) 

#define IDOMCDATASection_namespaceURI(This,result)	\
    ( (This)->lpVtbl -> namespaceURI(This,result) ) 

#define IDOMCDATASection_prefix(This,result)	\
    ( (This)->lpVtbl -> prefix(This,result) ) 

#define IDOMCDATASection_setPrefix(This,prefix)	\
    ( (This)->lpVtbl -> setPrefix(This,prefix) ) 

#define IDOMCDATASection_localName(This,result)	\
    ( (This)->lpVtbl -> localName(This,result) ) 

#define IDOMCDATASection_hasAttributes(This,result)	\
    ( (This)->lpVtbl -> hasAttributes(This,result) ) 

#define IDOMCDATASection_isSameNode(This,other,result)	\
    ( (This)->lpVtbl -> isSameNode(This,other,result) ) 

#define IDOMCDATASection_isEqualNode(This,other,result)	\
    ( (This)->lpVtbl -> isEqualNode(This,other,result) ) 

#define IDOMCDATASection_textContent(This,result)	\
    ( (This)->lpVtbl -> textContent(This,result) ) 

#define IDOMCDATASection_setTextContent(This,text)	\
    ( (This)->lpVtbl -> setTextContent(This,text) ) 


#define IDOMCDATASection_data(This,result)	\
    ( (This)->lpVtbl -> data(This,result) ) 

#define IDOMCDATASection_setData(This,data)	\
    ( (This)->lpVtbl -> setData(This,data) ) 

#define IDOMCDATASection_length(This,result)	\
    ( (This)->lpVtbl -> length(This,result) ) 

#define IDOMCDATASection_substringData(This,offset,count,result)	\
    ( (This)->lpVtbl -> substringData(This,offset,count,result) ) 

#define IDOMCDATASection_appendData(This,arg)	\
    ( (This)->lpVtbl -> appendData(This,arg) ) 

#define IDOMCDATASection_insertData(This,offset,arg)	\
    ( (This)->lpVtbl -> insertData(This,offset,arg) ) 

#define IDOMCDATASection_deleteData(This,offset,count)	\
    ( (This)->lpVtbl -> deleteData(This,offset,count) ) 

#define IDOMCDATASection_replaceData(This,offset,count,arg)	\
    ( (This)->lpVtbl -> replaceData(This,offset,count,arg) ) 


#define IDOMCDATASection_splitText(This,offset,result)	\
    ( (This)->lpVtbl -> splitText(This,offset,result) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMCDATASection_INTERFACE_DEFINED__ */


#ifndef __IDOMDocumentType_INTERFACE_DEFINED__
#define __IDOMDocumentType_INTERFACE_DEFINED__

/* interface IDOMDocumentType */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMDocumentType;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("17FCE6EA-4164-4bd4-9DBF-0395FBF37FD3")
    IDOMDocumentType : public IDOMNode
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE name( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE entities( 
            /* [retval][out] */ IDOMNamedNodeMap **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE notations( 
            /* [retval][out] */ IDOMNamedNodeMap **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE publicId( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE systemId( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE internalSubset( 
            /* [retval][out] */ BSTR *result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMDocumentTypeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMDocumentType * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMDocumentType * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMDocumentType * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMDocumentType * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMDocumentType * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMDocumentType * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMDocumentType * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMDocumentType * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMDocumentType * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMDocumentType * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMDocumentType * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *nodeName )( 
            IDOMDocumentType * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *nodeValue )( 
            IDOMDocumentType * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setNodeValue )( 
            IDOMDocumentType * This,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *nodeType )( 
            IDOMDocumentType * This,
            /* [retval][out] */ unsigned short *result);
        
        HRESULT ( STDMETHODCALLTYPE *parentNode )( 
            IDOMDocumentType * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *childNodes )( 
            IDOMDocumentType * This,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *firstChild )( 
            IDOMDocumentType * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *lastChild )( 
            IDOMDocumentType * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *previousSibling )( 
            IDOMDocumentType * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *nextSibling )( 
            IDOMDocumentType * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *attributes )( 
            IDOMDocumentType * This,
            /* [retval][out] */ IDOMNamedNodeMap **result);
        
        HRESULT ( STDMETHODCALLTYPE *ownerDocument )( 
            IDOMDocumentType * This,
            /* [retval][out] */ IDOMDocument **result);
        
        HRESULT ( STDMETHODCALLTYPE *insertBefore )( 
            IDOMDocumentType * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *refChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *replaceChild )( 
            IDOMDocumentType * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *removeChild )( 
            IDOMDocumentType * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IDOMDocumentType * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IDOMDocumentType * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IDOMDocumentType * This,
            /* [in] */ BOOL deep,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *normalize )( 
            IDOMDocumentType * This);
        
        HRESULT ( STDMETHODCALLTYPE *isSupported )( 
            IDOMDocumentType * This,
            /* [in] */ BSTR feature,
            /* [in] */ BSTR version,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *namespaceURI )( 
            IDOMDocumentType * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *prefix )( 
            IDOMDocumentType * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setPrefix )( 
            IDOMDocumentType * This,
            /* [in] */ BSTR prefix);
        
        HRESULT ( STDMETHODCALLTYPE *localName )( 
            IDOMDocumentType * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *hasAttributes )( 
            IDOMDocumentType * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isSameNode )( 
            IDOMDocumentType * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isEqualNode )( 
            IDOMDocumentType * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *textContent )( 
            IDOMDocumentType * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setTextContent )( 
            IDOMDocumentType * This,
            /* [in] */ BSTR text);
        
        HRESULT ( STDMETHODCALLTYPE *name )( 
            IDOMDocumentType * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *entities )( 
            IDOMDocumentType * This,
            /* [retval][out] */ IDOMNamedNodeMap **result);
        
        HRESULT ( STDMETHODCALLTYPE *notations )( 
            IDOMDocumentType * This,
            /* [retval][out] */ IDOMNamedNodeMap **result);
        
        HRESULT ( STDMETHODCALLTYPE *publicId )( 
            IDOMDocumentType * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *systemId )( 
            IDOMDocumentType * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *internalSubset )( 
            IDOMDocumentType * This,
            /* [retval][out] */ BSTR *result);
        
        END_INTERFACE
    } IDOMDocumentTypeVtbl;

    interface IDOMDocumentType
    {
        CONST_VTBL struct IDOMDocumentTypeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMDocumentType_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMDocumentType_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMDocumentType_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMDocumentType_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMDocumentType_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMDocumentType_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMDocumentType_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMDocumentType_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMDocumentType_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMDocumentType_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMDocumentType_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMDocumentType_nodeName(This,result)	\
    ( (This)->lpVtbl -> nodeName(This,result) ) 

#define IDOMDocumentType_nodeValue(This,result)	\
    ( (This)->lpVtbl -> nodeValue(This,result) ) 

#define IDOMDocumentType_setNodeValue(This,value)	\
    ( (This)->lpVtbl -> setNodeValue(This,value) ) 

#define IDOMDocumentType_nodeType(This,result)	\
    ( (This)->lpVtbl -> nodeType(This,result) ) 

#define IDOMDocumentType_parentNode(This,result)	\
    ( (This)->lpVtbl -> parentNode(This,result) ) 

#define IDOMDocumentType_childNodes(This,result)	\
    ( (This)->lpVtbl -> childNodes(This,result) ) 

#define IDOMDocumentType_firstChild(This,result)	\
    ( (This)->lpVtbl -> firstChild(This,result) ) 

#define IDOMDocumentType_lastChild(This,result)	\
    ( (This)->lpVtbl -> lastChild(This,result) ) 

#define IDOMDocumentType_previousSibling(This,result)	\
    ( (This)->lpVtbl -> previousSibling(This,result) ) 

#define IDOMDocumentType_nextSibling(This,result)	\
    ( (This)->lpVtbl -> nextSibling(This,result) ) 

#define IDOMDocumentType_attributes(This,result)	\
    ( (This)->lpVtbl -> attributes(This,result) ) 

#define IDOMDocumentType_ownerDocument(This,result)	\
    ( (This)->lpVtbl -> ownerDocument(This,result) ) 

#define IDOMDocumentType_insertBefore(This,newChild,refChild,result)	\
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,result) ) 

#define IDOMDocumentType_replaceChild(This,newChild,oldChild,result)	\
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,result) ) 

#define IDOMDocumentType_removeChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> removeChild(This,oldChild,result) ) 

#define IDOMDocumentType_appendChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> appendChild(This,oldChild,result) ) 

#define IDOMDocumentType_hasChildNodes(This,result)	\
    ( (This)->lpVtbl -> hasChildNodes(This,result) ) 

#define IDOMDocumentType_cloneNode(This,deep,result)	\
    ( (This)->lpVtbl -> cloneNode(This,deep,result) ) 

#define IDOMDocumentType_normalize(This)	\
    ( (This)->lpVtbl -> normalize(This) ) 

#define IDOMDocumentType_isSupported(This,feature,version,result)	\
    ( (This)->lpVtbl -> isSupported(This,feature,version,result) ) 

#define IDOMDocumentType_namespaceURI(This,result)	\
    ( (This)->lpVtbl -> namespaceURI(This,result) ) 

#define IDOMDocumentType_prefix(This,result)	\
    ( (This)->lpVtbl -> prefix(This,result) ) 

#define IDOMDocumentType_setPrefix(This,prefix)	\
    ( (This)->lpVtbl -> setPrefix(This,prefix) ) 

#define IDOMDocumentType_localName(This,result)	\
    ( (This)->lpVtbl -> localName(This,result) ) 

#define IDOMDocumentType_hasAttributes(This,result)	\
    ( (This)->lpVtbl -> hasAttributes(This,result) ) 

#define IDOMDocumentType_isSameNode(This,other,result)	\
    ( (This)->lpVtbl -> isSameNode(This,other,result) ) 

#define IDOMDocumentType_isEqualNode(This,other,result)	\
    ( (This)->lpVtbl -> isEqualNode(This,other,result) ) 

#define IDOMDocumentType_textContent(This,result)	\
    ( (This)->lpVtbl -> textContent(This,result) ) 

#define IDOMDocumentType_setTextContent(This,text)	\
    ( (This)->lpVtbl -> setTextContent(This,text) ) 


#define IDOMDocumentType_name(This,result)	\
    ( (This)->lpVtbl -> name(This,result) ) 

#define IDOMDocumentType_entities(This,result)	\
    ( (This)->lpVtbl -> entities(This,result) ) 

#define IDOMDocumentType_notations(This,result)	\
    ( (This)->lpVtbl -> notations(This,result) ) 

#define IDOMDocumentType_publicId(This,result)	\
    ( (This)->lpVtbl -> publicId(This,result) ) 

#define IDOMDocumentType_systemId(This,result)	\
    ( (This)->lpVtbl -> systemId(This,result) ) 

#define IDOMDocumentType_internalSubset(This,result)	\
    ( (This)->lpVtbl -> internalSubset(This,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMDocumentType_INTERFACE_DEFINED__ */


#ifndef __IDOMEntityReference_INTERFACE_DEFINED__
#define __IDOMEntityReference_INTERFACE_DEFINED__

/* interface IDOMEntityReference */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMEntityReference;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0593CE45-15B2-44af-BBD0-5A1654F8240E")
    IDOMEntityReference : public IDOMNode
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IDOMEntityReferenceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMEntityReference * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMEntityReference * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMEntityReference * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMEntityReference * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMEntityReference * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMEntityReference * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMEntityReference * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMEntityReference * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMEntityReference * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMEntityReference * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMEntityReference * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *nodeName )( 
            IDOMEntityReference * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *nodeValue )( 
            IDOMEntityReference * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setNodeValue )( 
            IDOMEntityReference * This,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *nodeType )( 
            IDOMEntityReference * This,
            /* [retval][out] */ unsigned short *result);
        
        HRESULT ( STDMETHODCALLTYPE *parentNode )( 
            IDOMEntityReference * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *childNodes )( 
            IDOMEntityReference * This,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *firstChild )( 
            IDOMEntityReference * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *lastChild )( 
            IDOMEntityReference * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *previousSibling )( 
            IDOMEntityReference * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *nextSibling )( 
            IDOMEntityReference * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *attributes )( 
            IDOMEntityReference * This,
            /* [retval][out] */ IDOMNamedNodeMap **result);
        
        HRESULT ( STDMETHODCALLTYPE *ownerDocument )( 
            IDOMEntityReference * This,
            /* [retval][out] */ IDOMDocument **result);
        
        HRESULT ( STDMETHODCALLTYPE *insertBefore )( 
            IDOMEntityReference * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *refChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *replaceChild )( 
            IDOMEntityReference * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *removeChild )( 
            IDOMEntityReference * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IDOMEntityReference * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IDOMEntityReference * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IDOMEntityReference * This,
            /* [in] */ BOOL deep,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *normalize )( 
            IDOMEntityReference * This);
        
        HRESULT ( STDMETHODCALLTYPE *isSupported )( 
            IDOMEntityReference * This,
            /* [in] */ BSTR feature,
            /* [in] */ BSTR version,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *namespaceURI )( 
            IDOMEntityReference * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *prefix )( 
            IDOMEntityReference * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setPrefix )( 
            IDOMEntityReference * This,
            /* [in] */ BSTR prefix);
        
        HRESULT ( STDMETHODCALLTYPE *localName )( 
            IDOMEntityReference * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *hasAttributes )( 
            IDOMEntityReference * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isSameNode )( 
            IDOMEntityReference * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isEqualNode )( 
            IDOMEntityReference * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *textContent )( 
            IDOMEntityReference * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setTextContent )( 
            IDOMEntityReference * This,
            /* [in] */ BSTR text);
        
        END_INTERFACE
    } IDOMEntityReferenceVtbl;

    interface IDOMEntityReference
    {
        CONST_VTBL struct IDOMEntityReferenceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMEntityReference_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMEntityReference_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMEntityReference_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMEntityReference_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMEntityReference_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMEntityReference_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMEntityReference_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMEntityReference_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMEntityReference_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMEntityReference_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMEntityReference_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMEntityReference_nodeName(This,result)	\
    ( (This)->lpVtbl -> nodeName(This,result) ) 

#define IDOMEntityReference_nodeValue(This,result)	\
    ( (This)->lpVtbl -> nodeValue(This,result) ) 

#define IDOMEntityReference_setNodeValue(This,value)	\
    ( (This)->lpVtbl -> setNodeValue(This,value) ) 

#define IDOMEntityReference_nodeType(This,result)	\
    ( (This)->lpVtbl -> nodeType(This,result) ) 

#define IDOMEntityReference_parentNode(This,result)	\
    ( (This)->lpVtbl -> parentNode(This,result) ) 

#define IDOMEntityReference_childNodes(This,result)	\
    ( (This)->lpVtbl -> childNodes(This,result) ) 

#define IDOMEntityReference_firstChild(This,result)	\
    ( (This)->lpVtbl -> firstChild(This,result) ) 

#define IDOMEntityReference_lastChild(This,result)	\
    ( (This)->lpVtbl -> lastChild(This,result) ) 

#define IDOMEntityReference_previousSibling(This,result)	\
    ( (This)->lpVtbl -> previousSibling(This,result) ) 

#define IDOMEntityReference_nextSibling(This,result)	\
    ( (This)->lpVtbl -> nextSibling(This,result) ) 

#define IDOMEntityReference_attributes(This,result)	\
    ( (This)->lpVtbl -> attributes(This,result) ) 

#define IDOMEntityReference_ownerDocument(This,result)	\
    ( (This)->lpVtbl -> ownerDocument(This,result) ) 

#define IDOMEntityReference_insertBefore(This,newChild,refChild,result)	\
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,result) ) 

#define IDOMEntityReference_replaceChild(This,newChild,oldChild,result)	\
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,result) ) 

#define IDOMEntityReference_removeChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> removeChild(This,oldChild,result) ) 

#define IDOMEntityReference_appendChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> appendChild(This,oldChild,result) ) 

#define IDOMEntityReference_hasChildNodes(This,result)	\
    ( (This)->lpVtbl -> hasChildNodes(This,result) ) 

#define IDOMEntityReference_cloneNode(This,deep,result)	\
    ( (This)->lpVtbl -> cloneNode(This,deep,result) ) 

#define IDOMEntityReference_normalize(This)	\
    ( (This)->lpVtbl -> normalize(This) ) 

#define IDOMEntityReference_isSupported(This,feature,version,result)	\
    ( (This)->lpVtbl -> isSupported(This,feature,version,result) ) 

#define IDOMEntityReference_namespaceURI(This,result)	\
    ( (This)->lpVtbl -> namespaceURI(This,result) ) 

#define IDOMEntityReference_prefix(This,result)	\
    ( (This)->lpVtbl -> prefix(This,result) ) 

#define IDOMEntityReference_setPrefix(This,prefix)	\
    ( (This)->lpVtbl -> setPrefix(This,prefix) ) 

#define IDOMEntityReference_localName(This,result)	\
    ( (This)->lpVtbl -> localName(This,result) ) 

#define IDOMEntityReference_hasAttributes(This,result)	\
    ( (This)->lpVtbl -> hasAttributes(This,result) ) 

#define IDOMEntityReference_isSameNode(This,other,result)	\
    ( (This)->lpVtbl -> isSameNode(This,other,result) ) 

#define IDOMEntityReference_isEqualNode(This,other,result)	\
    ( (This)->lpVtbl -> isEqualNode(This,other,result) ) 

#define IDOMEntityReference_textContent(This,result)	\
    ( (This)->lpVtbl -> textContent(This,result) ) 

#define IDOMEntityReference_setTextContent(This,text)	\
    ( (This)->lpVtbl -> setTextContent(This,text) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMEntityReference_INTERFACE_DEFINED__ */


#ifndef __IDOMProcessingInstruction_INTERFACE_DEFINED__
#define __IDOMProcessingInstruction_INTERFACE_DEFINED__

/* interface IDOMProcessingInstruction */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMProcessingInstruction;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D99D2F48-ABF3-426a-9339-54681E1AFCA9")
    IDOMProcessingInstruction : public IDOMNode
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE target( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE data( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setData( 
            /* [in] */ BSTR data) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMProcessingInstructionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMProcessingInstruction * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMProcessingInstruction * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMProcessingInstruction * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMProcessingInstruction * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMProcessingInstruction * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMProcessingInstruction * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMProcessingInstruction * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMProcessingInstruction * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMProcessingInstruction * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMProcessingInstruction * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMProcessingInstruction * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *nodeName )( 
            IDOMProcessingInstruction * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *nodeValue )( 
            IDOMProcessingInstruction * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setNodeValue )( 
            IDOMProcessingInstruction * This,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *nodeType )( 
            IDOMProcessingInstruction * This,
            /* [retval][out] */ unsigned short *result);
        
        HRESULT ( STDMETHODCALLTYPE *parentNode )( 
            IDOMProcessingInstruction * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *childNodes )( 
            IDOMProcessingInstruction * This,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *firstChild )( 
            IDOMProcessingInstruction * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *lastChild )( 
            IDOMProcessingInstruction * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *previousSibling )( 
            IDOMProcessingInstruction * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *nextSibling )( 
            IDOMProcessingInstruction * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *attributes )( 
            IDOMProcessingInstruction * This,
            /* [retval][out] */ IDOMNamedNodeMap **result);
        
        HRESULT ( STDMETHODCALLTYPE *ownerDocument )( 
            IDOMProcessingInstruction * This,
            /* [retval][out] */ IDOMDocument **result);
        
        HRESULT ( STDMETHODCALLTYPE *insertBefore )( 
            IDOMProcessingInstruction * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *refChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *replaceChild )( 
            IDOMProcessingInstruction * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *removeChild )( 
            IDOMProcessingInstruction * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IDOMProcessingInstruction * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IDOMProcessingInstruction * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IDOMProcessingInstruction * This,
            /* [in] */ BOOL deep,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *normalize )( 
            IDOMProcessingInstruction * This);
        
        HRESULT ( STDMETHODCALLTYPE *isSupported )( 
            IDOMProcessingInstruction * This,
            /* [in] */ BSTR feature,
            /* [in] */ BSTR version,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *namespaceURI )( 
            IDOMProcessingInstruction * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *prefix )( 
            IDOMProcessingInstruction * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setPrefix )( 
            IDOMProcessingInstruction * This,
            /* [in] */ BSTR prefix);
        
        HRESULT ( STDMETHODCALLTYPE *localName )( 
            IDOMProcessingInstruction * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *hasAttributes )( 
            IDOMProcessingInstruction * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isSameNode )( 
            IDOMProcessingInstruction * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isEqualNode )( 
            IDOMProcessingInstruction * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *textContent )( 
            IDOMProcessingInstruction * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setTextContent )( 
            IDOMProcessingInstruction * This,
            /* [in] */ BSTR text);
        
        HRESULT ( STDMETHODCALLTYPE *target )( 
            IDOMProcessingInstruction * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *data )( 
            IDOMProcessingInstruction * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setData )( 
            IDOMProcessingInstruction * This,
            /* [in] */ BSTR data);
        
        END_INTERFACE
    } IDOMProcessingInstructionVtbl;

    interface IDOMProcessingInstruction
    {
        CONST_VTBL struct IDOMProcessingInstructionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMProcessingInstruction_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMProcessingInstruction_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMProcessingInstruction_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMProcessingInstruction_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMProcessingInstruction_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMProcessingInstruction_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMProcessingInstruction_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMProcessingInstruction_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMProcessingInstruction_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMProcessingInstruction_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMProcessingInstruction_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMProcessingInstruction_nodeName(This,result)	\
    ( (This)->lpVtbl -> nodeName(This,result) ) 

#define IDOMProcessingInstruction_nodeValue(This,result)	\
    ( (This)->lpVtbl -> nodeValue(This,result) ) 

#define IDOMProcessingInstruction_setNodeValue(This,value)	\
    ( (This)->lpVtbl -> setNodeValue(This,value) ) 

#define IDOMProcessingInstruction_nodeType(This,result)	\
    ( (This)->lpVtbl -> nodeType(This,result) ) 

#define IDOMProcessingInstruction_parentNode(This,result)	\
    ( (This)->lpVtbl -> parentNode(This,result) ) 

#define IDOMProcessingInstruction_childNodes(This,result)	\
    ( (This)->lpVtbl -> childNodes(This,result) ) 

#define IDOMProcessingInstruction_firstChild(This,result)	\
    ( (This)->lpVtbl -> firstChild(This,result) ) 

#define IDOMProcessingInstruction_lastChild(This,result)	\
    ( (This)->lpVtbl -> lastChild(This,result) ) 

#define IDOMProcessingInstruction_previousSibling(This,result)	\
    ( (This)->lpVtbl -> previousSibling(This,result) ) 

#define IDOMProcessingInstruction_nextSibling(This,result)	\
    ( (This)->lpVtbl -> nextSibling(This,result) ) 

#define IDOMProcessingInstruction_attributes(This,result)	\
    ( (This)->lpVtbl -> attributes(This,result) ) 

#define IDOMProcessingInstruction_ownerDocument(This,result)	\
    ( (This)->lpVtbl -> ownerDocument(This,result) ) 

#define IDOMProcessingInstruction_insertBefore(This,newChild,refChild,result)	\
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,result) ) 

#define IDOMProcessingInstruction_replaceChild(This,newChild,oldChild,result)	\
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,result) ) 

#define IDOMProcessingInstruction_removeChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> removeChild(This,oldChild,result) ) 

#define IDOMProcessingInstruction_appendChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> appendChild(This,oldChild,result) ) 

#define IDOMProcessingInstruction_hasChildNodes(This,result)	\
    ( (This)->lpVtbl -> hasChildNodes(This,result) ) 

#define IDOMProcessingInstruction_cloneNode(This,deep,result)	\
    ( (This)->lpVtbl -> cloneNode(This,deep,result) ) 

#define IDOMProcessingInstruction_normalize(This)	\
    ( (This)->lpVtbl -> normalize(This) ) 

#define IDOMProcessingInstruction_isSupported(This,feature,version,result)	\
    ( (This)->lpVtbl -> isSupported(This,feature,version,result) ) 

#define IDOMProcessingInstruction_namespaceURI(This,result)	\
    ( (This)->lpVtbl -> namespaceURI(This,result) ) 

#define IDOMProcessingInstruction_prefix(This,result)	\
    ( (This)->lpVtbl -> prefix(This,result) ) 

#define IDOMProcessingInstruction_setPrefix(This,prefix)	\
    ( (This)->lpVtbl -> setPrefix(This,prefix) ) 

#define IDOMProcessingInstruction_localName(This,result)	\
    ( (This)->lpVtbl -> localName(This,result) ) 

#define IDOMProcessingInstruction_hasAttributes(This,result)	\
    ( (This)->lpVtbl -> hasAttributes(This,result) ) 

#define IDOMProcessingInstruction_isSameNode(This,other,result)	\
    ( (This)->lpVtbl -> isSameNode(This,other,result) ) 

#define IDOMProcessingInstruction_isEqualNode(This,other,result)	\
    ( (This)->lpVtbl -> isEqualNode(This,other,result) ) 

#define IDOMProcessingInstruction_textContent(This,result)	\
    ( (This)->lpVtbl -> textContent(This,result) ) 

#define IDOMProcessingInstruction_setTextContent(This,text)	\
    ( (This)->lpVtbl -> setTextContent(This,text) ) 


#define IDOMProcessingInstruction_target(This,result)	\
    ( (This)->lpVtbl -> target(This,result) ) 

#define IDOMProcessingInstruction_data(This,result)	\
    ( (This)->lpVtbl -> data(This,result) ) 

#define IDOMProcessingInstruction_setData(This,data)	\
    ( (This)->lpVtbl -> setData(This,data) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMProcessingInstruction_INTERFACE_DEFINED__ */


#ifndef __IDOMDocumentFragment_INTERFACE_DEFINED__
#define __IDOMDocumentFragment_INTERFACE_DEFINED__

/* interface IDOMDocumentFragment */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMDocumentFragment;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("09D35665-8396-4868-949E-8AA2407A6E10")
    IDOMDocumentFragment : public IDOMNode
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IDOMDocumentFragmentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMDocumentFragment * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMDocumentFragment * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMDocumentFragment * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMDocumentFragment * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMDocumentFragment * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMDocumentFragment * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMDocumentFragment * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMDocumentFragment * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMDocumentFragment * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMDocumentFragment * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMDocumentFragment * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *nodeName )( 
            IDOMDocumentFragment * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *nodeValue )( 
            IDOMDocumentFragment * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setNodeValue )( 
            IDOMDocumentFragment * This,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *nodeType )( 
            IDOMDocumentFragment * This,
            /* [retval][out] */ unsigned short *result);
        
        HRESULT ( STDMETHODCALLTYPE *parentNode )( 
            IDOMDocumentFragment * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *childNodes )( 
            IDOMDocumentFragment * This,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *firstChild )( 
            IDOMDocumentFragment * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *lastChild )( 
            IDOMDocumentFragment * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *previousSibling )( 
            IDOMDocumentFragment * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *nextSibling )( 
            IDOMDocumentFragment * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *attributes )( 
            IDOMDocumentFragment * This,
            /* [retval][out] */ IDOMNamedNodeMap **result);
        
        HRESULT ( STDMETHODCALLTYPE *ownerDocument )( 
            IDOMDocumentFragment * This,
            /* [retval][out] */ IDOMDocument **result);
        
        HRESULT ( STDMETHODCALLTYPE *insertBefore )( 
            IDOMDocumentFragment * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *refChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *replaceChild )( 
            IDOMDocumentFragment * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *removeChild )( 
            IDOMDocumentFragment * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IDOMDocumentFragment * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IDOMDocumentFragment * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IDOMDocumentFragment * This,
            /* [in] */ BOOL deep,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *normalize )( 
            IDOMDocumentFragment * This);
        
        HRESULT ( STDMETHODCALLTYPE *isSupported )( 
            IDOMDocumentFragment * This,
            /* [in] */ BSTR feature,
            /* [in] */ BSTR version,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *namespaceURI )( 
            IDOMDocumentFragment * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *prefix )( 
            IDOMDocumentFragment * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setPrefix )( 
            IDOMDocumentFragment * This,
            /* [in] */ BSTR prefix);
        
        HRESULT ( STDMETHODCALLTYPE *localName )( 
            IDOMDocumentFragment * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *hasAttributes )( 
            IDOMDocumentFragment * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isSameNode )( 
            IDOMDocumentFragment * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isEqualNode )( 
            IDOMDocumentFragment * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *textContent )( 
            IDOMDocumentFragment * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setTextContent )( 
            IDOMDocumentFragment * This,
            /* [in] */ BSTR text);
        
        END_INTERFACE
    } IDOMDocumentFragmentVtbl;

    interface IDOMDocumentFragment
    {
        CONST_VTBL struct IDOMDocumentFragmentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMDocumentFragment_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMDocumentFragment_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMDocumentFragment_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMDocumentFragment_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMDocumentFragment_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMDocumentFragment_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMDocumentFragment_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMDocumentFragment_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMDocumentFragment_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMDocumentFragment_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMDocumentFragment_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMDocumentFragment_nodeName(This,result)	\
    ( (This)->lpVtbl -> nodeName(This,result) ) 

#define IDOMDocumentFragment_nodeValue(This,result)	\
    ( (This)->lpVtbl -> nodeValue(This,result) ) 

#define IDOMDocumentFragment_setNodeValue(This,value)	\
    ( (This)->lpVtbl -> setNodeValue(This,value) ) 

#define IDOMDocumentFragment_nodeType(This,result)	\
    ( (This)->lpVtbl -> nodeType(This,result) ) 

#define IDOMDocumentFragment_parentNode(This,result)	\
    ( (This)->lpVtbl -> parentNode(This,result) ) 

#define IDOMDocumentFragment_childNodes(This,result)	\
    ( (This)->lpVtbl -> childNodes(This,result) ) 

#define IDOMDocumentFragment_firstChild(This,result)	\
    ( (This)->lpVtbl -> firstChild(This,result) ) 

#define IDOMDocumentFragment_lastChild(This,result)	\
    ( (This)->lpVtbl -> lastChild(This,result) ) 

#define IDOMDocumentFragment_previousSibling(This,result)	\
    ( (This)->lpVtbl -> previousSibling(This,result) ) 

#define IDOMDocumentFragment_nextSibling(This,result)	\
    ( (This)->lpVtbl -> nextSibling(This,result) ) 

#define IDOMDocumentFragment_attributes(This,result)	\
    ( (This)->lpVtbl -> attributes(This,result) ) 

#define IDOMDocumentFragment_ownerDocument(This,result)	\
    ( (This)->lpVtbl -> ownerDocument(This,result) ) 

#define IDOMDocumentFragment_insertBefore(This,newChild,refChild,result)	\
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,result) ) 

#define IDOMDocumentFragment_replaceChild(This,newChild,oldChild,result)	\
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,result) ) 

#define IDOMDocumentFragment_removeChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> removeChild(This,oldChild,result) ) 

#define IDOMDocumentFragment_appendChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> appendChild(This,oldChild,result) ) 

#define IDOMDocumentFragment_hasChildNodes(This,result)	\
    ( (This)->lpVtbl -> hasChildNodes(This,result) ) 

#define IDOMDocumentFragment_cloneNode(This,deep,result)	\
    ( (This)->lpVtbl -> cloneNode(This,deep,result) ) 

#define IDOMDocumentFragment_normalize(This)	\
    ( (This)->lpVtbl -> normalize(This) ) 

#define IDOMDocumentFragment_isSupported(This,feature,version,result)	\
    ( (This)->lpVtbl -> isSupported(This,feature,version,result) ) 

#define IDOMDocumentFragment_namespaceURI(This,result)	\
    ( (This)->lpVtbl -> namespaceURI(This,result) ) 

#define IDOMDocumentFragment_prefix(This,result)	\
    ( (This)->lpVtbl -> prefix(This,result) ) 

#define IDOMDocumentFragment_setPrefix(This,prefix)	\
    ( (This)->lpVtbl -> setPrefix(This,prefix) ) 

#define IDOMDocumentFragment_localName(This,result)	\
    ( (This)->lpVtbl -> localName(This,result) ) 

#define IDOMDocumentFragment_hasAttributes(This,result)	\
    ( (This)->lpVtbl -> hasAttributes(This,result) ) 

#define IDOMDocumentFragment_isSameNode(This,other,result)	\
    ( (This)->lpVtbl -> isSameNode(This,other,result) ) 

#define IDOMDocumentFragment_isEqualNode(This,other,result)	\
    ( (This)->lpVtbl -> isEqualNode(This,other,result) ) 

#define IDOMDocumentFragment_textContent(This,result)	\
    ( (This)->lpVtbl -> textContent(This,result) ) 

#define IDOMDocumentFragment_setTextContent(This,text)	\
    ( (This)->lpVtbl -> setTextContent(This,text) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMDocumentFragment_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0026 */
/* [local] */ 












typedef long long DOMTimeStamp;



extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0026_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0026_v0_0_s_ifspec;

#ifndef __IDOMEventListener_INTERFACE_DEFINED__
#define __IDOMEventListener_INTERFACE_DEFINED__

/* interface IDOMEventListener */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMEventListener;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7f8a0a96-f864-44fb-87fb-c5f03666e8e6")
    IDOMEventListener : public IDOMObject
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE handleEvent( 
            /* [in] */ IDOMEvent *evt) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMEventListenerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMEventListener * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMEventListener * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMEventListener * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMEventListener * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMEventListener * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMEventListener * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMEventListener * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMEventListener * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMEventListener * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMEventListener * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMEventListener * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *handleEvent )( 
            IDOMEventListener * This,
            /* [in] */ IDOMEvent *evt);
        
        END_INTERFACE
    } IDOMEventListenerVtbl;

    interface IDOMEventListener
    {
        CONST_VTBL struct IDOMEventListenerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMEventListener_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMEventListener_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMEventListener_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMEventListener_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMEventListener_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMEventListener_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMEventListener_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMEventListener_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMEventListener_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMEventListener_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMEventListener_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMEventListener_handleEvent(This,evt)	\
    ( (This)->lpVtbl -> handleEvent(This,evt) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMEventListener_INTERFACE_DEFINED__ */


#ifndef __IDOMEvent_INTERFACE_DEFINED__
#define __IDOMEvent_INTERFACE_DEFINED__

/* interface IDOMEvent */
/* [unique][uuid][oleautomation][object] */ 

#define	DOMEVENT_CAPTURING_PHASE	( 1 )

#define	DOMEVENT_AT_TARGET	( 2 )

#define	DOMEVENT_BUBBLING_PHASE	( 3 )

#define	DOMEVENT_MOUSEDOWN	( 1 )

#define	DOMEVENT_MOUSEUP	( 2 )

#define	DOMEVENT_MOUSEOVER	( 4 )

#define	DOMEVENT_MOUSEOUT	( 8 )

#define	DOMEVENT_MOUSEMOVE	( 16 )

#define	DOMEVENT_MOUSEDRAG	( 32 )

#define	DOMEVENT_CLICK	( 64 )

#define	DOMEVENT_DBLCLICK	( 128 )

#define	DOMEVENT_KEYDOWN	( 256 )

#define	DOMEVENT_KEYUP	( 512 )

#define	DOMEVENT_KEYPRESS	( 1024 )

#define	DOMEVENT_DRAGDROP	( 2048 )

#define	DOMEVENT_FOCUS	( 4096 )

#define	DOMEVENT_BLUR	( 8192 )

#define	DOMEVENT_SELECT	( 16384 )

#define	DOMEVENT_CHANGE	( 32768 )


EXTERN_C const IID IID_IDOMEvent;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("62343a9e-a779-4e91-818a-14fc178cf4c2")
    IDOMEvent : public IDOMObject
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE type( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE target( 
            /* [retval][out] */ IDOMEventTarget **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE currentTarget( 
            /* [retval][out] */ IDOMEventTarget **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE eventPhase( 
            /* [retval][out] */ unsigned short *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE bubbles( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE cancelable( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE timeStamp( 
            /* [retval][out] */ DOMTimeStamp *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE stopPropagation( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE preventDefault( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE initEvent( 
            /* [in] */ BSTR eventTypeArg,
            /* [in] */ BOOL canBubbleArg,
            /* [in] */ BOOL cancelableArg) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMEventVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMEvent * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMEvent * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMEvent * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMEvent * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMEvent * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMEvent * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMEvent * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMEvent * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMEvent * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMEvent * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *type )( 
            IDOMEvent * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *target )( 
            IDOMEvent * This,
            /* [retval][out] */ IDOMEventTarget **result);
        
        HRESULT ( STDMETHODCALLTYPE *currentTarget )( 
            IDOMEvent * This,
            /* [retval][out] */ IDOMEventTarget **result);
        
        HRESULT ( STDMETHODCALLTYPE *eventPhase )( 
            IDOMEvent * This,
            /* [retval][out] */ unsigned short *result);
        
        HRESULT ( STDMETHODCALLTYPE *bubbles )( 
            IDOMEvent * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *cancelable )( 
            IDOMEvent * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *timeStamp )( 
            IDOMEvent * This,
            /* [retval][out] */ DOMTimeStamp *result);
        
        HRESULT ( STDMETHODCALLTYPE *stopPropagation )( 
            IDOMEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *preventDefault )( 
            IDOMEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *initEvent )( 
            IDOMEvent * This,
            /* [in] */ BSTR eventTypeArg,
            /* [in] */ BOOL canBubbleArg,
            /* [in] */ BOOL cancelableArg);
        
        END_INTERFACE
    } IDOMEventVtbl;

    interface IDOMEvent
    {
        CONST_VTBL struct IDOMEventVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMEvent_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMEvent_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMEvent_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMEvent_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMEvent_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMEvent_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMEvent_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMEvent_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMEvent_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMEvent_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMEvent_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMEvent_type(This,result)	\
    ( (This)->lpVtbl -> type(This,result) ) 

#define IDOMEvent_target(This,result)	\
    ( (This)->lpVtbl -> target(This,result) ) 

#define IDOMEvent_currentTarget(This,result)	\
    ( (This)->lpVtbl -> currentTarget(This,result) ) 

#define IDOMEvent_eventPhase(This,result)	\
    ( (This)->lpVtbl -> eventPhase(This,result) ) 

#define IDOMEvent_bubbles(This,result)	\
    ( (This)->lpVtbl -> bubbles(This,result) ) 

#define IDOMEvent_cancelable(This,result)	\
    ( (This)->lpVtbl -> cancelable(This,result) ) 

#define IDOMEvent_timeStamp(This,result)	\
    ( (This)->lpVtbl -> timeStamp(This,result) ) 

#define IDOMEvent_stopPropagation(This)	\
    ( (This)->lpVtbl -> stopPropagation(This) ) 

#define IDOMEvent_preventDefault(This)	\
    ( (This)->lpVtbl -> preventDefault(This) ) 

#define IDOMEvent_initEvent(This,eventTypeArg,canBubbleArg,cancelableArg)	\
    ( (This)->lpVtbl -> initEvent(This,eventTypeArg,canBubbleArg,cancelableArg) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMEvent_INTERFACE_DEFINED__ */


#ifndef __IDOMEventTarget_INTERFACE_DEFINED__
#define __IDOMEventTarget_INTERFACE_DEFINED__

/* interface IDOMEventTarget */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMEventTarget;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c7cf7d84-d755-40bc-b664-84bc79eff709")
    IDOMEventTarget : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE addEventListener( 
            /* [in] */ BSTR type,
            /* [in] */ IDOMEventListener *listener,
            /* [in] */ BOOL useCapture) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE removeEventListener( 
            /* [in] */ BSTR type,
            /* [in] */ IDOMEventListener *listener,
            /* [in] */ BOOL useCapture) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE dispatchEvent( 
            /* [in] */ IDOMEvent *event,
            /* [retval][out] */ BOOL *result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMEventTargetVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMEventTarget * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMEventTarget * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMEventTarget * This);
        
        HRESULT ( STDMETHODCALLTYPE *addEventListener )( 
            IDOMEventTarget * This,
            /* [in] */ BSTR type,
            /* [in] */ IDOMEventListener *listener,
            /* [in] */ BOOL useCapture);
        
        HRESULT ( STDMETHODCALLTYPE *removeEventListener )( 
            IDOMEventTarget * This,
            /* [in] */ BSTR type,
            /* [in] */ IDOMEventListener *listener,
            /* [in] */ BOOL useCapture);
        
        HRESULT ( STDMETHODCALLTYPE *dispatchEvent )( 
            IDOMEventTarget * This,
            /* [in] */ IDOMEvent *event,
            /* [retval][out] */ BOOL *result);
        
        END_INTERFACE
    } IDOMEventTargetVtbl;

    interface IDOMEventTarget
    {
        CONST_VTBL struct IDOMEventTargetVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMEventTarget_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMEventTarget_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMEventTarget_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMEventTarget_addEventListener(This,type,listener,useCapture)	\
    ( (This)->lpVtbl -> addEventListener(This,type,listener,useCapture) ) 

#define IDOMEventTarget_removeEventListener(This,type,listener,useCapture)	\
    ( (This)->lpVtbl -> removeEventListener(This,type,listener,useCapture) ) 

#define IDOMEventTarget_dispatchEvent(This,event,result)	\
    ( (This)->lpVtbl -> dispatchEvent(This,event,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMEventTarget_INTERFACE_DEFINED__ */


#ifndef __IDOMDocumentEvent_INTERFACE_DEFINED__
#define __IDOMDocumentEvent_INTERFACE_DEFINED__

/* interface IDOMDocumentEvent */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMDocumentEvent;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("55AAF192-68CD-409f-A551-89710DC7240A")
    IDOMDocumentEvent : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE createEvent( 
            /* [in] */ BSTR eventType,
            /* [retval][out] */ IDOMEvent **result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMDocumentEventVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMDocumentEvent * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMDocumentEvent * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMDocumentEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *createEvent )( 
            IDOMDocumentEvent * This,
            /* [in] */ BSTR eventType,
            /* [retval][out] */ IDOMEvent **result);
        
        END_INTERFACE
    } IDOMDocumentEventVtbl;

    interface IDOMDocumentEvent
    {
        CONST_VTBL struct IDOMDocumentEventVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMDocumentEvent_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMDocumentEvent_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMDocumentEvent_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMDocumentEvent_createEvent(This,eventType,result)	\
    ( (This)->lpVtbl -> createEvent(This,eventType,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMDocumentEvent_INTERFACE_DEFINED__ */


#ifndef __IDOMUIEvent_INTERFACE_DEFINED__
#define __IDOMUIEvent_INTERFACE_DEFINED__

/* interface IDOMUIEvent */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMUIEvent;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b928261d-7c9e-4156-af71-6f698bd97788")
    IDOMUIEvent : public IDOMEvent
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE view( 
            /* [retval][out] */ IDOMWindow **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE detail( 
            /* [retval][out] */ long *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE initUIEvent( 
            /* [in] */ BSTR type,
            /* [in] */ BOOL canBubble,
            /* [in] */ BOOL cancelable,
            /* [in] */ IDOMWindow *view,
            /* [in] */ long detail) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE keyCode( 
            /* [retval][out] */ long *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE charCode( 
            /* [retval][out] */ long *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE layerX( 
            /* [retval][out] */ long *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE layerY( 
            /* [retval][out] */ long *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE pageX( 
            /* [retval][out] */ long *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE pageY( 
            /* [retval][out] */ long *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE which( 
            /* [retval][out] */ long *result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMUIEventVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMUIEvent * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMUIEvent * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMUIEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMUIEvent * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMUIEvent * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMUIEvent * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMUIEvent * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMUIEvent * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMUIEvent * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMUIEvent * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMUIEvent * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *type )( 
            IDOMUIEvent * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *target )( 
            IDOMUIEvent * This,
            /* [retval][out] */ IDOMEventTarget **result);
        
        HRESULT ( STDMETHODCALLTYPE *currentTarget )( 
            IDOMUIEvent * This,
            /* [retval][out] */ IDOMEventTarget **result);
        
        HRESULT ( STDMETHODCALLTYPE *eventPhase )( 
            IDOMUIEvent * This,
            /* [retval][out] */ unsigned short *result);
        
        HRESULT ( STDMETHODCALLTYPE *bubbles )( 
            IDOMUIEvent * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *cancelable )( 
            IDOMUIEvent * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *timeStamp )( 
            IDOMUIEvent * This,
            /* [retval][out] */ DOMTimeStamp *result);
        
        HRESULT ( STDMETHODCALLTYPE *stopPropagation )( 
            IDOMUIEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *preventDefault )( 
            IDOMUIEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *initEvent )( 
            IDOMUIEvent * This,
            /* [in] */ BSTR eventTypeArg,
            /* [in] */ BOOL canBubbleArg,
            /* [in] */ BOOL cancelableArg);
        
        HRESULT ( STDMETHODCALLTYPE *view )( 
            IDOMUIEvent * This,
            /* [retval][out] */ IDOMWindow **result);
        
        HRESULT ( STDMETHODCALLTYPE *detail )( 
            IDOMUIEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *initUIEvent )( 
            IDOMUIEvent * This,
            /* [in] */ BSTR type,
            /* [in] */ BOOL canBubble,
            /* [in] */ BOOL cancelable,
            /* [in] */ IDOMWindow *view,
            /* [in] */ long detail);
        
        HRESULT ( STDMETHODCALLTYPE *keyCode )( 
            IDOMUIEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *charCode )( 
            IDOMUIEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *layerX )( 
            IDOMUIEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *layerY )( 
            IDOMUIEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *pageX )( 
            IDOMUIEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *pageY )( 
            IDOMUIEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *which )( 
            IDOMUIEvent * This,
            /* [retval][out] */ long *result);
        
        END_INTERFACE
    } IDOMUIEventVtbl;

    interface IDOMUIEvent
    {
        CONST_VTBL struct IDOMUIEventVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMUIEvent_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMUIEvent_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMUIEvent_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMUIEvent_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMUIEvent_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMUIEvent_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMUIEvent_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMUIEvent_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMUIEvent_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMUIEvent_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMUIEvent_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMUIEvent_type(This,result)	\
    ( (This)->lpVtbl -> type(This,result) ) 

#define IDOMUIEvent_target(This,result)	\
    ( (This)->lpVtbl -> target(This,result) ) 

#define IDOMUIEvent_currentTarget(This,result)	\
    ( (This)->lpVtbl -> currentTarget(This,result) ) 

#define IDOMUIEvent_eventPhase(This,result)	\
    ( (This)->lpVtbl -> eventPhase(This,result) ) 

#define IDOMUIEvent_bubbles(This,result)	\
    ( (This)->lpVtbl -> bubbles(This,result) ) 

#define IDOMUIEvent_cancelable(This,result)	\
    ( (This)->lpVtbl -> cancelable(This,result) ) 

#define IDOMUIEvent_timeStamp(This,result)	\
    ( (This)->lpVtbl -> timeStamp(This,result) ) 

#define IDOMUIEvent_stopPropagation(This)	\
    ( (This)->lpVtbl -> stopPropagation(This) ) 

#define IDOMUIEvent_preventDefault(This)	\
    ( (This)->lpVtbl -> preventDefault(This) ) 

#define IDOMUIEvent_initEvent(This,eventTypeArg,canBubbleArg,cancelableArg)	\
    ( (This)->lpVtbl -> initEvent(This,eventTypeArg,canBubbleArg,cancelableArg) ) 


#define IDOMUIEvent_view(This,result)	\
    ( (This)->lpVtbl -> view(This,result) ) 

#define IDOMUIEvent_detail(This,result)	\
    ( (This)->lpVtbl -> detail(This,result) ) 

#define IDOMUIEvent_initUIEvent(This,type,canBubble,cancelable,view,detail)	\
    ( (This)->lpVtbl -> initUIEvent(This,type,canBubble,cancelable,view,detail) ) 

#define IDOMUIEvent_keyCode(This,result)	\
    ( (This)->lpVtbl -> keyCode(This,result) ) 

#define IDOMUIEvent_charCode(This,result)	\
    ( (This)->lpVtbl -> charCode(This,result) ) 

#define IDOMUIEvent_layerX(This,result)	\
    ( (This)->lpVtbl -> layerX(This,result) ) 

#define IDOMUIEvent_layerY(This,result)	\
    ( (This)->lpVtbl -> layerY(This,result) ) 

#define IDOMUIEvent_pageX(This,result)	\
    ( (This)->lpVtbl -> pageX(This,result) ) 

#define IDOMUIEvent_pageY(This,result)	\
    ( (This)->lpVtbl -> pageY(This,result) ) 

#define IDOMUIEvent_which(This,result)	\
    ( (This)->lpVtbl -> which(This,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMUIEvent_INTERFACE_DEFINED__ */


#ifndef __IDOMKeyboardEvent_INTERFACE_DEFINED__
#define __IDOMKeyboardEvent_INTERFACE_DEFINED__

/* interface IDOMKeyboardEvent */
/* [unique][uuid][oleautomation][object] */ 

#define	DOMKEYBOARDEVENT_KEY_LOCATION_STANDARD	( 0 )

#define	DOMKEYBOARDEVENT_KEY_LOCATION_LEFT	( 0x1 )

#define	DOMKEYBOARDEVENT_KEY_LOCATION_RIGHT	( 0x2 )

#define	DOMKEYBOARDEVENT_KEY_LOCATION_NUMPAD	( 0x3 )


EXTERN_C const IID IID_IDOMKeyboardEvent;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("76bc4e46-67df-40d3-89b0-a94dcc2ed507")
    IDOMKeyboardEvent : public IDOMUIEvent
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE keyIdentifier( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE keyLocation( 
            /* [retval][out] */ unsigned long *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ctrlKey( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE shiftKey( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE altKey( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE metaKey( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE altGraphKey( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getModifierState( 
            /* [in] */ BSTR keyIdentifierArg,
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE initKeyboardEvent( 
            /* [in] */ BSTR type,
            /* [in] */ BOOL canBubble,
            /* [in] */ BOOL cancelable,
            /* [in] */ IDOMWindow *view,
            /* [in] */ BSTR keyIdentifier,
            /* [in] */ unsigned long keyLocation,
            /* [in] */ BOOL ctrlKey,
            /* [in] */ BOOL altKey,
            /* [in] */ BOOL shiftKey,
            /* [in] */ BOOL metaKey,
            /* [in] */ BOOL graphKey) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMKeyboardEventVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMKeyboardEvent * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMKeyboardEvent * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMKeyboardEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMKeyboardEvent * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMKeyboardEvent * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMKeyboardEvent * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMKeyboardEvent * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMKeyboardEvent * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMKeyboardEvent * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMKeyboardEvent * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMKeyboardEvent * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *type )( 
            IDOMKeyboardEvent * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *target )( 
            IDOMKeyboardEvent * This,
            /* [retval][out] */ IDOMEventTarget **result);
        
        HRESULT ( STDMETHODCALLTYPE *currentTarget )( 
            IDOMKeyboardEvent * This,
            /* [retval][out] */ IDOMEventTarget **result);
        
        HRESULT ( STDMETHODCALLTYPE *eventPhase )( 
            IDOMKeyboardEvent * This,
            /* [retval][out] */ unsigned short *result);
        
        HRESULT ( STDMETHODCALLTYPE *bubbles )( 
            IDOMKeyboardEvent * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *cancelable )( 
            IDOMKeyboardEvent * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *timeStamp )( 
            IDOMKeyboardEvent * This,
            /* [retval][out] */ DOMTimeStamp *result);
        
        HRESULT ( STDMETHODCALLTYPE *stopPropagation )( 
            IDOMKeyboardEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *preventDefault )( 
            IDOMKeyboardEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *initEvent )( 
            IDOMKeyboardEvent * This,
            /* [in] */ BSTR eventTypeArg,
            /* [in] */ BOOL canBubbleArg,
            /* [in] */ BOOL cancelableArg);
        
        HRESULT ( STDMETHODCALLTYPE *view )( 
            IDOMKeyboardEvent * This,
            /* [retval][out] */ IDOMWindow **result);
        
        HRESULT ( STDMETHODCALLTYPE *detail )( 
            IDOMKeyboardEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *initUIEvent )( 
            IDOMKeyboardEvent * This,
            /* [in] */ BSTR type,
            /* [in] */ BOOL canBubble,
            /* [in] */ BOOL cancelable,
            /* [in] */ IDOMWindow *view,
            /* [in] */ long detail);
        
        HRESULT ( STDMETHODCALLTYPE *keyCode )( 
            IDOMKeyboardEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *charCode )( 
            IDOMKeyboardEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *layerX )( 
            IDOMKeyboardEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *layerY )( 
            IDOMKeyboardEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *pageX )( 
            IDOMKeyboardEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *pageY )( 
            IDOMKeyboardEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *which )( 
            IDOMKeyboardEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *keyIdentifier )( 
            IDOMKeyboardEvent * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *keyLocation )( 
            IDOMKeyboardEvent * This,
            /* [retval][out] */ unsigned long *result);
        
        HRESULT ( STDMETHODCALLTYPE *ctrlKey )( 
            IDOMKeyboardEvent * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *shiftKey )( 
            IDOMKeyboardEvent * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *altKey )( 
            IDOMKeyboardEvent * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *metaKey )( 
            IDOMKeyboardEvent * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *altGraphKey )( 
            IDOMKeyboardEvent * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *getModifierState )( 
            IDOMKeyboardEvent * This,
            /* [in] */ BSTR keyIdentifierArg,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *initKeyboardEvent )( 
            IDOMKeyboardEvent * This,
            /* [in] */ BSTR type,
            /* [in] */ BOOL canBubble,
            /* [in] */ BOOL cancelable,
            /* [in] */ IDOMWindow *view,
            /* [in] */ BSTR keyIdentifier,
            /* [in] */ unsigned long keyLocation,
            /* [in] */ BOOL ctrlKey,
            /* [in] */ BOOL altKey,
            /* [in] */ BOOL shiftKey,
            /* [in] */ BOOL metaKey,
            /* [in] */ BOOL graphKey);
        
        END_INTERFACE
    } IDOMKeyboardEventVtbl;

    interface IDOMKeyboardEvent
    {
        CONST_VTBL struct IDOMKeyboardEventVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMKeyboardEvent_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMKeyboardEvent_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMKeyboardEvent_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMKeyboardEvent_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMKeyboardEvent_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMKeyboardEvent_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMKeyboardEvent_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMKeyboardEvent_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMKeyboardEvent_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMKeyboardEvent_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMKeyboardEvent_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMKeyboardEvent_type(This,result)	\
    ( (This)->lpVtbl -> type(This,result) ) 

#define IDOMKeyboardEvent_target(This,result)	\
    ( (This)->lpVtbl -> target(This,result) ) 

#define IDOMKeyboardEvent_currentTarget(This,result)	\
    ( (This)->lpVtbl -> currentTarget(This,result) ) 

#define IDOMKeyboardEvent_eventPhase(This,result)	\
    ( (This)->lpVtbl -> eventPhase(This,result) ) 

#define IDOMKeyboardEvent_bubbles(This,result)	\
    ( (This)->lpVtbl -> bubbles(This,result) ) 

#define IDOMKeyboardEvent_cancelable(This,result)	\
    ( (This)->lpVtbl -> cancelable(This,result) ) 

#define IDOMKeyboardEvent_timeStamp(This,result)	\
    ( (This)->lpVtbl -> timeStamp(This,result) ) 

#define IDOMKeyboardEvent_stopPropagation(This)	\
    ( (This)->lpVtbl -> stopPropagation(This) ) 

#define IDOMKeyboardEvent_preventDefault(This)	\
    ( (This)->lpVtbl -> preventDefault(This) ) 

#define IDOMKeyboardEvent_initEvent(This,eventTypeArg,canBubbleArg,cancelableArg)	\
    ( (This)->lpVtbl -> initEvent(This,eventTypeArg,canBubbleArg,cancelableArg) ) 


#define IDOMKeyboardEvent_view(This,result)	\
    ( (This)->lpVtbl -> view(This,result) ) 

#define IDOMKeyboardEvent_detail(This,result)	\
    ( (This)->lpVtbl -> detail(This,result) ) 

#define IDOMKeyboardEvent_initUIEvent(This,type,canBubble,cancelable,view,detail)	\
    ( (This)->lpVtbl -> initUIEvent(This,type,canBubble,cancelable,view,detail) ) 

#define IDOMKeyboardEvent_keyCode(This,result)	\
    ( (This)->lpVtbl -> keyCode(This,result) ) 

#define IDOMKeyboardEvent_charCode(This,result)	\
    ( (This)->lpVtbl -> charCode(This,result) ) 

#define IDOMKeyboardEvent_layerX(This,result)	\
    ( (This)->lpVtbl -> layerX(This,result) ) 

#define IDOMKeyboardEvent_layerY(This,result)	\
    ( (This)->lpVtbl -> layerY(This,result) ) 

#define IDOMKeyboardEvent_pageX(This,result)	\
    ( (This)->lpVtbl -> pageX(This,result) ) 

#define IDOMKeyboardEvent_pageY(This,result)	\
    ( (This)->lpVtbl -> pageY(This,result) ) 

#define IDOMKeyboardEvent_which(This,result)	\
    ( (This)->lpVtbl -> which(This,result) ) 


#define IDOMKeyboardEvent_keyIdentifier(This,result)	\
    ( (This)->lpVtbl -> keyIdentifier(This,result) ) 

#define IDOMKeyboardEvent_keyLocation(This,result)	\
    ( (This)->lpVtbl -> keyLocation(This,result) ) 

#define IDOMKeyboardEvent_ctrlKey(This,result)	\
    ( (This)->lpVtbl -> ctrlKey(This,result) ) 

#define IDOMKeyboardEvent_shiftKey(This,result)	\
    ( (This)->lpVtbl -> shiftKey(This,result) ) 

#define IDOMKeyboardEvent_altKey(This,result)	\
    ( (This)->lpVtbl -> altKey(This,result) ) 

#define IDOMKeyboardEvent_metaKey(This,result)	\
    ( (This)->lpVtbl -> metaKey(This,result) ) 

#define IDOMKeyboardEvent_altGraphKey(This,result)	\
    ( (This)->lpVtbl -> altGraphKey(This,result) ) 

#define IDOMKeyboardEvent_getModifierState(This,keyIdentifierArg,result)	\
    ( (This)->lpVtbl -> getModifierState(This,keyIdentifierArg,result) ) 

#define IDOMKeyboardEvent_initKeyboardEvent(This,type,canBubble,cancelable,view,keyIdentifier,keyLocation,ctrlKey,altKey,shiftKey,metaKey,graphKey)	\
    ( (This)->lpVtbl -> initKeyboardEvent(This,type,canBubble,cancelable,view,keyIdentifier,keyLocation,ctrlKey,altKey,shiftKey,metaKey,graphKey) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMKeyboardEvent_INTERFACE_DEFINED__ */


#ifndef __IDOMMouseEvent_INTERFACE_DEFINED__
#define __IDOMMouseEvent_INTERFACE_DEFINED__

/* interface IDOMMouseEvent */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMMouseEvent;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("bdd97151-5f6a-4ba4-a902-9b008392eb54")
    IDOMMouseEvent : public IDOMUIEvent
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE screenX( 
            /* [retval][out] */ long *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE screenY( 
            /* [retval][out] */ long *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE clientX( 
            /* [retval][out] */ long *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE clientY( 
            /* [retval][out] */ long *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ctrlKey( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE shiftKey( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE altKey( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE metaKey( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE button( 
            /* [retval][out] */ unsigned short *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE relatedTarget( 
            /* [retval][out] */ IDOMEventTarget **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE initMouseEvent( 
            /* [in] */ BSTR type,
            /* [in] */ BOOL canBubble,
            /* [in] */ BOOL cancelable,
            /* [in] */ IDOMWindow *view,
            /* [in] */ long detail,
            /* [in] */ long screenX,
            /* [in] */ long screenY,
            /* [in] */ long clientX,
            /* [in] */ long clientY,
            /* [in] */ BOOL ctrlKey,
            /* [in] */ BOOL altKey,
            /* [in] */ BOOL shiftKey,
            /* [in] */ BOOL metaKey,
            /* [in] */ unsigned short button,
            /* [in] */ IDOMEventTarget *relatedTarget) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE offsetX( 
            /* [retval][out] */ long *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE offsetY( 
            /* [retval][out] */ long *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE x( 
            /* [retval][out] */ long *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE y( 
            /* [retval][out] */ long *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE fromElement( 
            /* [retval][out] */ IDOMNode **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE toElement( 
            /* [retval][out] */ IDOMNode **result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMMouseEventVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMMouseEvent * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMMouseEvent * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMMouseEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMMouseEvent * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMMouseEvent * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMMouseEvent * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMMouseEvent * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMMouseEvent * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMMouseEvent * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMMouseEvent * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMMouseEvent * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *type )( 
            IDOMMouseEvent * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *target )( 
            IDOMMouseEvent * This,
            /* [retval][out] */ IDOMEventTarget **result);
        
        HRESULT ( STDMETHODCALLTYPE *currentTarget )( 
            IDOMMouseEvent * This,
            /* [retval][out] */ IDOMEventTarget **result);
        
        HRESULT ( STDMETHODCALLTYPE *eventPhase )( 
            IDOMMouseEvent * This,
            /* [retval][out] */ unsigned short *result);
        
        HRESULT ( STDMETHODCALLTYPE *bubbles )( 
            IDOMMouseEvent * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *cancelable )( 
            IDOMMouseEvent * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *timeStamp )( 
            IDOMMouseEvent * This,
            /* [retval][out] */ DOMTimeStamp *result);
        
        HRESULT ( STDMETHODCALLTYPE *stopPropagation )( 
            IDOMMouseEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *preventDefault )( 
            IDOMMouseEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *initEvent )( 
            IDOMMouseEvent * This,
            /* [in] */ BSTR eventTypeArg,
            /* [in] */ BOOL canBubbleArg,
            /* [in] */ BOOL cancelableArg);
        
        HRESULT ( STDMETHODCALLTYPE *view )( 
            IDOMMouseEvent * This,
            /* [retval][out] */ IDOMWindow **result);
        
        HRESULT ( STDMETHODCALLTYPE *detail )( 
            IDOMMouseEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *initUIEvent )( 
            IDOMMouseEvent * This,
            /* [in] */ BSTR type,
            /* [in] */ BOOL canBubble,
            /* [in] */ BOOL cancelable,
            /* [in] */ IDOMWindow *view,
            /* [in] */ long detail);
        
        HRESULT ( STDMETHODCALLTYPE *keyCode )( 
            IDOMMouseEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *charCode )( 
            IDOMMouseEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *layerX )( 
            IDOMMouseEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *layerY )( 
            IDOMMouseEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *pageX )( 
            IDOMMouseEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *pageY )( 
            IDOMMouseEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *which )( 
            IDOMMouseEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *screenX )( 
            IDOMMouseEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *screenY )( 
            IDOMMouseEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *clientX )( 
            IDOMMouseEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *clientY )( 
            IDOMMouseEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *ctrlKey )( 
            IDOMMouseEvent * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *shiftKey )( 
            IDOMMouseEvent * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *altKey )( 
            IDOMMouseEvent * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *metaKey )( 
            IDOMMouseEvent * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *button )( 
            IDOMMouseEvent * This,
            /* [retval][out] */ unsigned short *result);
        
        HRESULT ( STDMETHODCALLTYPE *relatedTarget )( 
            IDOMMouseEvent * This,
            /* [retval][out] */ IDOMEventTarget **result);
        
        HRESULT ( STDMETHODCALLTYPE *initMouseEvent )( 
            IDOMMouseEvent * This,
            /* [in] */ BSTR type,
            /* [in] */ BOOL canBubble,
            /* [in] */ BOOL cancelable,
            /* [in] */ IDOMWindow *view,
            /* [in] */ long detail,
            /* [in] */ long screenX,
            /* [in] */ long screenY,
            /* [in] */ long clientX,
            /* [in] */ long clientY,
            /* [in] */ BOOL ctrlKey,
            /* [in] */ BOOL altKey,
            /* [in] */ BOOL shiftKey,
            /* [in] */ BOOL metaKey,
            /* [in] */ unsigned short button,
            /* [in] */ IDOMEventTarget *relatedTarget);
        
        HRESULT ( STDMETHODCALLTYPE *offsetX )( 
            IDOMMouseEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *offsetY )( 
            IDOMMouseEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *x )( 
            IDOMMouseEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *y )( 
            IDOMMouseEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *fromElement )( 
            IDOMMouseEvent * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *toElement )( 
            IDOMMouseEvent * This,
            /* [retval][out] */ IDOMNode **result);
        
        END_INTERFACE
    } IDOMMouseEventVtbl;

    interface IDOMMouseEvent
    {
        CONST_VTBL struct IDOMMouseEventVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMMouseEvent_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMMouseEvent_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMMouseEvent_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMMouseEvent_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMMouseEvent_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMMouseEvent_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMMouseEvent_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMMouseEvent_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMMouseEvent_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMMouseEvent_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMMouseEvent_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMMouseEvent_type(This,result)	\
    ( (This)->lpVtbl -> type(This,result) ) 

#define IDOMMouseEvent_target(This,result)	\
    ( (This)->lpVtbl -> target(This,result) ) 

#define IDOMMouseEvent_currentTarget(This,result)	\
    ( (This)->lpVtbl -> currentTarget(This,result) ) 

#define IDOMMouseEvent_eventPhase(This,result)	\
    ( (This)->lpVtbl -> eventPhase(This,result) ) 

#define IDOMMouseEvent_bubbles(This,result)	\
    ( (This)->lpVtbl -> bubbles(This,result) ) 

#define IDOMMouseEvent_cancelable(This,result)	\
    ( (This)->lpVtbl -> cancelable(This,result) ) 

#define IDOMMouseEvent_timeStamp(This,result)	\
    ( (This)->lpVtbl -> timeStamp(This,result) ) 

#define IDOMMouseEvent_stopPropagation(This)	\
    ( (This)->lpVtbl -> stopPropagation(This) ) 

#define IDOMMouseEvent_preventDefault(This)	\
    ( (This)->lpVtbl -> preventDefault(This) ) 

#define IDOMMouseEvent_initEvent(This,eventTypeArg,canBubbleArg,cancelableArg)	\
    ( (This)->lpVtbl -> initEvent(This,eventTypeArg,canBubbleArg,cancelableArg) ) 


#define IDOMMouseEvent_view(This,result)	\
    ( (This)->lpVtbl -> view(This,result) ) 

#define IDOMMouseEvent_detail(This,result)	\
    ( (This)->lpVtbl -> detail(This,result) ) 

#define IDOMMouseEvent_initUIEvent(This,type,canBubble,cancelable,view,detail)	\
    ( (This)->lpVtbl -> initUIEvent(This,type,canBubble,cancelable,view,detail) ) 

#define IDOMMouseEvent_keyCode(This,result)	\
    ( (This)->lpVtbl -> keyCode(This,result) ) 

#define IDOMMouseEvent_charCode(This,result)	\
    ( (This)->lpVtbl -> charCode(This,result) ) 

#define IDOMMouseEvent_layerX(This,result)	\
    ( (This)->lpVtbl -> layerX(This,result) ) 

#define IDOMMouseEvent_layerY(This,result)	\
    ( (This)->lpVtbl -> layerY(This,result) ) 

#define IDOMMouseEvent_pageX(This,result)	\
    ( (This)->lpVtbl -> pageX(This,result) ) 

#define IDOMMouseEvent_pageY(This,result)	\
    ( (This)->lpVtbl -> pageY(This,result) ) 

#define IDOMMouseEvent_which(This,result)	\
    ( (This)->lpVtbl -> which(This,result) ) 


#define IDOMMouseEvent_screenX(This,result)	\
    ( (This)->lpVtbl -> screenX(This,result) ) 

#define IDOMMouseEvent_screenY(This,result)	\
    ( (This)->lpVtbl -> screenY(This,result) ) 

#define IDOMMouseEvent_clientX(This,result)	\
    ( (This)->lpVtbl -> clientX(This,result) ) 

#define IDOMMouseEvent_clientY(This,result)	\
    ( (This)->lpVtbl -> clientY(This,result) ) 

#define IDOMMouseEvent_ctrlKey(This,result)	\
    ( (This)->lpVtbl -> ctrlKey(This,result) ) 

#define IDOMMouseEvent_shiftKey(This,result)	\
    ( (This)->lpVtbl -> shiftKey(This,result) ) 

#define IDOMMouseEvent_altKey(This,result)	\
    ( (This)->lpVtbl -> altKey(This,result) ) 

#define IDOMMouseEvent_metaKey(This,result)	\
    ( (This)->lpVtbl -> metaKey(This,result) ) 

#define IDOMMouseEvent_button(This,result)	\
    ( (This)->lpVtbl -> button(This,result) ) 

#define IDOMMouseEvent_relatedTarget(This,result)	\
    ( (This)->lpVtbl -> relatedTarget(This,result) ) 

#define IDOMMouseEvent_initMouseEvent(This,type,canBubble,cancelable,view,detail,screenX,screenY,clientX,clientY,ctrlKey,altKey,shiftKey,metaKey,button,relatedTarget)	\
    ( (This)->lpVtbl -> initMouseEvent(This,type,canBubble,cancelable,view,detail,screenX,screenY,clientX,clientY,ctrlKey,altKey,shiftKey,metaKey,button,relatedTarget) ) 

#define IDOMMouseEvent_offsetX(This,result)	\
    ( (This)->lpVtbl -> offsetX(This,result) ) 

#define IDOMMouseEvent_offsetY(This,result)	\
    ( (This)->lpVtbl -> offsetY(This,result) ) 

#define IDOMMouseEvent_x(This,result)	\
    ( (This)->lpVtbl -> x(This,result) ) 

#define IDOMMouseEvent_y(This,result)	\
    ( (This)->lpVtbl -> y(This,result) ) 

#define IDOMMouseEvent_fromElement(This,result)	\
    ( (This)->lpVtbl -> fromElement(This,result) ) 

#define IDOMMouseEvent_toElement(This,result)	\
    ( (This)->lpVtbl -> toElement(This,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMMouseEvent_INTERFACE_DEFINED__ */


#ifndef __IDOMMutationEvent_INTERFACE_DEFINED__
#define __IDOMMutationEvent_INTERFACE_DEFINED__

/* interface IDOMMutationEvent */
/* [unique][uuid][oleautomation][object] */ 

#define	DOMMUTATIONEVENT_MODIFICATION	( 1 )

#define	DOMMUTATIONEVENT_ADDITION	( 2 )

#define	DOMMUTATIONEVENT_REMOVAL	( 3 )


EXTERN_C const IID IID_IDOMMutationEvent;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6345d228-ea67-48ee-93c8-ff6e9c6356e9")
    IDOMMutationEvent : public IDOMEvent
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE relatedNode( 
            /* [retval][out] */ IDOMNode **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE prevValue( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE newValue( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE attrName( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE attrChange( 
            /* [retval][out] */ unsigned short *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE initMutationEvent( 
            /* [in] */ BSTR type,
            /* [in] */ BOOL canBubble,
            /* [in] */ BOOL cancelable,
            /* [in] */ IDOMNode *relatedNode,
            /* [in] */ BSTR prevValue,
            /* [in] */ BSTR newValue,
            /* [in] */ BSTR attrName,
            /* [in] */ unsigned short attrChange) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMMutationEventVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMMutationEvent * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMMutationEvent * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMMutationEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMMutationEvent * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMMutationEvent * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMMutationEvent * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMMutationEvent * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMMutationEvent * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMMutationEvent * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMMutationEvent * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMMutationEvent * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *type )( 
            IDOMMutationEvent * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *target )( 
            IDOMMutationEvent * This,
            /* [retval][out] */ IDOMEventTarget **result);
        
        HRESULT ( STDMETHODCALLTYPE *currentTarget )( 
            IDOMMutationEvent * This,
            /* [retval][out] */ IDOMEventTarget **result);
        
        HRESULT ( STDMETHODCALLTYPE *eventPhase )( 
            IDOMMutationEvent * This,
            /* [retval][out] */ unsigned short *result);
        
        HRESULT ( STDMETHODCALLTYPE *bubbles )( 
            IDOMMutationEvent * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *cancelable )( 
            IDOMMutationEvent * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *timeStamp )( 
            IDOMMutationEvent * This,
            /* [retval][out] */ DOMTimeStamp *result);
        
        HRESULT ( STDMETHODCALLTYPE *stopPropagation )( 
            IDOMMutationEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *preventDefault )( 
            IDOMMutationEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *initEvent )( 
            IDOMMutationEvent * This,
            /* [in] */ BSTR eventTypeArg,
            /* [in] */ BOOL canBubbleArg,
            /* [in] */ BOOL cancelableArg);
        
        HRESULT ( STDMETHODCALLTYPE *relatedNode )( 
            IDOMMutationEvent * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *prevValue )( 
            IDOMMutationEvent * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *newValue )( 
            IDOMMutationEvent * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *attrName )( 
            IDOMMutationEvent * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *attrChange )( 
            IDOMMutationEvent * This,
            /* [retval][out] */ unsigned short *result);
        
        HRESULT ( STDMETHODCALLTYPE *initMutationEvent )( 
            IDOMMutationEvent * This,
            /* [in] */ BSTR type,
            /* [in] */ BOOL canBubble,
            /* [in] */ BOOL cancelable,
            /* [in] */ IDOMNode *relatedNode,
            /* [in] */ BSTR prevValue,
            /* [in] */ BSTR newValue,
            /* [in] */ BSTR attrName,
            /* [in] */ unsigned short attrChange);
        
        END_INTERFACE
    } IDOMMutationEventVtbl;

    interface IDOMMutationEvent
    {
        CONST_VTBL struct IDOMMutationEventVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMMutationEvent_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMMutationEvent_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMMutationEvent_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMMutationEvent_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMMutationEvent_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMMutationEvent_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMMutationEvent_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMMutationEvent_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMMutationEvent_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMMutationEvent_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMMutationEvent_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMMutationEvent_type(This,result)	\
    ( (This)->lpVtbl -> type(This,result) ) 

#define IDOMMutationEvent_target(This,result)	\
    ( (This)->lpVtbl -> target(This,result) ) 

#define IDOMMutationEvent_currentTarget(This,result)	\
    ( (This)->lpVtbl -> currentTarget(This,result) ) 

#define IDOMMutationEvent_eventPhase(This,result)	\
    ( (This)->lpVtbl -> eventPhase(This,result) ) 

#define IDOMMutationEvent_bubbles(This,result)	\
    ( (This)->lpVtbl -> bubbles(This,result) ) 

#define IDOMMutationEvent_cancelable(This,result)	\
    ( (This)->lpVtbl -> cancelable(This,result) ) 

#define IDOMMutationEvent_timeStamp(This,result)	\
    ( (This)->lpVtbl -> timeStamp(This,result) ) 

#define IDOMMutationEvent_stopPropagation(This)	\
    ( (This)->lpVtbl -> stopPropagation(This) ) 

#define IDOMMutationEvent_preventDefault(This)	\
    ( (This)->lpVtbl -> preventDefault(This) ) 

#define IDOMMutationEvent_initEvent(This,eventTypeArg,canBubbleArg,cancelableArg)	\
    ( (This)->lpVtbl -> initEvent(This,eventTypeArg,canBubbleArg,cancelableArg) ) 


#define IDOMMutationEvent_relatedNode(This,result)	\
    ( (This)->lpVtbl -> relatedNode(This,result) ) 

#define IDOMMutationEvent_prevValue(This,result)	\
    ( (This)->lpVtbl -> prevValue(This,result) ) 

#define IDOMMutationEvent_newValue(This,result)	\
    ( (This)->lpVtbl -> newValue(This,result) ) 

#define IDOMMutationEvent_attrName(This,result)	\
    ( (This)->lpVtbl -> attrName(This,result) ) 

#define IDOMMutationEvent_attrChange(This,result)	\
    ( (This)->lpVtbl -> attrChange(This,result) ) 

#define IDOMMutationEvent_initMutationEvent(This,type,canBubble,cancelable,relatedNode,prevValue,newValue,attrName,attrChange)	\
    ( (This)->lpVtbl -> initMutationEvent(This,type,canBubble,cancelable,relatedNode,prevValue,newValue,attrName,attrChange) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMMutationEvent_INTERFACE_DEFINED__ */


#ifndef __IDOMOverflowEvent_INTERFACE_DEFINED__
#define __IDOMOverflowEvent_INTERFACE_DEFINED__

/* interface IDOMOverflowEvent */
/* [unique][uuid][oleautomation][object] */ 

#define	DOMOVERFLOWEVENT_HORIZONTAL	( 0 )

#define	DOMOVERFLOWEVENT_VERTICAL	( 1 )

#define	DOMOVERFLOWEVENT_BOTH	( 2 )


EXTERN_C const IID IID_IDOMOverflowEvent;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6048369e-e444-401b-950d-c9daef9384d2")
    IDOMOverflowEvent : public IDOMEvent
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE orient( 
            /* [retval][out] */ unsigned short *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE horizontalOverflow( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE verticalOverflow( 
            /* [retval][out] */ BOOL *result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMOverflowEventVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMOverflowEvent * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMOverflowEvent * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMOverflowEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMOverflowEvent * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMOverflowEvent * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMOverflowEvent * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMOverflowEvent * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMOverflowEvent * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMOverflowEvent * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMOverflowEvent * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMOverflowEvent * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *type )( 
            IDOMOverflowEvent * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *target )( 
            IDOMOverflowEvent * This,
            /* [retval][out] */ IDOMEventTarget **result);
        
        HRESULT ( STDMETHODCALLTYPE *currentTarget )( 
            IDOMOverflowEvent * This,
            /* [retval][out] */ IDOMEventTarget **result);
        
        HRESULT ( STDMETHODCALLTYPE *eventPhase )( 
            IDOMOverflowEvent * This,
            /* [retval][out] */ unsigned short *result);
        
        HRESULT ( STDMETHODCALLTYPE *bubbles )( 
            IDOMOverflowEvent * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *cancelable )( 
            IDOMOverflowEvent * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *timeStamp )( 
            IDOMOverflowEvent * This,
            /* [retval][out] */ DOMTimeStamp *result);
        
        HRESULT ( STDMETHODCALLTYPE *stopPropagation )( 
            IDOMOverflowEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *preventDefault )( 
            IDOMOverflowEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *initEvent )( 
            IDOMOverflowEvent * This,
            /* [in] */ BSTR eventTypeArg,
            /* [in] */ BOOL canBubbleArg,
            /* [in] */ BOOL cancelableArg);
        
        HRESULT ( STDMETHODCALLTYPE *orient )( 
            IDOMOverflowEvent * This,
            /* [retval][out] */ unsigned short *result);
        
        HRESULT ( STDMETHODCALLTYPE *horizontalOverflow )( 
            IDOMOverflowEvent * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *verticalOverflow )( 
            IDOMOverflowEvent * This,
            /* [retval][out] */ BOOL *result);
        
        END_INTERFACE
    } IDOMOverflowEventVtbl;

    interface IDOMOverflowEvent
    {
        CONST_VTBL struct IDOMOverflowEventVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMOverflowEvent_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMOverflowEvent_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMOverflowEvent_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMOverflowEvent_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMOverflowEvent_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMOverflowEvent_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMOverflowEvent_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMOverflowEvent_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMOverflowEvent_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMOverflowEvent_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMOverflowEvent_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMOverflowEvent_type(This,result)	\
    ( (This)->lpVtbl -> type(This,result) ) 

#define IDOMOverflowEvent_target(This,result)	\
    ( (This)->lpVtbl -> target(This,result) ) 

#define IDOMOverflowEvent_currentTarget(This,result)	\
    ( (This)->lpVtbl -> currentTarget(This,result) ) 

#define IDOMOverflowEvent_eventPhase(This,result)	\
    ( (This)->lpVtbl -> eventPhase(This,result) ) 

#define IDOMOverflowEvent_bubbles(This,result)	\
    ( (This)->lpVtbl -> bubbles(This,result) ) 

#define IDOMOverflowEvent_cancelable(This,result)	\
    ( (This)->lpVtbl -> cancelable(This,result) ) 

#define IDOMOverflowEvent_timeStamp(This,result)	\
    ( (This)->lpVtbl -> timeStamp(This,result) ) 

#define IDOMOverflowEvent_stopPropagation(This)	\
    ( (This)->lpVtbl -> stopPropagation(This) ) 

#define IDOMOverflowEvent_preventDefault(This)	\
    ( (This)->lpVtbl -> preventDefault(This) ) 

#define IDOMOverflowEvent_initEvent(This,eventTypeArg,canBubbleArg,cancelableArg)	\
    ( (This)->lpVtbl -> initEvent(This,eventTypeArg,canBubbleArg,cancelableArg) ) 


#define IDOMOverflowEvent_orient(This,result)	\
    ( (This)->lpVtbl -> orient(This,result) ) 

#define IDOMOverflowEvent_horizontalOverflow(This,result)	\
    ( (This)->lpVtbl -> horizontalOverflow(This,result) ) 

#define IDOMOverflowEvent_verticalOverflow(This,result)	\
    ( (This)->lpVtbl -> verticalOverflow(This,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMOverflowEvent_INTERFACE_DEFINED__ */


#ifndef __IDOMWheelEvent_INTERFACE_DEFINED__
#define __IDOMWheelEvent_INTERFACE_DEFINED__

/* interface IDOMWheelEvent */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMWheelEvent;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5404e6d9-a2bb-4c74-8070-ce9d2599bd00")
    IDOMWheelEvent : public IDOMUIEvent
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE screenX( 
            /* [retval][out] */ long *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE screenY( 
            /* [retval][out] */ long *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE clientX( 
            /* [retval][out] */ long *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE clientY( 
            /* [retval][out] */ long *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ctrlKey( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE shiftKey( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE altKey( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE metaKey( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE wheelDelta( 
            /* [retval][out] */ long *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE wheelDeltaX( 
            /* [retval][out] */ long *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE wheelDeltaY( 
            /* [retval][out] */ long *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE offsetX( 
            /* [retval][out] */ long *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE offsetY( 
            /* [retval][out] */ long *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE x( 
            /* [retval][out] */ long *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE y( 
            /* [retval][out] */ long *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isHorizontal( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE initWheelEvent( 
            /* [in] */ long wheelDeltaX,
            /* [in] */ long wheelDeltaY,
            /* [in] */ IDOMWindow *view,
            /* [in] */ long screenX,
            /* [in] */ long screenY,
            /* [in] */ long clientX,
            /* [in] */ long clientY,
            /* [in] */ BOOL ctrlKey,
            /* [in] */ BOOL altKey,
            /* [in] */ BOOL shiftKey,
            /* [in] */ BOOL metaKey) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMWheelEventVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMWheelEvent * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMWheelEvent * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMWheelEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMWheelEvent * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMWheelEvent * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMWheelEvent * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMWheelEvent * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMWheelEvent * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMWheelEvent * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMWheelEvent * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMWheelEvent * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *type )( 
            IDOMWheelEvent * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *target )( 
            IDOMWheelEvent * This,
            /* [retval][out] */ IDOMEventTarget **result);
        
        HRESULT ( STDMETHODCALLTYPE *currentTarget )( 
            IDOMWheelEvent * This,
            /* [retval][out] */ IDOMEventTarget **result);
        
        HRESULT ( STDMETHODCALLTYPE *eventPhase )( 
            IDOMWheelEvent * This,
            /* [retval][out] */ unsigned short *result);
        
        HRESULT ( STDMETHODCALLTYPE *bubbles )( 
            IDOMWheelEvent * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *cancelable )( 
            IDOMWheelEvent * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *timeStamp )( 
            IDOMWheelEvent * This,
            /* [retval][out] */ DOMTimeStamp *result);
        
        HRESULT ( STDMETHODCALLTYPE *stopPropagation )( 
            IDOMWheelEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *preventDefault )( 
            IDOMWheelEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *initEvent )( 
            IDOMWheelEvent * This,
            /* [in] */ BSTR eventTypeArg,
            /* [in] */ BOOL canBubbleArg,
            /* [in] */ BOOL cancelableArg);
        
        HRESULT ( STDMETHODCALLTYPE *view )( 
            IDOMWheelEvent * This,
            /* [retval][out] */ IDOMWindow **result);
        
        HRESULT ( STDMETHODCALLTYPE *detail )( 
            IDOMWheelEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *initUIEvent )( 
            IDOMWheelEvent * This,
            /* [in] */ BSTR type,
            /* [in] */ BOOL canBubble,
            /* [in] */ BOOL cancelable,
            /* [in] */ IDOMWindow *view,
            /* [in] */ long detail);
        
        HRESULT ( STDMETHODCALLTYPE *keyCode )( 
            IDOMWheelEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *charCode )( 
            IDOMWheelEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *layerX )( 
            IDOMWheelEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *layerY )( 
            IDOMWheelEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *pageX )( 
            IDOMWheelEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *pageY )( 
            IDOMWheelEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *which )( 
            IDOMWheelEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *screenX )( 
            IDOMWheelEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *screenY )( 
            IDOMWheelEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *clientX )( 
            IDOMWheelEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *clientY )( 
            IDOMWheelEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *ctrlKey )( 
            IDOMWheelEvent * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *shiftKey )( 
            IDOMWheelEvent * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *altKey )( 
            IDOMWheelEvent * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *metaKey )( 
            IDOMWheelEvent * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *wheelDelta )( 
            IDOMWheelEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *wheelDeltaX )( 
            IDOMWheelEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *wheelDeltaY )( 
            IDOMWheelEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *offsetX )( 
            IDOMWheelEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *offsetY )( 
            IDOMWheelEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *x )( 
            IDOMWheelEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *y )( 
            IDOMWheelEvent * This,
            /* [retval][out] */ long *result);
        
        HRESULT ( STDMETHODCALLTYPE *isHorizontal )( 
            IDOMWheelEvent * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *initWheelEvent )( 
            IDOMWheelEvent * This,
            /* [in] */ long wheelDeltaX,
            /* [in] */ long wheelDeltaY,
            /* [in] */ IDOMWindow *view,
            /* [in] */ long screenX,
            /* [in] */ long screenY,
            /* [in] */ long clientX,
            /* [in] */ long clientY,
            /* [in] */ BOOL ctrlKey,
            /* [in] */ BOOL altKey,
            /* [in] */ BOOL shiftKey,
            /* [in] */ BOOL metaKey);
        
        END_INTERFACE
    } IDOMWheelEventVtbl;

    interface IDOMWheelEvent
    {
        CONST_VTBL struct IDOMWheelEventVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMWheelEvent_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMWheelEvent_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMWheelEvent_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMWheelEvent_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMWheelEvent_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMWheelEvent_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMWheelEvent_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMWheelEvent_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMWheelEvent_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMWheelEvent_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMWheelEvent_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMWheelEvent_type(This,result)	\
    ( (This)->lpVtbl -> type(This,result) ) 

#define IDOMWheelEvent_target(This,result)	\
    ( (This)->lpVtbl -> target(This,result) ) 

#define IDOMWheelEvent_currentTarget(This,result)	\
    ( (This)->lpVtbl -> currentTarget(This,result) ) 

#define IDOMWheelEvent_eventPhase(This,result)	\
    ( (This)->lpVtbl -> eventPhase(This,result) ) 

#define IDOMWheelEvent_bubbles(This,result)	\
    ( (This)->lpVtbl -> bubbles(This,result) ) 

#define IDOMWheelEvent_cancelable(This,result)	\
    ( (This)->lpVtbl -> cancelable(This,result) ) 

#define IDOMWheelEvent_timeStamp(This,result)	\
    ( (This)->lpVtbl -> timeStamp(This,result) ) 

#define IDOMWheelEvent_stopPropagation(This)	\
    ( (This)->lpVtbl -> stopPropagation(This) ) 

#define IDOMWheelEvent_preventDefault(This)	\
    ( (This)->lpVtbl -> preventDefault(This) ) 

#define IDOMWheelEvent_initEvent(This,eventTypeArg,canBubbleArg,cancelableArg)	\
    ( (This)->lpVtbl -> initEvent(This,eventTypeArg,canBubbleArg,cancelableArg) ) 


#define IDOMWheelEvent_view(This,result)	\
    ( (This)->lpVtbl -> view(This,result) ) 

#define IDOMWheelEvent_detail(This,result)	\
    ( (This)->lpVtbl -> detail(This,result) ) 

#define IDOMWheelEvent_initUIEvent(This,type,canBubble,cancelable,view,detail)	\
    ( (This)->lpVtbl -> initUIEvent(This,type,canBubble,cancelable,view,detail) ) 

#define IDOMWheelEvent_keyCode(This,result)	\
    ( (This)->lpVtbl -> keyCode(This,result) ) 

#define IDOMWheelEvent_charCode(This,result)	\
    ( (This)->lpVtbl -> charCode(This,result) ) 

#define IDOMWheelEvent_layerX(This,result)	\
    ( (This)->lpVtbl -> layerX(This,result) ) 

#define IDOMWheelEvent_layerY(This,result)	\
    ( (This)->lpVtbl -> layerY(This,result) ) 

#define IDOMWheelEvent_pageX(This,result)	\
    ( (This)->lpVtbl -> pageX(This,result) ) 

#define IDOMWheelEvent_pageY(This,result)	\
    ( (This)->lpVtbl -> pageY(This,result) ) 

#define IDOMWheelEvent_which(This,result)	\
    ( (This)->lpVtbl -> which(This,result) ) 


#define IDOMWheelEvent_screenX(This,result)	\
    ( (This)->lpVtbl -> screenX(This,result) ) 

#define IDOMWheelEvent_screenY(This,result)	\
    ( (This)->lpVtbl -> screenY(This,result) ) 

#define IDOMWheelEvent_clientX(This,result)	\
    ( (This)->lpVtbl -> clientX(This,result) ) 

#define IDOMWheelEvent_clientY(This,result)	\
    ( (This)->lpVtbl -> clientY(This,result) ) 

#define IDOMWheelEvent_ctrlKey(This,result)	\
    ( (This)->lpVtbl -> ctrlKey(This,result) ) 

#define IDOMWheelEvent_shiftKey(This,result)	\
    ( (This)->lpVtbl -> shiftKey(This,result) ) 

#define IDOMWheelEvent_altKey(This,result)	\
    ( (This)->lpVtbl -> altKey(This,result) ) 

#define IDOMWheelEvent_metaKey(This,result)	\
    ( (This)->lpVtbl -> metaKey(This,result) ) 

#define IDOMWheelEvent_wheelDelta(This,result)	\
    ( (This)->lpVtbl -> wheelDelta(This,result) ) 

#define IDOMWheelEvent_wheelDeltaX(This,result)	\
    ( (This)->lpVtbl -> wheelDeltaX(This,result) ) 

#define IDOMWheelEvent_wheelDeltaY(This,result)	\
    ( (This)->lpVtbl -> wheelDeltaY(This,result) ) 

#define IDOMWheelEvent_offsetX(This,result)	\
    ( (This)->lpVtbl -> offsetX(This,result) ) 

#define IDOMWheelEvent_offsetY(This,result)	\
    ( (This)->lpVtbl -> offsetY(This,result) ) 

#define IDOMWheelEvent_x(This,result)	\
    ( (This)->lpVtbl -> x(This,result) ) 

#define IDOMWheelEvent_y(This,result)	\
    ( (This)->lpVtbl -> y(This,result) ) 

#define IDOMWheelEvent_isHorizontal(This,result)	\
    ( (This)->lpVtbl -> isHorizontal(This,result) ) 

#define IDOMWheelEvent_initWheelEvent(This,wheelDeltaX,wheelDeltaY,view,screenX,screenY,clientX,clientY,ctrlKey,altKey,shiftKey,metaKey)	\
    ( (This)->lpVtbl -> initWheelEvent(This,wheelDeltaX,wheelDeltaY,view,screenX,screenY,clientX,clientY,ctrlKey,altKey,shiftKey,metaKey) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMWheelEvent_INTERFACE_DEFINED__ */


#ifndef __IDOMNodeExtensions_INTERFACE_DEFINED__
#define __IDOMNodeExtensions_INTERFACE_DEFINED__

/* interface IDOMNodeExtensions */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMNodeExtensions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("E6CEE774-41C6-4c1b-8832-798E49245E6B")
    IDOMNodeExtensions : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE boundingBox( 
            /* [retval][out] */ LPRECT rect) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE lineBoxRects( 
            /* [size_is][in] */ RECT *rects,
            /* [in] */ int cRects) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMNodeExtensionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMNodeExtensions * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMNodeExtensions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMNodeExtensions * This);
        
        HRESULT ( STDMETHODCALLTYPE *boundingBox )( 
            IDOMNodeExtensions * This,
            /* [retval][out] */ LPRECT rect);
        
        HRESULT ( STDMETHODCALLTYPE *lineBoxRects )( 
            IDOMNodeExtensions * This,
            /* [size_is][in] */ RECT *rects,
            /* [in] */ int cRects);
        
        END_INTERFACE
    } IDOMNodeExtensionsVtbl;

    interface IDOMNodeExtensions
    {
        CONST_VTBL struct IDOMNodeExtensionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMNodeExtensions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMNodeExtensions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMNodeExtensions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMNodeExtensions_boundingBox(This,rect)	\
    ( (This)->lpVtbl -> boundingBox(This,rect) ) 

#define IDOMNodeExtensions_lineBoxRects(This,rects,cRects)	\
    ( (This)->lpVtbl -> lineBoxRects(This,rects,cRects) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMNodeExtensions_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0037 */
/* [local] */ 












extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0037_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0037_v0_0_s_ifspec;

#ifndef __IDOMHTMLCollection_INTERFACE_DEFINED__
#define __IDOMHTMLCollection_INTERFACE_DEFINED__

/* interface IDOMHTMLCollection */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMHTMLCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("DD8E4E33-D1D4-48e7-BB23-6DC3D7CCEC42")
    IDOMHTMLCollection : public IDOMObject
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE length( 
            /* [retval][out] */ UINT *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE item( 
            /* [in] */ UINT index,
            /* [retval][out] */ IDOMNode **node) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE namedItem( 
            /* [in] */ BSTR name,
            /* [retval][out] */ IDOMNode **node) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMHTMLCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMHTMLCollection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMHTMLCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMHTMLCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMHTMLCollection * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMHTMLCollection * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMHTMLCollection * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMHTMLCollection * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMHTMLCollection * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMHTMLCollection * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMHTMLCollection * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMHTMLCollection * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *length )( 
            IDOMHTMLCollection * This,
            /* [retval][out] */ UINT *result);
        
        HRESULT ( STDMETHODCALLTYPE *item )( 
            IDOMHTMLCollection * This,
            /* [in] */ UINT index,
            /* [retval][out] */ IDOMNode **node);
        
        HRESULT ( STDMETHODCALLTYPE *namedItem )( 
            IDOMHTMLCollection * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ IDOMNode **node);
        
        END_INTERFACE
    } IDOMHTMLCollectionVtbl;

    interface IDOMHTMLCollection
    {
        CONST_VTBL struct IDOMHTMLCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMHTMLCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMHTMLCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMHTMLCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMHTMLCollection_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMHTMLCollection_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMHTMLCollection_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMHTMLCollection_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMHTMLCollection_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMHTMLCollection_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMHTMLCollection_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMHTMLCollection_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMHTMLCollection_length(This,result)	\
    ( (This)->lpVtbl -> length(This,result) ) 

#define IDOMHTMLCollection_item(This,index,node)	\
    ( (This)->lpVtbl -> item(This,index,node) ) 

#define IDOMHTMLCollection_namedItem(This,name,node)	\
    ( (This)->lpVtbl -> namedItem(This,name,node) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMHTMLCollection_INTERFACE_DEFINED__ */


#ifndef __IDOMHTMLOptionsCollection_INTERFACE_DEFINED__
#define __IDOMHTMLOptionsCollection_INTERFACE_DEFINED__

/* interface IDOMHTMLOptionsCollection */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMHTMLOptionsCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1AD98D99-163C-4c04-B6EE-85A3DD31F5C4")
    IDOMHTMLOptionsCollection : public IDOMObject
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE length( 
            /* [retval][out] */ unsigned int *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setLength( 
            /* [in] */ unsigned int length) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE item( 
            /* [in] */ unsigned int index,
            /* [retval][out] */ IDOMNode **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE namedItem( 
            /* [in] */ BSTR name,
            /* [retval][out] */ IDOMNode **result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMHTMLOptionsCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMHTMLOptionsCollection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMHTMLOptionsCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMHTMLOptionsCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMHTMLOptionsCollection * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMHTMLOptionsCollection * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMHTMLOptionsCollection * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMHTMLOptionsCollection * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMHTMLOptionsCollection * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMHTMLOptionsCollection * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMHTMLOptionsCollection * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMHTMLOptionsCollection * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *length )( 
            IDOMHTMLOptionsCollection * This,
            /* [retval][out] */ unsigned int *result);
        
        HRESULT ( STDMETHODCALLTYPE *setLength )( 
            IDOMHTMLOptionsCollection * This,
            /* [in] */ unsigned int length);
        
        HRESULT ( STDMETHODCALLTYPE *item )( 
            IDOMHTMLOptionsCollection * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *namedItem )( 
            IDOMHTMLOptionsCollection * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ IDOMNode **result);
        
        END_INTERFACE
    } IDOMHTMLOptionsCollectionVtbl;

    interface IDOMHTMLOptionsCollection
    {
        CONST_VTBL struct IDOMHTMLOptionsCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMHTMLOptionsCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMHTMLOptionsCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMHTMLOptionsCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMHTMLOptionsCollection_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMHTMLOptionsCollection_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMHTMLOptionsCollection_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMHTMLOptionsCollection_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMHTMLOptionsCollection_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMHTMLOptionsCollection_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMHTMLOptionsCollection_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMHTMLOptionsCollection_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMHTMLOptionsCollection_length(This,result)	\
    ( (This)->lpVtbl -> length(This,result) ) 

#define IDOMHTMLOptionsCollection_setLength(This,length)	\
    ( (This)->lpVtbl -> setLength(This,length) ) 

#define IDOMHTMLOptionsCollection_item(This,index,result)	\
    ( (This)->lpVtbl -> item(This,index,result) ) 

#define IDOMHTMLOptionsCollection_namedItem(This,name,result)	\
    ( (This)->lpVtbl -> namedItem(This,name,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMHTMLOptionsCollection_INTERFACE_DEFINED__ */


#ifndef __IDOMHTMLDocument_INTERFACE_DEFINED__
#define __IDOMHTMLDocument_INTERFACE_DEFINED__

/* interface IDOMHTMLDocument */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMHTMLDocument;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A7DF8485-25B7-4a98-B70C-1E29CAA00597")
    IDOMHTMLDocument : public IDOMDocument
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE title( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setTitle( 
            /* [in] */ BSTR title) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE referrer( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE domain( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE URL( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE body( 
            /* [retval][out] */ IDOMHTMLElement **bodyElement) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setBody( 
            /* [in] */ IDOMHTMLElement *body) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE images( 
            /* [retval][out] */ IDOMHTMLCollection **collection) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE applets( 
            /* [retval][out] */ IDOMHTMLCollection **collection) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE links( 
            /* [retval][out] */ IDOMHTMLCollection **collection) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE forms( 
            /* [retval][out] */ IDOMHTMLCollection **collection) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE anchors( 
            /* [retval][out] */ IDOMHTMLCollection **collection) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE cookie( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setCookie( 
            /* [in] */ BSTR cookie) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE open( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE close( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE write( 
            /* [in] */ BSTR text) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE writeln( 
            /* [in] */ BSTR text) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getElementById_( 
            /* [in] */ BSTR elementId,
            /* [retval][out] */ IDOMElement **element) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getElementsByName( 
            /* [in] */ BSTR elementName,
            /* [retval][out] */ IDOMNodeList **nodeList) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMHTMLDocumentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMHTMLDocument * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMHTMLDocument * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMHTMLDocument * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMHTMLDocument * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMHTMLDocument * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMHTMLDocument * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMHTMLDocument * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMHTMLDocument * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMHTMLDocument * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMHTMLDocument * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMHTMLDocument * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *nodeName )( 
            IDOMHTMLDocument * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *nodeValue )( 
            IDOMHTMLDocument * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setNodeValue )( 
            IDOMHTMLDocument * This,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *nodeType )( 
            IDOMHTMLDocument * This,
            /* [retval][out] */ unsigned short *result);
        
        HRESULT ( STDMETHODCALLTYPE *parentNode )( 
            IDOMHTMLDocument * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *childNodes )( 
            IDOMHTMLDocument * This,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *firstChild )( 
            IDOMHTMLDocument * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *lastChild )( 
            IDOMHTMLDocument * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *previousSibling )( 
            IDOMHTMLDocument * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *nextSibling )( 
            IDOMHTMLDocument * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *attributes )( 
            IDOMHTMLDocument * This,
            /* [retval][out] */ IDOMNamedNodeMap **result);
        
        HRESULT ( STDMETHODCALLTYPE *ownerDocument )( 
            IDOMHTMLDocument * This,
            /* [retval][out] */ IDOMDocument **result);
        
        HRESULT ( STDMETHODCALLTYPE *insertBefore )( 
            IDOMHTMLDocument * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *refChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *replaceChild )( 
            IDOMHTMLDocument * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *removeChild )( 
            IDOMHTMLDocument * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IDOMHTMLDocument * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IDOMHTMLDocument * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IDOMHTMLDocument * This,
            /* [in] */ BOOL deep,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *normalize )( 
            IDOMHTMLDocument * This);
        
        HRESULT ( STDMETHODCALLTYPE *isSupported )( 
            IDOMHTMLDocument * This,
            /* [in] */ BSTR feature,
            /* [in] */ BSTR version,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *namespaceURI )( 
            IDOMHTMLDocument * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *prefix )( 
            IDOMHTMLDocument * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setPrefix )( 
            IDOMHTMLDocument * This,
            /* [in] */ BSTR prefix);
        
        HRESULT ( STDMETHODCALLTYPE *localName )( 
            IDOMHTMLDocument * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *hasAttributes )( 
            IDOMHTMLDocument * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isSameNode )( 
            IDOMHTMLDocument * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isEqualNode )( 
            IDOMHTMLDocument * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *textContent )( 
            IDOMHTMLDocument * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setTextContent )( 
            IDOMHTMLDocument * This,
            /* [in] */ BSTR text);
        
        HRESULT ( STDMETHODCALLTYPE *doctype )( 
            IDOMHTMLDocument * This,
            /* [retval][out] */ IDOMDocumentType **result);
        
        HRESULT ( STDMETHODCALLTYPE *implementation )( 
            IDOMHTMLDocument * This,
            /* [retval][out] */ IDOMImplementation **result);
        
        HRESULT ( STDMETHODCALLTYPE *documentElement )( 
            IDOMHTMLDocument * This,
            /* [retval][out] */ IDOMElement **result);
        
        HRESULT ( STDMETHODCALLTYPE *createElement )( 
            IDOMHTMLDocument * This,
            /* [in] */ BSTR tagName,
            /* [retval][out] */ IDOMElement **result);
        
        HRESULT ( STDMETHODCALLTYPE *createDocumentFragment )( 
            IDOMHTMLDocument * This,
            /* [retval][out] */ IDOMDocumentFragment **result);
        
        HRESULT ( STDMETHODCALLTYPE *createTextNode )( 
            IDOMHTMLDocument * This,
            /* [in] */ BSTR data,
            /* [retval][out] */ IDOMText **result);
        
        HRESULT ( STDMETHODCALLTYPE *createComment )( 
            IDOMHTMLDocument * This,
            /* [in] */ BSTR data,
            /* [retval][out] */ IDOMComment **result);
        
        HRESULT ( STDMETHODCALLTYPE *createCDATASection )( 
            IDOMHTMLDocument * This,
            /* [in] */ BSTR data,
            /* [retval][out] */ IDOMCDATASection **result);
        
        HRESULT ( STDMETHODCALLTYPE *createProcessingInstruction )( 
            IDOMHTMLDocument * This,
            /* [in] */ BSTR target,
            /* [in] */ BSTR data,
            /* [retval][out] */ IDOMProcessingInstruction **result);
        
        HRESULT ( STDMETHODCALLTYPE *createAttribute )( 
            IDOMHTMLDocument * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *createEntityReference )( 
            IDOMHTMLDocument * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ IDOMEntityReference **result);
        
        HRESULT ( STDMETHODCALLTYPE *getElementsByTagName )( 
            IDOMHTMLDocument * This,
            /* [in] */ BSTR tagName,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *importNode )( 
            IDOMHTMLDocument * This,
            /* [in] */ IDOMNode *importedNode,
            /* [in] */ BOOL deep,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *createElementNS )( 
            IDOMHTMLDocument * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR qualifiedName,
            /* [retval][out] */ IDOMElement **result);
        
        HRESULT ( STDMETHODCALLTYPE *createAttributeNS )( 
            IDOMHTMLDocument * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR qualifiedName,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *getElementsByTagNameNS )( 
            IDOMHTMLDocument * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *getElementById )( 
            IDOMHTMLDocument * This,
            /* [in] */ BSTR elementId,
            /* [retval][out] */ IDOMElement **result);
        
        HRESULT ( STDMETHODCALLTYPE *title )( 
            IDOMHTMLDocument * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setTitle )( 
            IDOMHTMLDocument * This,
            /* [in] */ BSTR title);
        
        HRESULT ( STDMETHODCALLTYPE *referrer )( 
            IDOMHTMLDocument * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *domain )( 
            IDOMHTMLDocument * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *URL )( 
            IDOMHTMLDocument * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *body )( 
            IDOMHTMLDocument * This,
            /* [retval][out] */ IDOMHTMLElement **bodyElement);
        
        HRESULT ( STDMETHODCALLTYPE *setBody )( 
            IDOMHTMLDocument * This,
            /* [in] */ IDOMHTMLElement *body);
        
        HRESULT ( STDMETHODCALLTYPE *images )( 
            IDOMHTMLDocument * This,
            /* [retval][out] */ IDOMHTMLCollection **collection);
        
        HRESULT ( STDMETHODCALLTYPE *applets )( 
            IDOMHTMLDocument * This,
            /* [retval][out] */ IDOMHTMLCollection **collection);
        
        HRESULT ( STDMETHODCALLTYPE *links )( 
            IDOMHTMLDocument * This,
            /* [retval][out] */ IDOMHTMLCollection **collection);
        
        HRESULT ( STDMETHODCALLTYPE *forms )( 
            IDOMHTMLDocument * This,
            /* [retval][out] */ IDOMHTMLCollection **collection);
        
        HRESULT ( STDMETHODCALLTYPE *anchors )( 
            IDOMHTMLDocument * This,
            /* [retval][out] */ IDOMHTMLCollection **collection);
        
        HRESULT ( STDMETHODCALLTYPE *cookie )( 
            IDOMHTMLDocument * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setCookie )( 
            IDOMHTMLDocument * This,
            /* [in] */ BSTR cookie);
        
        HRESULT ( STDMETHODCALLTYPE *open )( 
            IDOMHTMLDocument * This);
        
        HRESULT ( STDMETHODCALLTYPE *close )( 
            IDOMHTMLDocument * This);
        
        HRESULT ( STDMETHODCALLTYPE *write )( 
            IDOMHTMLDocument * This,
            /* [in] */ BSTR text);
        
        HRESULT ( STDMETHODCALLTYPE *writeln )( 
            IDOMHTMLDocument * This,
            /* [in] */ BSTR text);
        
        HRESULT ( STDMETHODCALLTYPE *getElementById_ )( 
            IDOMHTMLDocument * This,
            /* [in] */ BSTR elementId,
            /* [retval][out] */ IDOMElement **element);
        
        HRESULT ( STDMETHODCALLTYPE *getElementsByName )( 
            IDOMHTMLDocument * This,
            /* [in] */ BSTR elementName,
            /* [retval][out] */ IDOMNodeList **nodeList);
        
        END_INTERFACE
    } IDOMHTMLDocumentVtbl;

    interface IDOMHTMLDocument
    {
        CONST_VTBL struct IDOMHTMLDocumentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMHTMLDocument_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMHTMLDocument_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMHTMLDocument_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMHTMLDocument_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMHTMLDocument_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMHTMLDocument_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMHTMLDocument_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMHTMLDocument_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMHTMLDocument_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMHTMLDocument_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMHTMLDocument_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMHTMLDocument_nodeName(This,result)	\
    ( (This)->lpVtbl -> nodeName(This,result) ) 

#define IDOMHTMLDocument_nodeValue(This,result)	\
    ( (This)->lpVtbl -> nodeValue(This,result) ) 

#define IDOMHTMLDocument_setNodeValue(This,value)	\
    ( (This)->lpVtbl -> setNodeValue(This,value) ) 

#define IDOMHTMLDocument_nodeType(This,result)	\
    ( (This)->lpVtbl -> nodeType(This,result) ) 

#define IDOMHTMLDocument_parentNode(This,result)	\
    ( (This)->lpVtbl -> parentNode(This,result) ) 

#define IDOMHTMLDocument_childNodes(This,result)	\
    ( (This)->lpVtbl -> childNodes(This,result) ) 

#define IDOMHTMLDocument_firstChild(This,result)	\
    ( (This)->lpVtbl -> firstChild(This,result) ) 

#define IDOMHTMLDocument_lastChild(This,result)	\
    ( (This)->lpVtbl -> lastChild(This,result) ) 

#define IDOMHTMLDocument_previousSibling(This,result)	\
    ( (This)->lpVtbl -> previousSibling(This,result) ) 

#define IDOMHTMLDocument_nextSibling(This,result)	\
    ( (This)->lpVtbl -> nextSibling(This,result) ) 

#define IDOMHTMLDocument_attributes(This,result)	\
    ( (This)->lpVtbl -> attributes(This,result) ) 

#define IDOMHTMLDocument_ownerDocument(This,result)	\
    ( (This)->lpVtbl -> ownerDocument(This,result) ) 

#define IDOMHTMLDocument_insertBefore(This,newChild,refChild,result)	\
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,result) ) 

#define IDOMHTMLDocument_replaceChild(This,newChild,oldChild,result)	\
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,result) ) 

#define IDOMHTMLDocument_removeChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> removeChild(This,oldChild,result) ) 

#define IDOMHTMLDocument_appendChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> appendChild(This,oldChild,result) ) 

#define IDOMHTMLDocument_hasChildNodes(This,result)	\
    ( (This)->lpVtbl -> hasChildNodes(This,result) ) 

#define IDOMHTMLDocument_cloneNode(This,deep,result)	\
    ( (This)->lpVtbl -> cloneNode(This,deep,result) ) 

#define IDOMHTMLDocument_normalize(This)	\
    ( (This)->lpVtbl -> normalize(This) ) 

#define IDOMHTMLDocument_isSupported(This,feature,version,result)	\
    ( (This)->lpVtbl -> isSupported(This,feature,version,result) ) 

#define IDOMHTMLDocument_namespaceURI(This,result)	\
    ( (This)->lpVtbl -> namespaceURI(This,result) ) 

#define IDOMHTMLDocument_prefix(This,result)	\
    ( (This)->lpVtbl -> prefix(This,result) ) 

#define IDOMHTMLDocument_setPrefix(This,prefix)	\
    ( (This)->lpVtbl -> setPrefix(This,prefix) ) 

#define IDOMHTMLDocument_localName(This,result)	\
    ( (This)->lpVtbl -> localName(This,result) ) 

#define IDOMHTMLDocument_hasAttributes(This,result)	\
    ( (This)->lpVtbl -> hasAttributes(This,result) ) 

#define IDOMHTMLDocument_isSameNode(This,other,result)	\
    ( (This)->lpVtbl -> isSameNode(This,other,result) ) 

#define IDOMHTMLDocument_isEqualNode(This,other,result)	\
    ( (This)->lpVtbl -> isEqualNode(This,other,result) ) 

#define IDOMHTMLDocument_textContent(This,result)	\
    ( (This)->lpVtbl -> textContent(This,result) ) 

#define IDOMHTMLDocument_setTextContent(This,text)	\
    ( (This)->lpVtbl -> setTextContent(This,text) ) 


#define IDOMHTMLDocument_doctype(This,result)	\
    ( (This)->lpVtbl -> doctype(This,result) ) 

#define IDOMHTMLDocument_implementation(This,result)	\
    ( (This)->lpVtbl -> implementation(This,result) ) 

#define IDOMHTMLDocument_documentElement(This,result)	\
    ( (This)->lpVtbl -> documentElement(This,result) ) 

#define IDOMHTMLDocument_createElement(This,tagName,result)	\
    ( (This)->lpVtbl -> createElement(This,tagName,result) ) 

#define IDOMHTMLDocument_createDocumentFragment(This,result)	\
    ( (This)->lpVtbl -> createDocumentFragment(This,result) ) 

#define IDOMHTMLDocument_createTextNode(This,data,result)	\
    ( (This)->lpVtbl -> createTextNode(This,data,result) ) 

#define IDOMHTMLDocument_createComment(This,data,result)	\
    ( (This)->lpVtbl -> createComment(This,data,result) ) 

#define IDOMHTMLDocument_createCDATASection(This,data,result)	\
    ( (This)->lpVtbl -> createCDATASection(This,data,result) ) 

#define IDOMHTMLDocument_createProcessingInstruction(This,target,data,result)	\
    ( (This)->lpVtbl -> createProcessingInstruction(This,target,data,result) ) 

#define IDOMHTMLDocument_createAttribute(This,name,result)	\
    ( (This)->lpVtbl -> createAttribute(This,name,result) ) 

#define IDOMHTMLDocument_createEntityReference(This,name,result)	\
    ( (This)->lpVtbl -> createEntityReference(This,name,result) ) 

#define IDOMHTMLDocument_getElementsByTagName(This,tagName,result)	\
    ( (This)->lpVtbl -> getElementsByTagName(This,tagName,result) ) 

#define IDOMHTMLDocument_importNode(This,importedNode,deep,result)	\
    ( (This)->lpVtbl -> importNode(This,importedNode,deep,result) ) 

#define IDOMHTMLDocument_createElementNS(This,namespaceURI,qualifiedName,result)	\
    ( (This)->lpVtbl -> createElementNS(This,namespaceURI,qualifiedName,result) ) 

#define IDOMHTMLDocument_createAttributeNS(This,namespaceURI,qualifiedName,result)	\
    ( (This)->lpVtbl -> createAttributeNS(This,namespaceURI,qualifiedName,result) ) 

#define IDOMHTMLDocument_getElementsByTagNameNS(This,namespaceURI,localName,result)	\
    ( (This)->lpVtbl -> getElementsByTagNameNS(This,namespaceURI,localName,result) ) 

#define IDOMHTMLDocument_getElementById(This,elementId,result)	\
    ( (This)->lpVtbl -> getElementById(This,elementId,result) ) 


#define IDOMHTMLDocument_title(This,result)	\
    ( (This)->lpVtbl -> title(This,result) ) 

#define IDOMHTMLDocument_setTitle(This,title)	\
    ( (This)->lpVtbl -> setTitle(This,title) ) 

#define IDOMHTMLDocument_referrer(This,result)	\
    ( (This)->lpVtbl -> referrer(This,result) ) 

#define IDOMHTMLDocument_domain(This,result)	\
    ( (This)->lpVtbl -> domain(This,result) ) 

#define IDOMHTMLDocument_URL(This,result)	\
    ( (This)->lpVtbl -> URL(This,result) ) 

#define IDOMHTMLDocument_body(This,bodyElement)	\
    ( (This)->lpVtbl -> body(This,bodyElement) ) 

#define IDOMHTMLDocument_setBody(This,body)	\
    ( (This)->lpVtbl -> setBody(This,body) ) 

#define IDOMHTMLDocument_images(This,collection)	\
    ( (This)->lpVtbl -> images(This,collection) ) 

#define IDOMHTMLDocument_applets(This,collection)	\
    ( (This)->lpVtbl -> applets(This,collection) ) 

#define IDOMHTMLDocument_links(This,collection)	\
    ( (This)->lpVtbl -> links(This,collection) ) 

#define IDOMHTMLDocument_forms(This,collection)	\
    ( (This)->lpVtbl -> forms(This,collection) ) 

#define IDOMHTMLDocument_anchors(This,collection)	\
    ( (This)->lpVtbl -> anchors(This,collection) ) 

#define IDOMHTMLDocument_cookie(This,result)	\
    ( (This)->lpVtbl -> cookie(This,result) ) 

#define IDOMHTMLDocument_setCookie(This,cookie)	\
    ( (This)->lpVtbl -> setCookie(This,cookie) ) 

#define IDOMHTMLDocument_open(This)	\
    ( (This)->lpVtbl -> open(This) ) 

#define IDOMHTMLDocument_close(This)	\
    ( (This)->lpVtbl -> close(This) ) 

#define IDOMHTMLDocument_write(This,text)	\
    ( (This)->lpVtbl -> write(This,text) ) 

#define IDOMHTMLDocument_writeln(This,text)	\
    ( (This)->lpVtbl -> writeln(This,text) ) 

#define IDOMHTMLDocument_getElementById_(This,elementId,element)	\
    ( (This)->lpVtbl -> getElementById_(This,elementId,element) ) 

#define IDOMHTMLDocument_getElementsByName(This,elementName,nodeList)	\
    ( (This)->lpVtbl -> getElementsByName(This,elementName,nodeList) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMHTMLDocument_INTERFACE_DEFINED__ */


#ifndef __IDOMHTMLElement_INTERFACE_DEFINED__
#define __IDOMHTMLElement_INTERFACE_DEFINED__

/* interface IDOMHTMLElement */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMHTMLElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("EBD5F41D-FF65-41d8-97C9-FCE3A3D4CC3E")
    IDOMHTMLElement : public IDOMElement
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE idName( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setIdName( 
            /* [in] */ BSTR idName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE title( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setTitle( 
            /* [in] */ BSTR title) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE lang( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setLang( 
            /* [in] */ BSTR lang) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE dir( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setDir( 
            /* [in] */ BSTR dir) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE className( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setClassName( 
            /* [in] */ BSTR className) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE innerHTML( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setInnerHTML( 
            /* [in] */ BSTR html) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE innerText( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setInnerText( 
            /* [in] */ BSTR text) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMHTMLElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMHTMLElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMHTMLElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMHTMLElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMHTMLElement * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMHTMLElement * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMHTMLElement * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMHTMLElement * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMHTMLElement * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMHTMLElement * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMHTMLElement * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMHTMLElement * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *nodeName )( 
            IDOMHTMLElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *nodeValue )( 
            IDOMHTMLElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setNodeValue )( 
            IDOMHTMLElement * This,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *nodeType )( 
            IDOMHTMLElement * This,
            /* [retval][out] */ unsigned short *result);
        
        HRESULT ( STDMETHODCALLTYPE *parentNode )( 
            IDOMHTMLElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *childNodes )( 
            IDOMHTMLElement * This,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *firstChild )( 
            IDOMHTMLElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *lastChild )( 
            IDOMHTMLElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *previousSibling )( 
            IDOMHTMLElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *nextSibling )( 
            IDOMHTMLElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *attributes )( 
            IDOMHTMLElement * This,
            /* [retval][out] */ IDOMNamedNodeMap **result);
        
        HRESULT ( STDMETHODCALLTYPE *ownerDocument )( 
            IDOMHTMLElement * This,
            /* [retval][out] */ IDOMDocument **result);
        
        HRESULT ( STDMETHODCALLTYPE *insertBefore )( 
            IDOMHTMLElement * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *refChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *replaceChild )( 
            IDOMHTMLElement * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *removeChild )( 
            IDOMHTMLElement * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IDOMHTMLElement * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IDOMHTMLElement * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IDOMHTMLElement * This,
            /* [in] */ BOOL deep,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *normalize )( 
            IDOMHTMLElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *isSupported )( 
            IDOMHTMLElement * This,
            /* [in] */ BSTR feature,
            /* [in] */ BSTR version,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *namespaceURI )( 
            IDOMHTMLElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *prefix )( 
            IDOMHTMLElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setPrefix )( 
            IDOMHTMLElement * This,
            /* [in] */ BSTR prefix);
        
        HRESULT ( STDMETHODCALLTYPE *localName )( 
            IDOMHTMLElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *hasAttributes )( 
            IDOMHTMLElement * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isSameNode )( 
            IDOMHTMLElement * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isEqualNode )( 
            IDOMHTMLElement * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *textContent )( 
            IDOMHTMLElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setTextContent )( 
            IDOMHTMLElement * This,
            /* [in] */ BSTR text);
        
        HRESULT ( STDMETHODCALLTYPE *tagName )( 
            IDOMHTMLElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *getAttribute )( 
            IDOMHTMLElement * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setAttribute )( 
            IDOMHTMLElement * This,
            /* [in] */ BSTR name,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *removeAttribute )( 
            IDOMHTMLElement * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *getAttributeNode )( 
            IDOMHTMLElement * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *setAttributeNode )( 
            IDOMHTMLElement * This,
            /* [in] */ IDOMAttr *newAttr,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *removeAttributeNode )( 
            IDOMHTMLElement * This,
            /* [in] */ IDOMAttr *oldAttr,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *getElementsByTagName )( 
            IDOMHTMLElement * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *getAttributeNS )( 
            IDOMHTMLElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setAttributeNS )( 
            IDOMHTMLElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR qualifiedName,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *removeAttributeNS )( 
            IDOMHTMLElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName);
        
        HRESULT ( STDMETHODCALLTYPE *getAttributeNodeNS )( 
            IDOMHTMLElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *setAttributeNodeNS )( 
            IDOMHTMLElement * This,
            /* [in] */ IDOMAttr *newAttr,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *getElementsByTagNameNS )( 
            IDOMHTMLElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *hasAttribute )( 
            IDOMHTMLElement * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *hasAttributeNS )( 
            IDOMHTMLElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *focus )( 
            IDOMHTMLElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *blur )( 
            IDOMHTMLElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *idName )( 
            IDOMHTMLElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setIdName )( 
            IDOMHTMLElement * This,
            /* [in] */ BSTR idName);
        
        HRESULT ( STDMETHODCALLTYPE *title )( 
            IDOMHTMLElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setTitle )( 
            IDOMHTMLElement * This,
            /* [in] */ BSTR title);
        
        HRESULT ( STDMETHODCALLTYPE *lang )( 
            IDOMHTMLElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setLang )( 
            IDOMHTMLElement * This,
            /* [in] */ BSTR lang);
        
        HRESULT ( STDMETHODCALLTYPE *dir )( 
            IDOMHTMLElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setDir )( 
            IDOMHTMLElement * This,
            /* [in] */ BSTR dir);
        
        HRESULT ( STDMETHODCALLTYPE *className )( 
            IDOMHTMLElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setClassName )( 
            IDOMHTMLElement * This,
            /* [in] */ BSTR className);
        
        HRESULT ( STDMETHODCALLTYPE *innerHTML )( 
            IDOMHTMLElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setInnerHTML )( 
            IDOMHTMLElement * This,
            /* [in] */ BSTR html);
        
        HRESULT ( STDMETHODCALLTYPE *innerText )( 
            IDOMHTMLElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setInnerText )( 
            IDOMHTMLElement * This,
            /* [in] */ BSTR text);
        
        END_INTERFACE
    } IDOMHTMLElementVtbl;

    interface IDOMHTMLElement
    {
        CONST_VTBL struct IDOMHTMLElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMHTMLElement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMHTMLElement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMHTMLElement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMHTMLElement_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMHTMLElement_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMHTMLElement_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMHTMLElement_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMHTMLElement_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMHTMLElement_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMHTMLElement_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMHTMLElement_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMHTMLElement_nodeName(This,result)	\
    ( (This)->lpVtbl -> nodeName(This,result) ) 

#define IDOMHTMLElement_nodeValue(This,result)	\
    ( (This)->lpVtbl -> nodeValue(This,result) ) 

#define IDOMHTMLElement_setNodeValue(This,value)	\
    ( (This)->lpVtbl -> setNodeValue(This,value) ) 

#define IDOMHTMLElement_nodeType(This,result)	\
    ( (This)->lpVtbl -> nodeType(This,result) ) 

#define IDOMHTMLElement_parentNode(This,result)	\
    ( (This)->lpVtbl -> parentNode(This,result) ) 

#define IDOMHTMLElement_childNodes(This,result)	\
    ( (This)->lpVtbl -> childNodes(This,result) ) 

#define IDOMHTMLElement_firstChild(This,result)	\
    ( (This)->lpVtbl -> firstChild(This,result) ) 

#define IDOMHTMLElement_lastChild(This,result)	\
    ( (This)->lpVtbl -> lastChild(This,result) ) 

#define IDOMHTMLElement_previousSibling(This,result)	\
    ( (This)->lpVtbl -> previousSibling(This,result) ) 

#define IDOMHTMLElement_nextSibling(This,result)	\
    ( (This)->lpVtbl -> nextSibling(This,result) ) 

#define IDOMHTMLElement_attributes(This,result)	\
    ( (This)->lpVtbl -> attributes(This,result) ) 

#define IDOMHTMLElement_ownerDocument(This,result)	\
    ( (This)->lpVtbl -> ownerDocument(This,result) ) 

#define IDOMHTMLElement_insertBefore(This,newChild,refChild,result)	\
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,result) ) 

#define IDOMHTMLElement_replaceChild(This,newChild,oldChild,result)	\
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,result) ) 

#define IDOMHTMLElement_removeChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> removeChild(This,oldChild,result) ) 

#define IDOMHTMLElement_appendChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> appendChild(This,oldChild,result) ) 

#define IDOMHTMLElement_hasChildNodes(This,result)	\
    ( (This)->lpVtbl -> hasChildNodes(This,result) ) 

#define IDOMHTMLElement_cloneNode(This,deep,result)	\
    ( (This)->lpVtbl -> cloneNode(This,deep,result) ) 

#define IDOMHTMLElement_normalize(This)	\
    ( (This)->lpVtbl -> normalize(This) ) 

#define IDOMHTMLElement_isSupported(This,feature,version,result)	\
    ( (This)->lpVtbl -> isSupported(This,feature,version,result) ) 

#define IDOMHTMLElement_namespaceURI(This,result)	\
    ( (This)->lpVtbl -> namespaceURI(This,result) ) 

#define IDOMHTMLElement_prefix(This,result)	\
    ( (This)->lpVtbl -> prefix(This,result) ) 

#define IDOMHTMLElement_setPrefix(This,prefix)	\
    ( (This)->lpVtbl -> setPrefix(This,prefix) ) 

#define IDOMHTMLElement_localName(This,result)	\
    ( (This)->lpVtbl -> localName(This,result) ) 

#define IDOMHTMLElement_hasAttributes(This,result)	\
    ( (This)->lpVtbl -> hasAttributes(This,result) ) 

#define IDOMHTMLElement_isSameNode(This,other,result)	\
    ( (This)->lpVtbl -> isSameNode(This,other,result) ) 

#define IDOMHTMLElement_isEqualNode(This,other,result)	\
    ( (This)->lpVtbl -> isEqualNode(This,other,result) ) 

#define IDOMHTMLElement_textContent(This,result)	\
    ( (This)->lpVtbl -> textContent(This,result) ) 

#define IDOMHTMLElement_setTextContent(This,text)	\
    ( (This)->lpVtbl -> setTextContent(This,text) ) 


#define IDOMHTMLElement_tagName(This,result)	\
    ( (This)->lpVtbl -> tagName(This,result) ) 

#define IDOMHTMLElement_getAttribute(This,name,result)	\
    ( (This)->lpVtbl -> getAttribute(This,name,result) ) 

#define IDOMHTMLElement_setAttribute(This,name,value)	\
    ( (This)->lpVtbl -> setAttribute(This,name,value) ) 

#define IDOMHTMLElement_removeAttribute(This,name)	\
    ( (This)->lpVtbl -> removeAttribute(This,name) ) 

#define IDOMHTMLElement_getAttributeNode(This,name,result)	\
    ( (This)->lpVtbl -> getAttributeNode(This,name,result) ) 

#define IDOMHTMLElement_setAttributeNode(This,newAttr,result)	\
    ( (This)->lpVtbl -> setAttributeNode(This,newAttr,result) ) 

#define IDOMHTMLElement_removeAttributeNode(This,oldAttr,result)	\
    ( (This)->lpVtbl -> removeAttributeNode(This,oldAttr,result) ) 

#define IDOMHTMLElement_getElementsByTagName(This,name,result)	\
    ( (This)->lpVtbl -> getElementsByTagName(This,name,result) ) 

#define IDOMHTMLElement_getAttributeNS(This,namespaceURI,localName,result)	\
    ( (This)->lpVtbl -> getAttributeNS(This,namespaceURI,localName,result) ) 

#define IDOMHTMLElement_setAttributeNS(This,namespaceURI,qualifiedName,value)	\
    ( (This)->lpVtbl -> setAttributeNS(This,namespaceURI,qualifiedName,value) ) 

#define IDOMHTMLElement_removeAttributeNS(This,namespaceURI,localName)	\
    ( (This)->lpVtbl -> removeAttributeNS(This,namespaceURI,localName) ) 

#define IDOMHTMLElement_getAttributeNodeNS(This,namespaceURI,localName,result)	\
    ( (This)->lpVtbl -> getAttributeNodeNS(This,namespaceURI,localName,result) ) 

#define IDOMHTMLElement_setAttributeNodeNS(This,newAttr,result)	\
    ( (This)->lpVtbl -> setAttributeNodeNS(This,newAttr,result) ) 

#define IDOMHTMLElement_getElementsByTagNameNS(This,namespaceURI,localName,result)	\
    ( (This)->lpVtbl -> getElementsByTagNameNS(This,namespaceURI,localName,result) ) 

#define IDOMHTMLElement_hasAttribute(This,name,result)	\
    ( (This)->lpVtbl -> hasAttribute(This,name,result) ) 

#define IDOMHTMLElement_hasAttributeNS(This,namespaceURI,localName,result)	\
    ( (This)->lpVtbl -> hasAttributeNS(This,namespaceURI,localName,result) ) 

#define IDOMHTMLElement_focus(This)	\
    ( (This)->lpVtbl -> focus(This) ) 

#define IDOMHTMLElement_blur(This)	\
    ( (This)->lpVtbl -> blur(This) ) 


#define IDOMHTMLElement_idName(This,result)	\
    ( (This)->lpVtbl -> idName(This,result) ) 

#define IDOMHTMLElement_setIdName(This,idName)	\
    ( (This)->lpVtbl -> setIdName(This,idName) ) 

#define IDOMHTMLElement_title(This,result)	\
    ( (This)->lpVtbl -> title(This,result) ) 

#define IDOMHTMLElement_setTitle(This,title)	\
    ( (This)->lpVtbl -> setTitle(This,title) ) 

#define IDOMHTMLElement_lang(This,result)	\
    ( (This)->lpVtbl -> lang(This,result) ) 

#define IDOMHTMLElement_setLang(This,lang)	\
    ( (This)->lpVtbl -> setLang(This,lang) ) 

#define IDOMHTMLElement_dir(This,result)	\
    ( (This)->lpVtbl -> dir(This,result) ) 

#define IDOMHTMLElement_setDir(This,dir)	\
    ( (This)->lpVtbl -> setDir(This,dir) ) 

#define IDOMHTMLElement_className(This,result)	\
    ( (This)->lpVtbl -> className(This,result) ) 

#define IDOMHTMLElement_setClassName(This,className)	\
    ( (This)->lpVtbl -> setClassName(This,className) ) 

#define IDOMHTMLElement_innerHTML(This,result)	\
    ( (This)->lpVtbl -> innerHTML(This,result) ) 

#define IDOMHTMLElement_setInnerHTML(This,html)	\
    ( (This)->lpVtbl -> setInnerHTML(This,html) ) 

#define IDOMHTMLElement_innerText(This,result)	\
    ( (This)->lpVtbl -> innerText(This,result) ) 

#define IDOMHTMLElement_setInnerText(This,text)	\
    ( (This)->lpVtbl -> setInnerText(This,text) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMHTMLElement_INTERFACE_DEFINED__ */


#ifndef __IDOMHTMLFormElement_INTERFACE_DEFINED__
#define __IDOMHTMLFormElement_INTERFACE_DEFINED__

/* interface IDOMHTMLFormElement */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMHTMLFormElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("DF5C0054-DDDB-4888-9198-7A4E4EBF8D69")
    IDOMHTMLFormElement : public IDOMHTMLElement
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE elements( 
            /* [retval][out] */ IDOMHTMLCollection **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE length( 
            /* [retval][out] */ int *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE name( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setName( 
            /* [in] */ BSTR name) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE acceptCharset( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setAcceptCharset( 
            /* [in] */ BSTR acceptCharset) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE action( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setAction( 
            /* [in] */ BSTR action) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE encType( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setEnctype( 
            /* [retval][out] */ BSTR *encType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE method( 
            /* [retval][out] */ BSTR *method) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setMethod( 
            /* [in] */ BSTR method) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE target( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setTarget( 
            /* [in] */ BSTR target) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE submit( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE reset( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMHTMLFormElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMHTMLFormElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMHTMLFormElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMHTMLFormElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMHTMLFormElement * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMHTMLFormElement * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMHTMLFormElement * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMHTMLFormElement * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMHTMLFormElement * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMHTMLFormElement * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMHTMLFormElement * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMHTMLFormElement * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *nodeName )( 
            IDOMHTMLFormElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *nodeValue )( 
            IDOMHTMLFormElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setNodeValue )( 
            IDOMHTMLFormElement * This,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *nodeType )( 
            IDOMHTMLFormElement * This,
            /* [retval][out] */ unsigned short *result);
        
        HRESULT ( STDMETHODCALLTYPE *parentNode )( 
            IDOMHTMLFormElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *childNodes )( 
            IDOMHTMLFormElement * This,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *firstChild )( 
            IDOMHTMLFormElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *lastChild )( 
            IDOMHTMLFormElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *previousSibling )( 
            IDOMHTMLFormElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *nextSibling )( 
            IDOMHTMLFormElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *attributes )( 
            IDOMHTMLFormElement * This,
            /* [retval][out] */ IDOMNamedNodeMap **result);
        
        HRESULT ( STDMETHODCALLTYPE *ownerDocument )( 
            IDOMHTMLFormElement * This,
            /* [retval][out] */ IDOMDocument **result);
        
        HRESULT ( STDMETHODCALLTYPE *insertBefore )( 
            IDOMHTMLFormElement * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *refChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *replaceChild )( 
            IDOMHTMLFormElement * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *removeChild )( 
            IDOMHTMLFormElement * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IDOMHTMLFormElement * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IDOMHTMLFormElement * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IDOMHTMLFormElement * This,
            /* [in] */ BOOL deep,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *normalize )( 
            IDOMHTMLFormElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *isSupported )( 
            IDOMHTMLFormElement * This,
            /* [in] */ BSTR feature,
            /* [in] */ BSTR version,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *namespaceURI )( 
            IDOMHTMLFormElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *prefix )( 
            IDOMHTMLFormElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setPrefix )( 
            IDOMHTMLFormElement * This,
            /* [in] */ BSTR prefix);
        
        HRESULT ( STDMETHODCALLTYPE *localName )( 
            IDOMHTMLFormElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *hasAttributes )( 
            IDOMHTMLFormElement * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isSameNode )( 
            IDOMHTMLFormElement * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isEqualNode )( 
            IDOMHTMLFormElement * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *textContent )( 
            IDOMHTMLFormElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setTextContent )( 
            IDOMHTMLFormElement * This,
            /* [in] */ BSTR text);
        
        HRESULT ( STDMETHODCALLTYPE *tagName )( 
            IDOMHTMLFormElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *getAttribute )( 
            IDOMHTMLFormElement * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setAttribute )( 
            IDOMHTMLFormElement * This,
            /* [in] */ BSTR name,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *removeAttribute )( 
            IDOMHTMLFormElement * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *getAttributeNode )( 
            IDOMHTMLFormElement * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *setAttributeNode )( 
            IDOMHTMLFormElement * This,
            /* [in] */ IDOMAttr *newAttr,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *removeAttributeNode )( 
            IDOMHTMLFormElement * This,
            /* [in] */ IDOMAttr *oldAttr,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *getElementsByTagName )( 
            IDOMHTMLFormElement * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *getAttributeNS )( 
            IDOMHTMLFormElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setAttributeNS )( 
            IDOMHTMLFormElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR qualifiedName,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *removeAttributeNS )( 
            IDOMHTMLFormElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName);
        
        HRESULT ( STDMETHODCALLTYPE *getAttributeNodeNS )( 
            IDOMHTMLFormElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *setAttributeNodeNS )( 
            IDOMHTMLFormElement * This,
            /* [in] */ IDOMAttr *newAttr,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *getElementsByTagNameNS )( 
            IDOMHTMLFormElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *hasAttribute )( 
            IDOMHTMLFormElement * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *hasAttributeNS )( 
            IDOMHTMLFormElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *focus )( 
            IDOMHTMLFormElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *blur )( 
            IDOMHTMLFormElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *idName )( 
            IDOMHTMLFormElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setIdName )( 
            IDOMHTMLFormElement * This,
            /* [in] */ BSTR idName);
        
        HRESULT ( STDMETHODCALLTYPE *title )( 
            IDOMHTMLFormElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setTitle )( 
            IDOMHTMLFormElement * This,
            /* [in] */ BSTR title);
        
        HRESULT ( STDMETHODCALLTYPE *lang )( 
            IDOMHTMLFormElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setLang )( 
            IDOMHTMLFormElement * This,
            /* [in] */ BSTR lang);
        
        HRESULT ( STDMETHODCALLTYPE *dir )( 
            IDOMHTMLFormElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setDir )( 
            IDOMHTMLFormElement * This,
            /* [in] */ BSTR dir);
        
        HRESULT ( STDMETHODCALLTYPE *className )( 
            IDOMHTMLFormElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setClassName )( 
            IDOMHTMLFormElement * This,
            /* [in] */ BSTR className);
        
        HRESULT ( STDMETHODCALLTYPE *innerHTML )( 
            IDOMHTMLFormElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setInnerHTML )( 
            IDOMHTMLFormElement * This,
            /* [in] */ BSTR html);
        
        HRESULT ( STDMETHODCALLTYPE *innerText )( 
            IDOMHTMLFormElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setInnerText )( 
            IDOMHTMLFormElement * This,
            /* [in] */ BSTR text);
        
        HRESULT ( STDMETHODCALLTYPE *elements )( 
            IDOMHTMLFormElement * This,
            /* [retval][out] */ IDOMHTMLCollection **result);
        
        HRESULT ( STDMETHODCALLTYPE *length )( 
            IDOMHTMLFormElement * This,
            /* [retval][out] */ int *result);
        
        HRESULT ( STDMETHODCALLTYPE *name )( 
            IDOMHTMLFormElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setName )( 
            IDOMHTMLFormElement * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *acceptCharset )( 
            IDOMHTMLFormElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setAcceptCharset )( 
            IDOMHTMLFormElement * This,
            /* [in] */ BSTR acceptCharset);
        
        HRESULT ( STDMETHODCALLTYPE *action )( 
            IDOMHTMLFormElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setAction )( 
            IDOMHTMLFormElement * This,
            /* [in] */ BSTR action);
        
        HRESULT ( STDMETHODCALLTYPE *encType )( 
            IDOMHTMLFormElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setEnctype )( 
            IDOMHTMLFormElement * This,
            /* [retval][out] */ BSTR *encType);
        
        HRESULT ( STDMETHODCALLTYPE *method )( 
            IDOMHTMLFormElement * This,
            /* [retval][out] */ BSTR *method);
        
        HRESULT ( STDMETHODCALLTYPE *setMethod )( 
            IDOMHTMLFormElement * This,
            /* [in] */ BSTR method);
        
        HRESULT ( STDMETHODCALLTYPE *target )( 
            IDOMHTMLFormElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setTarget )( 
            IDOMHTMLFormElement * This,
            /* [in] */ BSTR target);
        
        HRESULT ( STDMETHODCALLTYPE *submit )( 
            IDOMHTMLFormElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *reset )( 
            IDOMHTMLFormElement * This);
        
        END_INTERFACE
    } IDOMHTMLFormElementVtbl;

    interface IDOMHTMLFormElement
    {
        CONST_VTBL struct IDOMHTMLFormElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMHTMLFormElement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMHTMLFormElement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMHTMLFormElement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMHTMLFormElement_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMHTMLFormElement_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMHTMLFormElement_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMHTMLFormElement_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMHTMLFormElement_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMHTMLFormElement_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMHTMLFormElement_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMHTMLFormElement_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMHTMLFormElement_nodeName(This,result)	\
    ( (This)->lpVtbl -> nodeName(This,result) ) 

#define IDOMHTMLFormElement_nodeValue(This,result)	\
    ( (This)->lpVtbl -> nodeValue(This,result) ) 

#define IDOMHTMLFormElement_setNodeValue(This,value)	\
    ( (This)->lpVtbl -> setNodeValue(This,value) ) 

#define IDOMHTMLFormElement_nodeType(This,result)	\
    ( (This)->lpVtbl -> nodeType(This,result) ) 

#define IDOMHTMLFormElement_parentNode(This,result)	\
    ( (This)->lpVtbl -> parentNode(This,result) ) 

#define IDOMHTMLFormElement_childNodes(This,result)	\
    ( (This)->lpVtbl -> childNodes(This,result) ) 

#define IDOMHTMLFormElement_firstChild(This,result)	\
    ( (This)->lpVtbl -> firstChild(This,result) ) 

#define IDOMHTMLFormElement_lastChild(This,result)	\
    ( (This)->lpVtbl -> lastChild(This,result) ) 

#define IDOMHTMLFormElement_previousSibling(This,result)	\
    ( (This)->lpVtbl -> previousSibling(This,result) ) 

#define IDOMHTMLFormElement_nextSibling(This,result)	\
    ( (This)->lpVtbl -> nextSibling(This,result) ) 

#define IDOMHTMLFormElement_attributes(This,result)	\
    ( (This)->lpVtbl -> attributes(This,result) ) 

#define IDOMHTMLFormElement_ownerDocument(This,result)	\
    ( (This)->lpVtbl -> ownerDocument(This,result) ) 

#define IDOMHTMLFormElement_insertBefore(This,newChild,refChild,result)	\
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,result) ) 

#define IDOMHTMLFormElement_replaceChild(This,newChild,oldChild,result)	\
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,result) ) 

#define IDOMHTMLFormElement_removeChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> removeChild(This,oldChild,result) ) 

#define IDOMHTMLFormElement_appendChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> appendChild(This,oldChild,result) ) 

#define IDOMHTMLFormElement_hasChildNodes(This,result)	\
    ( (This)->lpVtbl -> hasChildNodes(This,result) ) 

#define IDOMHTMLFormElement_cloneNode(This,deep,result)	\
    ( (This)->lpVtbl -> cloneNode(This,deep,result) ) 

#define IDOMHTMLFormElement_normalize(This)	\
    ( (This)->lpVtbl -> normalize(This) ) 

#define IDOMHTMLFormElement_isSupported(This,feature,version,result)	\
    ( (This)->lpVtbl -> isSupported(This,feature,version,result) ) 

#define IDOMHTMLFormElement_namespaceURI(This,result)	\
    ( (This)->lpVtbl -> namespaceURI(This,result) ) 

#define IDOMHTMLFormElement_prefix(This,result)	\
    ( (This)->lpVtbl -> prefix(This,result) ) 

#define IDOMHTMLFormElement_setPrefix(This,prefix)	\
    ( (This)->lpVtbl -> setPrefix(This,prefix) ) 

#define IDOMHTMLFormElement_localName(This,result)	\
    ( (This)->lpVtbl -> localName(This,result) ) 

#define IDOMHTMLFormElement_hasAttributes(This,result)	\
    ( (This)->lpVtbl -> hasAttributes(This,result) ) 

#define IDOMHTMLFormElement_isSameNode(This,other,result)	\
    ( (This)->lpVtbl -> isSameNode(This,other,result) ) 

#define IDOMHTMLFormElement_isEqualNode(This,other,result)	\
    ( (This)->lpVtbl -> isEqualNode(This,other,result) ) 

#define IDOMHTMLFormElement_textContent(This,result)	\
    ( (This)->lpVtbl -> textContent(This,result) ) 

#define IDOMHTMLFormElement_setTextContent(This,text)	\
    ( (This)->lpVtbl -> setTextContent(This,text) ) 


#define IDOMHTMLFormElement_tagName(This,result)	\
    ( (This)->lpVtbl -> tagName(This,result) ) 

#define IDOMHTMLFormElement_getAttribute(This,name,result)	\
    ( (This)->lpVtbl -> getAttribute(This,name,result) ) 

#define IDOMHTMLFormElement_setAttribute(This,name,value)	\
    ( (This)->lpVtbl -> setAttribute(This,name,value) ) 

#define IDOMHTMLFormElement_removeAttribute(This,name)	\
    ( (This)->lpVtbl -> removeAttribute(This,name) ) 

#define IDOMHTMLFormElement_getAttributeNode(This,name,result)	\
    ( (This)->lpVtbl -> getAttributeNode(This,name,result) ) 

#define IDOMHTMLFormElement_setAttributeNode(This,newAttr,result)	\
    ( (This)->lpVtbl -> setAttributeNode(This,newAttr,result) ) 

#define IDOMHTMLFormElement_removeAttributeNode(This,oldAttr,result)	\
    ( (This)->lpVtbl -> removeAttributeNode(This,oldAttr,result) ) 

#define IDOMHTMLFormElement_getElementsByTagName(This,name,result)	\
    ( (This)->lpVtbl -> getElementsByTagName(This,name,result) ) 

#define IDOMHTMLFormElement_getAttributeNS(This,namespaceURI,localName,result)	\
    ( (This)->lpVtbl -> getAttributeNS(This,namespaceURI,localName,result) ) 

#define IDOMHTMLFormElement_setAttributeNS(This,namespaceURI,qualifiedName,value)	\
    ( (This)->lpVtbl -> setAttributeNS(This,namespaceURI,qualifiedName,value) ) 

#define IDOMHTMLFormElement_removeAttributeNS(This,namespaceURI,localName)	\
    ( (This)->lpVtbl -> removeAttributeNS(This,namespaceURI,localName) ) 

#define IDOMHTMLFormElement_getAttributeNodeNS(This,namespaceURI,localName,result)	\
    ( (This)->lpVtbl -> getAttributeNodeNS(This,namespaceURI,localName,result) ) 

#define IDOMHTMLFormElement_setAttributeNodeNS(This,newAttr,result)	\
    ( (This)->lpVtbl -> setAttributeNodeNS(This,newAttr,result) ) 

#define IDOMHTMLFormElement_getElementsByTagNameNS(This,namespaceURI,localName,result)	\
    ( (This)->lpVtbl -> getElementsByTagNameNS(This,namespaceURI,localName,result) ) 

#define IDOMHTMLFormElement_hasAttribute(This,name,result)	\
    ( (This)->lpVtbl -> hasAttribute(This,name,result) ) 

#define IDOMHTMLFormElement_hasAttributeNS(This,namespaceURI,localName,result)	\
    ( (This)->lpVtbl -> hasAttributeNS(This,namespaceURI,localName,result) ) 

#define IDOMHTMLFormElement_focus(This)	\
    ( (This)->lpVtbl -> focus(This) ) 

#define IDOMHTMLFormElement_blur(This)	\
    ( (This)->lpVtbl -> blur(This) ) 


#define IDOMHTMLFormElement_idName(This,result)	\
    ( (This)->lpVtbl -> idName(This,result) ) 

#define IDOMHTMLFormElement_setIdName(This,idName)	\
    ( (This)->lpVtbl -> setIdName(This,idName) ) 

#define IDOMHTMLFormElement_title(This,result)	\
    ( (This)->lpVtbl -> title(This,result) ) 

#define IDOMHTMLFormElement_setTitle(This,title)	\
    ( (This)->lpVtbl -> setTitle(This,title) ) 

#define IDOMHTMLFormElement_lang(This,result)	\
    ( (This)->lpVtbl -> lang(This,result) ) 

#define IDOMHTMLFormElement_setLang(This,lang)	\
    ( (This)->lpVtbl -> setLang(This,lang) ) 

#define IDOMHTMLFormElement_dir(This,result)	\
    ( (This)->lpVtbl -> dir(This,result) ) 

#define IDOMHTMLFormElement_setDir(This,dir)	\
    ( (This)->lpVtbl -> setDir(This,dir) ) 

#define IDOMHTMLFormElement_className(This,result)	\
    ( (This)->lpVtbl -> className(This,result) ) 

#define IDOMHTMLFormElement_setClassName(This,className)	\
    ( (This)->lpVtbl -> setClassName(This,className) ) 

#define IDOMHTMLFormElement_innerHTML(This,result)	\
    ( (This)->lpVtbl -> innerHTML(This,result) ) 

#define IDOMHTMLFormElement_setInnerHTML(This,html)	\
    ( (This)->lpVtbl -> setInnerHTML(This,html) ) 

#define IDOMHTMLFormElement_innerText(This,result)	\
    ( (This)->lpVtbl -> innerText(This,result) ) 

#define IDOMHTMLFormElement_setInnerText(This,text)	\
    ( (This)->lpVtbl -> setInnerText(This,text) ) 


#define IDOMHTMLFormElement_elements(This,result)	\
    ( (This)->lpVtbl -> elements(This,result) ) 

#define IDOMHTMLFormElement_length(This,result)	\
    ( (This)->lpVtbl -> length(This,result) ) 

#define IDOMHTMLFormElement_name(This,result)	\
    ( (This)->lpVtbl -> name(This,result) ) 

#define IDOMHTMLFormElement_setName(This,name)	\
    ( (This)->lpVtbl -> setName(This,name) ) 

#define IDOMHTMLFormElement_acceptCharset(This,result)	\
    ( (This)->lpVtbl -> acceptCharset(This,result) ) 

#define IDOMHTMLFormElement_setAcceptCharset(This,acceptCharset)	\
    ( (This)->lpVtbl -> setAcceptCharset(This,acceptCharset) ) 

#define IDOMHTMLFormElement_action(This,result)	\
    ( (This)->lpVtbl -> action(This,result) ) 

#define IDOMHTMLFormElement_setAction(This,action)	\
    ( (This)->lpVtbl -> setAction(This,action) ) 

#define IDOMHTMLFormElement_encType(This,result)	\
    ( (This)->lpVtbl -> encType(This,result) ) 

#define IDOMHTMLFormElement_setEnctype(This,encType)	\
    ( (This)->lpVtbl -> setEnctype(This,encType) ) 

#define IDOMHTMLFormElement_method(This,method)	\
    ( (This)->lpVtbl -> method(This,method) ) 

#define IDOMHTMLFormElement_setMethod(This,method)	\
    ( (This)->lpVtbl -> setMethod(This,method) ) 

#define IDOMHTMLFormElement_target(This,result)	\
    ( (This)->lpVtbl -> target(This,result) ) 

#define IDOMHTMLFormElement_setTarget(This,target)	\
    ( (This)->lpVtbl -> setTarget(This,target) ) 

#define IDOMHTMLFormElement_submit(This)	\
    ( (This)->lpVtbl -> submit(This) ) 

#define IDOMHTMLFormElement_reset(This)	\
    ( (This)->lpVtbl -> reset(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMHTMLFormElement_INTERFACE_DEFINED__ */


#ifndef __IDOMHTMLSelectElement_INTERFACE_DEFINED__
#define __IDOMHTMLSelectElement_INTERFACE_DEFINED__

/* interface IDOMHTMLSelectElement */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMHTMLSelectElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3825AA04-B38F-4399-95BB-F5410B29594A")
    IDOMHTMLSelectElement : public IDOMHTMLElement
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE type( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE selectedIndex( 
            /* [retval][out] */ int *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setSelectedIndx( 
            /* [in] */ int selectedIndex) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE value( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setValue( 
            /* [in] */ BSTR value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE length( 
            /* [retval][out] */ int *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE form( 
            /* [retval][out] */ IDOMHTMLFormElement **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE options( 
            /* [retval][out] */ IDOMHTMLOptionsCollection **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE disabled( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setDisabled( 
            /* [in] */ BOOL disabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE multiple( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setMultiple( 
            /* [in] */ BOOL multiple) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE name( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setName( 
            /* [in] */ BSTR name) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE size( 
            /* [retval][out] */ int *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setSize( 
            /* [in] */ int size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE tabIndex( 
            /* [retval][out] */ int *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setTabIndex( 
            /* [in] */ int tabIndex) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE add( 
            /* [in] */ IDOMHTMLElement *element,
            /* [in] */ IDOMHTMLElement *before) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE remove( 
            /* [in] */ int index) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE blur( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE focus( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMHTMLSelectElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMHTMLSelectElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMHTMLSelectElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMHTMLSelectElement * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *nodeName )( 
            IDOMHTMLSelectElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *nodeValue )( 
            IDOMHTMLSelectElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setNodeValue )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *nodeType )( 
            IDOMHTMLSelectElement * This,
            /* [retval][out] */ unsigned short *result);
        
        HRESULT ( STDMETHODCALLTYPE *parentNode )( 
            IDOMHTMLSelectElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *childNodes )( 
            IDOMHTMLSelectElement * This,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *firstChild )( 
            IDOMHTMLSelectElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *lastChild )( 
            IDOMHTMLSelectElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *previousSibling )( 
            IDOMHTMLSelectElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *nextSibling )( 
            IDOMHTMLSelectElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *attributes )( 
            IDOMHTMLSelectElement * This,
            /* [retval][out] */ IDOMNamedNodeMap **result);
        
        HRESULT ( STDMETHODCALLTYPE *ownerDocument )( 
            IDOMHTMLSelectElement * This,
            /* [retval][out] */ IDOMDocument **result);
        
        HRESULT ( STDMETHODCALLTYPE *insertBefore )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *refChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *replaceChild )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *removeChild )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IDOMHTMLSelectElement * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ BOOL deep,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *normalize )( 
            IDOMHTMLSelectElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *isSupported )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ BSTR feature,
            /* [in] */ BSTR version,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *namespaceURI )( 
            IDOMHTMLSelectElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *prefix )( 
            IDOMHTMLSelectElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setPrefix )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ BSTR prefix);
        
        HRESULT ( STDMETHODCALLTYPE *localName )( 
            IDOMHTMLSelectElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *hasAttributes )( 
            IDOMHTMLSelectElement * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isSameNode )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isEqualNode )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *textContent )( 
            IDOMHTMLSelectElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setTextContent )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ BSTR text);
        
        HRESULT ( STDMETHODCALLTYPE *tagName )( 
            IDOMHTMLSelectElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *getAttribute )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setAttribute )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ BSTR name,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *removeAttribute )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *getAttributeNode )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *setAttributeNode )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ IDOMAttr *newAttr,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *removeAttributeNode )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ IDOMAttr *oldAttr,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *getElementsByTagName )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *getAttributeNS )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setAttributeNS )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR qualifiedName,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *removeAttributeNS )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName);
        
        HRESULT ( STDMETHODCALLTYPE *getAttributeNodeNS )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *setAttributeNodeNS )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ IDOMAttr *newAttr,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *getElementsByTagNameNS )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *hasAttribute )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *hasAttributeNS )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *focus )( 
            IDOMHTMLSelectElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *blur )( 
            IDOMHTMLSelectElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *idName )( 
            IDOMHTMLSelectElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setIdName )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ BSTR idName);
        
        HRESULT ( STDMETHODCALLTYPE *title )( 
            IDOMHTMLSelectElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setTitle )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ BSTR title);
        
        HRESULT ( STDMETHODCALLTYPE *lang )( 
            IDOMHTMLSelectElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setLang )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ BSTR lang);
        
        HRESULT ( STDMETHODCALLTYPE *dir )( 
            IDOMHTMLSelectElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setDir )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ BSTR dir);
        
        HRESULT ( STDMETHODCALLTYPE *className )( 
            IDOMHTMLSelectElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setClassName )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ BSTR className);
        
        HRESULT ( STDMETHODCALLTYPE *innerHTML )( 
            IDOMHTMLSelectElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setInnerHTML )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ BSTR html);
        
        HRESULT ( STDMETHODCALLTYPE *innerText )( 
            IDOMHTMLSelectElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setInnerText )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ BSTR text);
        
        HRESULT ( STDMETHODCALLTYPE *type )( 
            IDOMHTMLSelectElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *selectedIndex )( 
            IDOMHTMLSelectElement * This,
            /* [retval][out] */ int *result);
        
        HRESULT ( STDMETHODCALLTYPE *setSelectedIndx )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ int selectedIndex);
        
        HRESULT ( STDMETHODCALLTYPE *value )( 
            IDOMHTMLSelectElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setValue )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *length )( 
            IDOMHTMLSelectElement * This,
            /* [retval][out] */ int *result);
        
        HRESULT ( STDMETHODCALLTYPE *form )( 
            IDOMHTMLSelectElement * This,
            /* [retval][out] */ IDOMHTMLFormElement **result);
        
        HRESULT ( STDMETHODCALLTYPE *options )( 
            IDOMHTMLSelectElement * This,
            /* [retval][out] */ IDOMHTMLOptionsCollection **result);
        
        HRESULT ( STDMETHODCALLTYPE *disabled )( 
            IDOMHTMLSelectElement * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *setDisabled )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ BOOL disabled);
        
        HRESULT ( STDMETHODCALLTYPE *multiple )( 
            IDOMHTMLSelectElement * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *setMultiple )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ BOOL multiple);
        
        HRESULT ( STDMETHODCALLTYPE *name )( 
            IDOMHTMLSelectElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setName )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *size )( 
            IDOMHTMLSelectElement * This,
            /* [retval][out] */ int *size);
        
        HRESULT ( STDMETHODCALLTYPE *setSize )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ int size);
        
        HRESULT ( STDMETHODCALLTYPE *tabIndex )( 
            IDOMHTMLSelectElement * This,
            /* [retval][out] */ int *result);
        
        HRESULT ( STDMETHODCALLTYPE *setTabIndex )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ int tabIndex);
        
        HRESULT ( STDMETHODCALLTYPE *add )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ IDOMHTMLElement *element,
            /* [in] */ IDOMHTMLElement *before);
        
        HRESULT ( STDMETHODCALLTYPE *remove )( 
            IDOMHTMLSelectElement * This,
            /* [in] */ int index);
        
        HRESULT ( STDMETHODCALLTYPE *blur )( 
            IDOMHTMLSelectElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *focus )( 
            IDOMHTMLSelectElement * This);
        
        END_INTERFACE
    } IDOMHTMLSelectElementVtbl;

    interface IDOMHTMLSelectElement
    {
        CONST_VTBL struct IDOMHTMLSelectElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMHTMLSelectElement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMHTMLSelectElement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMHTMLSelectElement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMHTMLSelectElement_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMHTMLSelectElement_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMHTMLSelectElement_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMHTMLSelectElement_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMHTMLSelectElement_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMHTMLSelectElement_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMHTMLSelectElement_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMHTMLSelectElement_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMHTMLSelectElement_nodeName(This,result)	\
    ( (This)->lpVtbl -> nodeName(This,result) ) 

#define IDOMHTMLSelectElement_nodeValue(This,result)	\
    ( (This)->lpVtbl -> nodeValue(This,result) ) 

#define IDOMHTMLSelectElement_setNodeValue(This,value)	\
    ( (This)->lpVtbl -> setNodeValue(This,value) ) 

#define IDOMHTMLSelectElement_nodeType(This,result)	\
    ( (This)->lpVtbl -> nodeType(This,result) ) 

#define IDOMHTMLSelectElement_parentNode(This,result)	\
    ( (This)->lpVtbl -> parentNode(This,result) ) 

#define IDOMHTMLSelectElement_childNodes(This,result)	\
    ( (This)->lpVtbl -> childNodes(This,result) ) 

#define IDOMHTMLSelectElement_firstChild(This,result)	\
    ( (This)->lpVtbl -> firstChild(This,result) ) 

#define IDOMHTMLSelectElement_lastChild(This,result)	\
    ( (This)->lpVtbl -> lastChild(This,result) ) 

#define IDOMHTMLSelectElement_previousSibling(This,result)	\
    ( (This)->lpVtbl -> previousSibling(This,result) ) 

#define IDOMHTMLSelectElement_nextSibling(This,result)	\
    ( (This)->lpVtbl -> nextSibling(This,result) ) 

#define IDOMHTMLSelectElement_attributes(This,result)	\
    ( (This)->lpVtbl -> attributes(This,result) ) 

#define IDOMHTMLSelectElement_ownerDocument(This,result)	\
    ( (This)->lpVtbl -> ownerDocument(This,result) ) 

#define IDOMHTMLSelectElement_insertBefore(This,newChild,refChild,result)	\
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,result) ) 

#define IDOMHTMLSelectElement_replaceChild(This,newChild,oldChild,result)	\
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,result) ) 

#define IDOMHTMLSelectElement_removeChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> removeChild(This,oldChild,result) ) 

#define IDOMHTMLSelectElement_appendChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> appendChild(This,oldChild,result) ) 

#define IDOMHTMLSelectElement_hasChildNodes(This,result)	\
    ( (This)->lpVtbl -> hasChildNodes(This,result) ) 

#define IDOMHTMLSelectElement_cloneNode(This,deep,result)	\
    ( (This)->lpVtbl -> cloneNode(This,deep,result) ) 

#define IDOMHTMLSelectElement_normalize(This)	\
    ( (This)->lpVtbl -> normalize(This) ) 

#define IDOMHTMLSelectElement_isSupported(This,feature,version,result)	\
    ( (This)->lpVtbl -> isSupported(This,feature,version,result) ) 

#define IDOMHTMLSelectElement_namespaceURI(This,result)	\
    ( (This)->lpVtbl -> namespaceURI(This,result) ) 

#define IDOMHTMLSelectElement_prefix(This,result)	\
    ( (This)->lpVtbl -> prefix(This,result) ) 

#define IDOMHTMLSelectElement_setPrefix(This,prefix)	\
    ( (This)->lpVtbl -> setPrefix(This,prefix) ) 

#define IDOMHTMLSelectElement_localName(This,result)	\
    ( (This)->lpVtbl -> localName(This,result) ) 

#define IDOMHTMLSelectElement_hasAttributes(This,result)	\
    ( (This)->lpVtbl -> hasAttributes(This,result) ) 

#define IDOMHTMLSelectElement_isSameNode(This,other,result)	\
    ( (This)->lpVtbl -> isSameNode(This,other,result) ) 

#define IDOMHTMLSelectElement_isEqualNode(This,other,result)	\
    ( (This)->lpVtbl -> isEqualNode(This,other,result) ) 

#define IDOMHTMLSelectElement_textContent(This,result)	\
    ( (This)->lpVtbl -> textContent(This,result) ) 

#define IDOMHTMLSelectElement_setTextContent(This,text)	\
    ( (This)->lpVtbl -> setTextContent(This,text) ) 


#define IDOMHTMLSelectElement_tagName(This,result)	\
    ( (This)->lpVtbl -> tagName(This,result) ) 

#define IDOMHTMLSelectElement_getAttribute(This,name,result)	\
    ( (This)->lpVtbl -> getAttribute(This,name,result) ) 

#define IDOMHTMLSelectElement_setAttribute(This,name,value)	\
    ( (This)->lpVtbl -> setAttribute(This,name,value) ) 

#define IDOMHTMLSelectElement_removeAttribute(This,name)	\
    ( (This)->lpVtbl -> removeAttribute(This,name) ) 

#define IDOMHTMLSelectElement_getAttributeNode(This,name,result)	\
    ( (This)->lpVtbl -> getAttributeNode(This,name,result) ) 

#define IDOMHTMLSelectElement_setAttributeNode(This,newAttr,result)	\
    ( (This)->lpVtbl -> setAttributeNode(This,newAttr,result) ) 

#define IDOMHTMLSelectElement_removeAttributeNode(This,oldAttr,result)	\
    ( (This)->lpVtbl -> removeAttributeNode(This,oldAttr,result) ) 

#define IDOMHTMLSelectElement_getElementsByTagName(This,name,result)	\
    ( (This)->lpVtbl -> getElementsByTagName(This,name,result) ) 

#define IDOMHTMLSelectElement_getAttributeNS(This,namespaceURI,localName,result)	\
    ( (This)->lpVtbl -> getAttributeNS(This,namespaceURI,localName,result) ) 

#define IDOMHTMLSelectElement_setAttributeNS(This,namespaceURI,qualifiedName,value)	\
    ( (This)->lpVtbl -> setAttributeNS(This,namespaceURI,qualifiedName,value) ) 

#define IDOMHTMLSelectElement_removeAttributeNS(This,namespaceURI,localName)	\
    ( (This)->lpVtbl -> removeAttributeNS(This,namespaceURI,localName) ) 

#define IDOMHTMLSelectElement_getAttributeNodeNS(This,namespaceURI,localName,result)	\
    ( (This)->lpVtbl -> getAttributeNodeNS(This,namespaceURI,localName,result) ) 

#define IDOMHTMLSelectElement_setAttributeNodeNS(This,newAttr,result)	\
    ( (This)->lpVtbl -> setAttributeNodeNS(This,newAttr,result) ) 

#define IDOMHTMLSelectElement_getElementsByTagNameNS(This,namespaceURI,localName,result)	\
    ( (This)->lpVtbl -> getElementsByTagNameNS(This,namespaceURI,localName,result) ) 

#define IDOMHTMLSelectElement_hasAttribute(This,name,result)	\
    ( (This)->lpVtbl -> hasAttribute(This,name,result) ) 

#define IDOMHTMLSelectElement_hasAttributeNS(This,namespaceURI,localName,result)	\
    ( (This)->lpVtbl -> hasAttributeNS(This,namespaceURI,localName,result) ) 

#define IDOMHTMLSelectElement_focus(This)	\
    ( (This)->lpVtbl -> focus(This) ) 

#define IDOMHTMLSelectElement_blur(This)	\
    ( (This)->lpVtbl -> blur(This) ) 


#define IDOMHTMLSelectElement_idName(This,result)	\
    ( (This)->lpVtbl -> idName(This,result) ) 

#define IDOMHTMLSelectElement_setIdName(This,idName)	\
    ( (This)->lpVtbl -> setIdName(This,idName) ) 

#define IDOMHTMLSelectElement_title(This,result)	\
    ( (This)->lpVtbl -> title(This,result) ) 

#define IDOMHTMLSelectElement_setTitle(This,title)	\
    ( (This)->lpVtbl -> setTitle(This,title) ) 

#define IDOMHTMLSelectElement_lang(This,result)	\
    ( (This)->lpVtbl -> lang(This,result) ) 

#define IDOMHTMLSelectElement_setLang(This,lang)	\
    ( (This)->lpVtbl -> setLang(This,lang) ) 

#define IDOMHTMLSelectElement_dir(This,result)	\
    ( (This)->lpVtbl -> dir(This,result) ) 

#define IDOMHTMLSelectElement_setDir(This,dir)	\
    ( (This)->lpVtbl -> setDir(This,dir) ) 

#define IDOMHTMLSelectElement_className(This,result)	\
    ( (This)->lpVtbl -> className(This,result) ) 

#define IDOMHTMLSelectElement_setClassName(This,className)	\
    ( (This)->lpVtbl -> setClassName(This,className) ) 

#define IDOMHTMLSelectElement_innerHTML(This,result)	\
    ( (This)->lpVtbl -> innerHTML(This,result) ) 

#define IDOMHTMLSelectElement_setInnerHTML(This,html)	\
    ( (This)->lpVtbl -> setInnerHTML(This,html) ) 

#define IDOMHTMLSelectElement_innerText(This,result)	\
    ( (This)->lpVtbl -> innerText(This,result) ) 

#define IDOMHTMLSelectElement_setInnerText(This,text)	\
    ( (This)->lpVtbl -> setInnerText(This,text) ) 


#define IDOMHTMLSelectElement_type(This,result)	\
    ( (This)->lpVtbl -> type(This,result) ) 

#define IDOMHTMLSelectElement_selectedIndex(This,result)	\
    ( (This)->lpVtbl -> selectedIndex(This,result) ) 

#define IDOMHTMLSelectElement_setSelectedIndx(This,selectedIndex)	\
    ( (This)->lpVtbl -> setSelectedIndx(This,selectedIndex) ) 

#define IDOMHTMLSelectElement_value(This,result)	\
    ( (This)->lpVtbl -> value(This,result) ) 

#define IDOMHTMLSelectElement_setValue(This,value)	\
    ( (This)->lpVtbl -> setValue(This,value) ) 

#define IDOMHTMLSelectElement_length(This,result)	\
    ( (This)->lpVtbl -> length(This,result) ) 

#define IDOMHTMLSelectElement_form(This,result)	\
    ( (This)->lpVtbl -> form(This,result) ) 

#define IDOMHTMLSelectElement_options(This,result)	\
    ( (This)->lpVtbl -> options(This,result) ) 

#define IDOMHTMLSelectElement_disabled(This,result)	\
    ( (This)->lpVtbl -> disabled(This,result) ) 

#define IDOMHTMLSelectElement_setDisabled(This,disabled)	\
    ( (This)->lpVtbl -> setDisabled(This,disabled) ) 

#define IDOMHTMLSelectElement_multiple(This,result)	\
    ( (This)->lpVtbl -> multiple(This,result) ) 

#define IDOMHTMLSelectElement_setMultiple(This,multiple)	\
    ( (This)->lpVtbl -> setMultiple(This,multiple) ) 

#define IDOMHTMLSelectElement_name(This,result)	\
    ( (This)->lpVtbl -> name(This,result) ) 

#define IDOMHTMLSelectElement_setName(This,name)	\
    ( (This)->lpVtbl -> setName(This,name) ) 

#define IDOMHTMLSelectElement_size(This,size)	\
    ( (This)->lpVtbl -> size(This,size) ) 

#define IDOMHTMLSelectElement_setSize(This,size)	\
    ( (This)->lpVtbl -> setSize(This,size) ) 

#define IDOMHTMLSelectElement_tabIndex(This,result)	\
    ( (This)->lpVtbl -> tabIndex(This,result) ) 

#define IDOMHTMLSelectElement_setTabIndex(This,tabIndex)	\
    ( (This)->lpVtbl -> setTabIndex(This,tabIndex) ) 

#define IDOMHTMLSelectElement_add(This,element,before)	\
    ( (This)->lpVtbl -> add(This,element,before) ) 

#define IDOMHTMLSelectElement_remove(This,index)	\
    ( (This)->lpVtbl -> remove(This,index) ) 

#define IDOMHTMLSelectElement_blur(This)	\
    ( (This)->lpVtbl -> blur(This) ) 

#define IDOMHTMLSelectElement_focus(This)	\
    ( (This)->lpVtbl -> focus(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMHTMLSelectElement_INTERFACE_DEFINED__ */


#ifndef __IDOMHTMLOptionElement_INTERFACE_DEFINED__
#define __IDOMHTMLOptionElement_INTERFACE_DEFINED__

/* interface IDOMHTMLOptionElement */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMHTMLOptionElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0E1EF5AB-4008-4d83-9135-D4DC1B4603D4")
    IDOMHTMLOptionElement : public IDOMHTMLElement
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE form( 
            /* [retval][out] */ IDOMHTMLFormElement **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE defaultSelected( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setDefaultSelected( 
            /* [in] */ BOOL defaultSelected) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE text( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE index( 
            /* [retval][out] */ int *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE disabled( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setDisabled( 
            /* [in] */ BOOL disabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE label( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setLabel( 
            /* [in] */ BSTR label) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE selected( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setSelected( 
            /* [in] */ BOOL selected) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE value( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setValue( 
            /* [in] */ BSTR value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMHTMLOptionElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMHTMLOptionElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMHTMLOptionElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMHTMLOptionElement * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *nodeName )( 
            IDOMHTMLOptionElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *nodeValue )( 
            IDOMHTMLOptionElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setNodeValue )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *nodeType )( 
            IDOMHTMLOptionElement * This,
            /* [retval][out] */ unsigned short *result);
        
        HRESULT ( STDMETHODCALLTYPE *parentNode )( 
            IDOMHTMLOptionElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *childNodes )( 
            IDOMHTMLOptionElement * This,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *firstChild )( 
            IDOMHTMLOptionElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *lastChild )( 
            IDOMHTMLOptionElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *previousSibling )( 
            IDOMHTMLOptionElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *nextSibling )( 
            IDOMHTMLOptionElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *attributes )( 
            IDOMHTMLOptionElement * This,
            /* [retval][out] */ IDOMNamedNodeMap **result);
        
        HRESULT ( STDMETHODCALLTYPE *ownerDocument )( 
            IDOMHTMLOptionElement * This,
            /* [retval][out] */ IDOMDocument **result);
        
        HRESULT ( STDMETHODCALLTYPE *insertBefore )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *refChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *replaceChild )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *removeChild )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IDOMHTMLOptionElement * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ BOOL deep,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *normalize )( 
            IDOMHTMLOptionElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *isSupported )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ BSTR feature,
            /* [in] */ BSTR version,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *namespaceURI )( 
            IDOMHTMLOptionElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *prefix )( 
            IDOMHTMLOptionElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setPrefix )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ BSTR prefix);
        
        HRESULT ( STDMETHODCALLTYPE *localName )( 
            IDOMHTMLOptionElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *hasAttributes )( 
            IDOMHTMLOptionElement * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isSameNode )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isEqualNode )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *textContent )( 
            IDOMHTMLOptionElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setTextContent )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ BSTR text);
        
        HRESULT ( STDMETHODCALLTYPE *tagName )( 
            IDOMHTMLOptionElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *getAttribute )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setAttribute )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ BSTR name,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *removeAttribute )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *getAttributeNode )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *setAttributeNode )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ IDOMAttr *newAttr,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *removeAttributeNode )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ IDOMAttr *oldAttr,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *getElementsByTagName )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *getAttributeNS )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setAttributeNS )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR qualifiedName,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *removeAttributeNS )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName);
        
        HRESULT ( STDMETHODCALLTYPE *getAttributeNodeNS )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *setAttributeNodeNS )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ IDOMAttr *newAttr,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *getElementsByTagNameNS )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *hasAttribute )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *hasAttributeNS )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *focus )( 
            IDOMHTMLOptionElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *blur )( 
            IDOMHTMLOptionElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *idName )( 
            IDOMHTMLOptionElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setIdName )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ BSTR idName);
        
        HRESULT ( STDMETHODCALLTYPE *title )( 
            IDOMHTMLOptionElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setTitle )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ BSTR title);
        
        HRESULT ( STDMETHODCALLTYPE *lang )( 
            IDOMHTMLOptionElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setLang )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ BSTR lang);
        
        HRESULT ( STDMETHODCALLTYPE *dir )( 
            IDOMHTMLOptionElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setDir )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ BSTR dir);
        
        HRESULT ( STDMETHODCALLTYPE *className )( 
            IDOMHTMLOptionElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setClassName )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ BSTR className);
        
        HRESULT ( STDMETHODCALLTYPE *innerHTML )( 
            IDOMHTMLOptionElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setInnerHTML )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ BSTR html);
        
        HRESULT ( STDMETHODCALLTYPE *innerText )( 
            IDOMHTMLOptionElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setInnerText )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ BSTR text);
        
        HRESULT ( STDMETHODCALLTYPE *form )( 
            IDOMHTMLOptionElement * This,
            /* [retval][out] */ IDOMHTMLFormElement **result);
        
        HRESULT ( STDMETHODCALLTYPE *defaultSelected )( 
            IDOMHTMLOptionElement * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *setDefaultSelected )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ BOOL defaultSelected);
        
        HRESULT ( STDMETHODCALLTYPE *text )( 
            IDOMHTMLOptionElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *index )( 
            IDOMHTMLOptionElement * This,
            /* [retval][out] */ int *result);
        
        HRESULT ( STDMETHODCALLTYPE *disabled )( 
            IDOMHTMLOptionElement * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *setDisabled )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ BOOL disabled);
        
        HRESULT ( STDMETHODCALLTYPE *label )( 
            IDOMHTMLOptionElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setLabel )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ BSTR label);
        
        HRESULT ( STDMETHODCALLTYPE *selected )( 
            IDOMHTMLOptionElement * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *setSelected )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ BOOL selected);
        
        HRESULT ( STDMETHODCALLTYPE *value )( 
            IDOMHTMLOptionElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setValue )( 
            IDOMHTMLOptionElement * This,
            /* [in] */ BSTR value);
        
        END_INTERFACE
    } IDOMHTMLOptionElementVtbl;

    interface IDOMHTMLOptionElement
    {
        CONST_VTBL struct IDOMHTMLOptionElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMHTMLOptionElement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMHTMLOptionElement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMHTMLOptionElement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMHTMLOptionElement_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMHTMLOptionElement_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMHTMLOptionElement_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMHTMLOptionElement_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMHTMLOptionElement_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMHTMLOptionElement_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMHTMLOptionElement_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMHTMLOptionElement_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMHTMLOptionElement_nodeName(This,result)	\
    ( (This)->lpVtbl -> nodeName(This,result) ) 

#define IDOMHTMLOptionElement_nodeValue(This,result)	\
    ( (This)->lpVtbl -> nodeValue(This,result) ) 

#define IDOMHTMLOptionElement_setNodeValue(This,value)	\
    ( (This)->lpVtbl -> setNodeValue(This,value) ) 

#define IDOMHTMLOptionElement_nodeType(This,result)	\
    ( (This)->lpVtbl -> nodeType(This,result) ) 

#define IDOMHTMLOptionElement_parentNode(This,result)	\
    ( (This)->lpVtbl -> parentNode(This,result) ) 

#define IDOMHTMLOptionElement_childNodes(This,result)	\
    ( (This)->lpVtbl -> childNodes(This,result) ) 

#define IDOMHTMLOptionElement_firstChild(This,result)	\
    ( (This)->lpVtbl -> firstChild(This,result) ) 

#define IDOMHTMLOptionElement_lastChild(This,result)	\
    ( (This)->lpVtbl -> lastChild(This,result) ) 

#define IDOMHTMLOptionElement_previousSibling(This,result)	\
    ( (This)->lpVtbl -> previousSibling(This,result) ) 

#define IDOMHTMLOptionElement_nextSibling(This,result)	\
    ( (This)->lpVtbl -> nextSibling(This,result) ) 

#define IDOMHTMLOptionElement_attributes(This,result)	\
    ( (This)->lpVtbl -> attributes(This,result) ) 

#define IDOMHTMLOptionElement_ownerDocument(This,result)	\
    ( (This)->lpVtbl -> ownerDocument(This,result) ) 

#define IDOMHTMLOptionElement_insertBefore(This,newChild,refChild,result)	\
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,result) ) 

#define IDOMHTMLOptionElement_replaceChild(This,newChild,oldChild,result)	\
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,result) ) 

#define IDOMHTMLOptionElement_removeChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> removeChild(This,oldChild,result) ) 

#define IDOMHTMLOptionElement_appendChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> appendChild(This,oldChild,result) ) 

#define IDOMHTMLOptionElement_hasChildNodes(This,result)	\
    ( (This)->lpVtbl -> hasChildNodes(This,result) ) 

#define IDOMHTMLOptionElement_cloneNode(This,deep,result)	\
    ( (This)->lpVtbl -> cloneNode(This,deep,result) ) 

#define IDOMHTMLOptionElement_normalize(This)	\
    ( (This)->lpVtbl -> normalize(This) ) 

#define IDOMHTMLOptionElement_isSupported(This,feature,version,result)	\
    ( (This)->lpVtbl -> isSupported(This,feature,version,result) ) 

#define IDOMHTMLOptionElement_namespaceURI(This,result)	\
    ( (This)->lpVtbl -> namespaceURI(This,result) ) 

#define IDOMHTMLOptionElement_prefix(This,result)	\
    ( (This)->lpVtbl -> prefix(This,result) ) 

#define IDOMHTMLOptionElement_setPrefix(This,prefix)	\
    ( (This)->lpVtbl -> setPrefix(This,prefix) ) 

#define IDOMHTMLOptionElement_localName(This,result)	\
    ( (This)->lpVtbl -> localName(This,result) ) 

#define IDOMHTMLOptionElement_hasAttributes(This,result)	\
    ( (This)->lpVtbl -> hasAttributes(This,result) ) 

#define IDOMHTMLOptionElement_isSameNode(This,other,result)	\
    ( (This)->lpVtbl -> isSameNode(This,other,result) ) 

#define IDOMHTMLOptionElement_isEqualNode(This,other,result)	\
    ( (This)->lpVtbl -> isEqualNode(This,other,result) ) 

#define IDOMHTMLOptionElement_textContent(This,result)	\
    ( (This)->lpVtbl -> textContent(This,result) ) 

#define IDOMHTMLOptionElement_setTextContent(This,text)	\
    ( (This)->lpVtbl -> setTextContent(This,text) ) 


#define IDOMHTMLOptionElement_tagName(This,result)	\
    ( (This)->lpVtbl -> tagName(This,result) ) 

#define IDOMHTMLOptionElement_getAttribute(This,name,result)	\
    ( (This)->lpVtbl -> getAttribute(This,name,result) ) 

#define IDOMHTMLOptionElement_setAttribute(This,name,value)	\
    ( (This)->lpVtbl -> setAttribute(This,name,value) ) 

#define IDOMHTMLOptionElement_removeAttribute(This,name)	\
    ( (This)->lpVtbl -> removeAttribute(This,name) ) 

#define IDOMHTMLOptionElement_getAttributeNode(This,name,result)	\
    ( (This)->lpVtbl -> getAttributeNode(This,name,result) ) 

#define IDOMHTMLOptionElement_setAttributeNode(This,newAttr,result)	\
    ( (This)->lpVtbl -> setAttributeNode(This,newAttr,result) ) 

#define IDOMHTMLOptionElement_removeAttributeNode(This,oldAttr,result)	\
    ( (This)->lpVtbl -> removeAttributeNode(This,oldAttr,result) ) 

#define IDOMHTMLOptionElement_getElementsByTagName(This,name,result)	\
    ( (This)->lpVtbl -> getElementsByTagName(This,name,result) ) 

#define IDOMHTMLOptionElement_getAttributeNS(This,namespaceURI,localName,result)	\
    ( (This)->lpVtbl -> getAttributeNS(This,namespaceURI,localName,result) ) 

#define IDOMHTMLOptionElement_setAttributeNS(This,namespaceURI,qualifiedName,value)	\
    ( (This)->lpVtbl -> setAttributeNS(This,namespaceURI,qualifiedName,value) ) 

#define IDOMHTMLOptionElement_removeAttributeNS(This,namespaceURI,localName)	\
    ( (This)->lpVtbl -> removeAttributeNS(This,namespaceURI,localName) ) 

#define IDOMHTMLOptionElement_getAttributeNodeNS(This,namespaceURI,localName,result)	\
    ( (This)->lpVtbl -> getAttributeNodeNS(This,namespaceURI,localName,result) ) 

#define IDOMHTMLOptionElement_setAttributeNodeNS(This,newAttr,result)	\
    ( (This)->lpVtbl -> setAttributeNodeNS(This,newAttr,result) ) 

#define IDOMHTMLOptionElement_getElementsByTagNameNS(This,namespaceURI,localName,result)	\
    ( (This)->lpVtbl -> getElementsByTagNameNS(This,namespaceURI,localName,result) ) 

#define IDOMHTMLOptionElement_hasAttribute(This,name,result)	\
    ( (This)->lpVtbl -> hasAttribute(This,name,result) ) 

#define IDOMHTMLOptionElement_hasAttributeNS(This,namespaceURI,localName,result)	\
    ( (This)->lpVtbl -> hasAttributeNS(This,namespaceURI,localName,result) ) 

#define IDOMHTMLOptionElement_focus(This)	\
    ( (This)->lpVtbl -> focus(This) ) 

#define IDOMHTMLOptionElement_blur(This)	\
    ( (This)->lpVtbl -> blur(This) ) 


#define IDOMHTMLOptionElement_idName(This,result)	\
    ( (This)->lpVtbl -> idName(This,result) ) 

#define IDOMHTMLOptionElement_setIdName(This,idName)	\
    ( (This)->lpVtbl -> setIdName(This,idName) ) 

#define IDOMHTMLOptionElement_title(This,result)	\
    ( (This)->lpVtbl -> title(This,result) ) 

#define IDOMHTMLOptionElement_setTitle(This,title)	\
    ( (This)->lpVtbl -> setTitle(This,title) ) 

#define IDOMHTMLOptionElement_lang(This,result)	\
    ( (This)->lpVtbl -> lang(This,result) ) 

#define IDOMHTMLOptionElement_setLang(This,lang)	\
    ( (This)->lpVtbl -> setLang(This,lang) ) 

#define IDOMHTMLOptionElement_dir(This,result)	\
    ( (This)->lpVtbl -> dir(This,result) ) 

#define IDOMHTMLOptionElement_setDir(This,dir)	\
    ( (This)->lpVtbl -> setDir(This,dir) ) 

#define IDOMHTMLOptionElement_className(This,result)	\
    ( (This)->lpVtbl -> className(This,result) ) 

#define IDOMHTMLOptionElement_setClassName(This,className)	\
    ( (This)->lpVtbl -> setClassName(This,className) ) 

#define IDOMHTMLOptionElement_innerHTML(This,result)	\
    ( (This)->lpVtbl -> innerHTML(This,result) ) 

#define IDOMHTMLOptionElement_setInnerHTML(This,html)	\
    ( (This)->lpVtbl -> setInnerHTML(This,html) ) 

#define IDOMHTMLOptionElement_innerText(This,result)	\
    ( (This)->lpVtbl -> innerText(This,result) ) 

#define IDOMHTMLOptionElement_setInnerText(This,text)	\
    ( (This)->lpVtbl -> setInnerText(This,text) ) 


#define IDOMHTMLOptionElement_form(This,result)	\
    ( (This)->lpVtbl -> form(This,result) ) 

#define IDOMHTMLOptionElement_defaultSelected(This,result)	\
    ( (This)->lpVtbl -> defaultSelected(This,result) ) 

#define IDOMHTMLOptionElement_setDefaultSelected(This,defaultSelected)	\
    ( (This)->lpVtbl -> setDefaultSelected(This,defaultSelected) ) 

#define IDOMHTMLOptionElement_text(This,result)	\
    ( (This)->lpVtbl -> text(This,result) ) 

#define IDOMHTMLOptionElement_index(This,result)	\
    ( (This)->lpVtbl -> index(This,result) ) 

#define IDOMHTMLOptionElement_disabled(This,result)	\
    ( (This)->lpVtbl -> disabled(This,result) ) 

#define IDOMHTMLOptionElement_setDisabled(This,disabled)	\
    ( (This)->lpVtbl -> setDisabled(This,disabled) ) 

#define IDOMHTMLOptionElement_label(This,result)	\
    ( (This)->lpVtbl -> label(This,result) ) 

#define IDOMHTMLOptionElement_setLabel(This,label)	\
    ( (This)->lpVtbl -> setLabel(This,label) ) 

#define IDOMHTMLOptionElement_selected(This,result)	\
    ( (This)->lpVtbl -> selected(This,result) ) 

#define IDOMHTMLOptionElement_setSelected(This,selected)	\
    ( (This)->lpVtbl -> setSelected(This,selected) ) 

#define IDOMHTMLOptionElement_value(This,result)	\
    ( (This)->lpVtbl -> value(This,result) ) 

#define IDOMHTMLOptionElement_setValue(This,value)	\
    ( (This)->lpVtbl -> setValue(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMHTMLOptionElement_INTERFACE_DEFINED__ */


#ifndef __IDOMHTMLInputElement_INTERFACE_DEFINED__
#define __IDOMHTMLInputElement_INTERFACE_DEFINED__

/* interface IDOMHTMLInputElement */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMHTMLInputElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("80C40AC5-1755-4894-812F-479269C262A2")
    IDOMHTMLInputElement : public IDOMElement
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE defaultValue( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setDefaultValue( 
            /* [in] */ BSTR val) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE defaultChecked( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setDefaultChecked( 
            /* [in] */ BSTR checked) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE form( 
            /* [retval][out] */ IDOMHTMLElement **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE accept( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setAccept( 
            /* [in] */ BSTR accept) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE accessKey( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setAccessKey( 
            /* [in] */ BSTR key) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE align( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setAlign( 
            /* [in] */ BSTR align) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE alt( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setAlt( 
            /* [in] */ BSTR alt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE checked( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setChecked( 
            /* [in] */ BOOL checked) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE disabled( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setDisabled( 
            /* [in] */ BOOL disabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE maxLength( 
            /* [retval][out] */ int *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setMaxLength( 
            /* [in] */ int maxLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE name( 
            /* [retval][out] */ BSTR *name) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setName( 
            /* [in] */ BSTR name) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE readOnly( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setReadOnly( 
            /* [in] */ BOOL readOnly) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE size( 
            /* [retval][out] */ unsigned int *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setSize( 
            /* [in] */ unsigned int size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE src( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setSrc( 
            /* [in] */ BSTR src) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE tabIndex( 
            /* [retval][out] */ int *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setTabIndex( 
            /* [in] */ int tabIndex) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE type( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setType( 
            /* [in] */ BSTR type) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE useMap( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setUseMap( 
            /* [in] */ BSTR useMap) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE value( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setValue( 
            /* [in] */ BSTR value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE blur( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE focus( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE select( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE click( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setSelectionStart( 
            /* [in] */ long start) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE selectionStart( 
            /* [retval][out] */ long *start) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setSelectionEnd( 
            /* [in] */ long end) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE selectionEnd( 
            /* [retval][out] */ long *end) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setValueForUser( 
            /* [in] */ BSTR value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMHTMLInputElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMHTMLInputElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMHTMLInputElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMHTMLInputElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMHTMLInputElement * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMHTMLInputElement * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMHTMLInputElement * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMHTMLInputElement * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMHTMLInputElement * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMHTMLInputElement * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMHTMLInputElement * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *nodeName )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *nodeValue )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setNodeValue )( 
            IDOMHTMLInputElement * This,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *nodeType )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ unsigned short *result);
        
        HRESULT ( STDMETHODCALLTYPE *parentNode )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *childNodes )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *firstChild )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *lastChild )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *previousSibling )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *nextSibling )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *attributes )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ IDOMNamedNodeMap **result);
        
        HRESULT ( STDMETHODCALLTYPE *ownerDocument )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ IDOMDocument **result);
        
        HRESULT ( STDMETHODCALLTYPE *insertBefore )( 
            IDOMHTMLInputElement * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *refChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *replaceChild )( 
            IDOMHTMLInputElement * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *removeChild )( 
            IDOMHTMLInputElement * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IDOMHTMLInputElement * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IDOMHTMLInputElement * This,
            /* [in] */ BOOL deep,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *normalize )( 
            IDOMHTMLInputElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *isSupported )( 
            IDOMHTMLInputElement * This,
            /* [in] */ BSTR feature,
            /* [in] */ BSTR version,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *namespaceURI )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *prefix )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setPrefix )( 
            IDOMHTMLInputElement * This,
            /* [in] */ BSTR prefix);
        
        HRESULT ( STDMETHODCALLTYPE *localName )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *hasAttributes )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isSameNode )( 
            IDOMHTMLInputElement * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isEqualNode )( 
            IDOMHTMLInputElement * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *textContent )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setTextContent )( 
            IDOMHTMLInputElement * This,
            /* [in] */ BSTR text);
        
        HRESULT ( STDMETHODCALLTYPE *tagName )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *getAttribute )( 
            IDOMHTMLInputElement * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setAttribute )( 
            IDOMHTMLInputElement * This,
            /* [in] */ BSTR name,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *removeAttribute )( 
            IDOMHTMLInputElement * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *getAttributeNode )( 
            IDOMHTMLInputElement * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *setAttributeNode )( 
            IDOMHTMLInputElement * This,
            /* [in] */ IDOMAttr *newAttr,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *removeAttributeNode )( 
            IDOMHTMLInputElement * This,
            /* [in] */ IDOMAttr *oldAttr,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *getElementsByTagName )( 
            IDOMHTMLInputElement * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *getAttributeNS )( 
            IDOMHTMLInputElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setAttributeNS )( 
            IDOMHTMLInputElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR qualifiedName,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *removeAttributeNS )( 
            IDOMHTMLInputElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName);
        
        HRESULT ( STDMETHODCALLTYPE *getAttributeNodeNS )( 
            IDOMHTMLInputElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *setAttributeNodeNS )( 
            IDOMHTMLInputElement * This,
            /* [in] */ IDOMAttr *newAttr,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *getElementsByTagNameNS )( 
            IDOMHTMLInputElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *hasAttribute )( 
            IDOMHTMLInputElement * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *hasAttributeNS )( 
            IDOMHTMLInputElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *focus )( 
            IDOMHTMLInputElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *blur )( 
            IDOMHTMLInputElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *defaultValue )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setDefaultValue )( 
            IDOMHTMLInputElement * This,
            /* [in] */ BSTR val);
        
        HRESULT ( STDMETHODCALLTYPE *defaultChecked )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *setDefaultChecked )( 
            IDOMHTMLInputElement * This,
            /* [in] */ BSTR checked);
        
        HRESULT ( STDMETHODCALLTYPE *form )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ IDOMHTMLElement **result);
        
        HRESULT ( STDMETHODCALLTYPE *accept )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setAccept )( 
            IDOMHTMLInputElement * This,
            /* [in] */ BSTR accept);
        
        HRESULT ( STDMETHODCALLTYPE *accessKey )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setAccessKey )( 
            IDOMHTMLInputElement * This,
            /* [in] */ BSTR key);
        
        HRESULT ( STDMETHODCALLTYPE *align )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setAlign )( 
            IDOMHTMLInputElement * This,
            /* [in] */ BSTR align);
        
        HRESULT ( STDMETHODCALLTYPE *alt )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setAlt )( 
            IDOMHTMLInputElement * This,
            /* [in] */ BSTR alt);
        
        HRESULT ( STDMETHODCALLTYPE *checked )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *setChecked )( 
            IDOMHTMLInputElement * This,
            /* [in] */ BOOL checked);
        
        HRESULT ( STDMETHODCALLTYPE *disabled )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *setDisabled )( 
            IDOMHTMLInputElement * This,
            /* [in] */ BOOL disabled);
        
        HRESULT ( STDMETHODCALLTYPE *maxLength )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ int *result);
        
        HRESULT ( STDMETHODCALLTYPE *setMaxLength )( 
            IDOMHTMLInputElement * This,
            /* [in] */ int maxLength);
        
        HRESULT ( STDMETHODCALLTYPE *name )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ BSTR *name);
        
        HRESULT ( STDMETHODCALLTYPE *setName )( 
            IDOMHTMLInputElement * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *readOnly )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *setReadOnly )( 
            IDOMHTMLInputElement * This,
            /* [in] */ BOOL readOnly);
        
        HRESULT ( STDMETHODCALLTYPE *size )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ unsigned int *result);
        
        HRESULT ( STDMETHODCALLTYPE *setSize )( 
            IDOMHTMLInputElement * This,
            /* [in] */ unsigned int size);
        
        HRESULT ( STDMETHODCALLTYPE *src )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setSrc )( 
            IDOMHTMLInputElement * This,
            /* [in] */ BSTR src);
        
        HRESULT ( STDMETHODCALLTYPE *tabIndex )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ int *result);
        
        HRESULT ( STDMETHODCALLTYPE *setTabIndex )( 
            IDOMHTMLInputElement * This,
            /* [in] */ int tabIndex);
        
        HRESULT ( STDMETHODCALLTYPE *type )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setType )( 
            IDOMHTMLInputElement * This,
            /* [in] */ BSTR type);
        
        HRESULT ( STDMETHODCALLTYPE *useMap )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setUseMap )( 
            IDOMHTMLInputElement * This,
            /* [in] */ BSTR useMap);
        
        HRESULT ( STDMETHODCALLTYPE *value )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setValue )( 
            IDOMHTMLInputElement * This,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *blur )( 
            IDOMHTMLInputElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *focus )( 
            IDOMHTMLInputElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *select )( 
            IDOMHTMLInputElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *click )( 
            IDOMHTMLInputElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *setSelectionStart )( 
            IDOMHTMLInputElement * This,
            /* [in] */ long start);
        
        HRESULT ( STDMETHODCALLTYPE *selectionStart )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ long *start);
        
        HRESULT ( STDMETHODCALLTYPE *setSelectionEnd )( 
            IDOMHTMLInputElement * This,
            /* [in] */ long end);
        
        HRESULT ( STDMETHODCALLTYPE *selectionEnd )( 
            IDOMHTMLInputElement * This,
            /* [retval][out] */ long *end);
        
        HRESULT ( STDMETHODCALLTYPE *setValueForUser )( 
            IDOMHTMLInputElement * This,
            /* [in] */ BSTR value);
        
        END_INTERFACE
    } IDOMHTMLInputElementVtbl;

    interface IDOMHTMLInputElement
    {
        CONST_VTBL struct IDOMHTMLInputElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMHTMLInputElement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMHTMLInputElement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMHTMLInputElement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMHTMLInputElement_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMHTMLInputElement_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMHTMLInputElement_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMHTMLInputElement_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMHTMLInputElement_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMHTMLInputElement_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMHTMLInputElement_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMHTMLInputElement_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMHTMLInputElement_nodeName(This,result)	\
    ( (This)->lpVtbl -> nodeName(This,result) ) 

#define IDOMHTMLInputElement_nodeValue(This,result)	\
    ( (This)->lpVtbl -> nodeValue(This,result) ) 

#define IDOMHTMLInputElement_setNodeValue(This,value)	\
    ( (This)->lpVtbl -> setNodeValue(This,value) ) 

#define IDOMHTMLInputElement_nodeType(This,result)	\
    ( (This)->lpVtbl -> nodeType(This,result) ) 

#define IDOMHTMLInputElement_parentNode(This,result)	\
    ( (This)->lpVtbl -> parentNode(This,result) ) 

#define IDOMHTMLInputElement_childNodes(This,result)	\
    ( (This)->lpVtbl -> childNodes(This,result) ) 

#define IDOMHTMLInputElement_firstChild(This,result)	\
    ( (This)->lpVtbl -> firstChild(This,result) ) 

#define IDOMHTMLInputElement_lastChild(This,result)	\
    ( (This)->lpVtbl -> lastChild(This,result) ) 

#define IDOMHTMLInputElement_previousSibling(This,result)	\
    ( (This)->lpVtbl -> previousSibling(This,result) ) 

#define IDOMHTMLInputElement_nextSibling(This,result)	\
    ( (This)->lpVtbl -> nextSibling(This,result) ) 

#define IDOMHTMLInputElement_attributes(This,result)	\
    ( (This)->lpVtbl -> attributes(This,result) ) 

#define IDOMHTMLInputElement_ownerDocument(This,result)	\
    ( (This)->lpVtbl -> ownerDocument(This,result) ) 

#define IDOMHTMLInputElement_insertBefore(This,newChild,refChild,result)	\
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,result) ) 

#define IDOMHTMLInputElement_replaceChild(This,newChild,oldChild,result)	\
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,result) ) 

#define IDOMHTMLInputElement_removeChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> removeChild(This,oldChild,result) ) 

#define IDOMHTMLInputElement_appendChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> appendChild(This,oldChild,result) ) 

#define IDOMHTMLInputElement_hasChildNodes(This,result)	\
    ( (This)->lpVtbl -> hasChildNodes(This,result) ) 

#define IDOMHTMLInputElement_cloneNode(This,deep,result)	\
    ( (This)->lpVtbl -> cloneNode(This,deep,result) ) 

#define IDOMHTMLInputElement_normalize(This)	\
    ( (This)->lpVtbl -> normalize(This) ) 

#define IDOMHTMLInputElement_isSupported(This,feature,version,result)	\
    ( (This)->lpVtbl -> isSupported(This,feature,version,result) ) 

#define IDOMHTMLInputElement_namespaceURI(This,result)	\
    ( (This)->lpVtbl -> namespaceURI(This,result) ) 

#define IDOMHTMLInputElement_prefix(This,result)	\
    ( (This)->lpVtbl -> prefix(This,result) ) 

#define IDOMHTMLInputElement_setPrefix(This,prefix)	\
    ( (This)->lpVtbl -> setPrefix(This,prefix) ) 

#define IDOMHTMLInputElement_localName(This,result)	\
    ( (This)->lpVtbl -> localName(This,result) ) 

#define IDOMHTMLInputElement_hasAttributes(This,result)	\
    ( (This)->lpVtbl -> hasAttributes(This,result) ) 

#define IDOMHTMLInputElement_isSameNode(This,other,result)	\
    ( (This)->lpVtbl -> isSameNode(This,other,result) ) 

#define IDOMHTMLInputElement_isEqualNode(This,other,result)	\
    ( (This)->lpVtbl -> isEqualNode(This,other,result) ) 

#define IDOMHTMLInputElement_textContent(This,result)	\
    ( (This)->lpVtbl -> textContent(This,result) ) 

#define IDOMHTMLInputElement_setTextContent(This,text)	\
    ( (This)->lpVtbl -> setTextContent(This,text) ) 


#define IDOMHTMLInputElement_tagName(This,result)	\
    ( (This)->lpVtbl -> tagName(This,result) ) 

#define IDOMHTMLInputElement_getAttribute(This,name,result)	\
    ( (This)->lpVtbl -> getAttribute(This,name,result) ) 

#define IDOMHTMLInputElement_setAttribute(This,name,value)	\
    ( (This)->lpVtbl -> setAttribute(This,name,value) ) 

#define IDOMHTMLInputElement_removeAttribute(This,name)	\
    ( (This)->lpVtbl -> removeAttribute(This,name) ) 

#define IDOMHTMLInputElement_getAttributeNode(This,name,result)	\
    ( (This)->lpVtbl -> getAttributeNode(This,name,result) ) 

#define IDOMHTMLInputElement_setAttributeNode(This,newAttr,result)	\
    ( (This)->lpVtbl -> setAttributeNode(This,newAttr,result) ) 

#define IDOMHTMLInputElement_removeAttributeNode(This,oldAttr,result)	\
    ( (This)->lpVtbl -> removeAttributeNode(This,oldAttr,result) ) 

#define IDOMHTMLInputElement_getElementsByTagName(This,name,result)	\
    ( (This)->lpVtbl -> getElementsByTagName(This,name,result) ) 

#define IDOMHTMLInputElement_getAttributeNS(This,namespaceURI,localName,result)	\
    ( (This)->lpVtbl -> getAttributeNS(This,namespaceURI,localName,result) ) 

#define IDOMHTMLInputElement_setAttributeNS(This,namespaceURI,qualifiedName,value)	\
    ( (This)->lpVtbl -> setAttributeNS(This,namespaceURI,qualifiedName,value) ) 

#define IDOMHTMLInputElement_removeAttributeNS(This,namespaceURI,localName)	\
    ( (This)->lpVtbl -> removeAttributeNS(This,namespaceURI,localName) ) 

#define IDOMHTMLInputElement_getAttributeNodeNS(This,namespaceURI,localName,result)	\
    ( (This)->lpVtbl -> getAttributeNodeNS(This,namespaceURI,localName,result) ) 

#define IDOMHTMLInputElement_setAttributeNodeNS(This,newAttr,result)	\
    ( (This)->lpVtbl -> setAttributeNodeNS(This,newAttr,result) ) 

#define IDOMHTMLInputElement_getElementsByTagNameNS(This,namespaceURI,localName,result)	\
    ( (This)->lpVtbl -> getElementsByTagNameNS(This,namespaceURI,localName,result) ) 

#define IDOMHTMLInputElement_hasAttribute(This,name,result)	\
    ( (This)->lpVtbl -> hasAttribute(This,name,result) ) 

#define IDOMHTMLInputElement_hasAttributeNS(This,namespaceURI,localName,result)	\
    ( (This)->lpVtbl -> hasAttributeNS(This,namespaceURI,localName,result) ) 

#define IDOMHTMLInputElement_focus(This)	\
    ( (This)->lpVtbl -> focus(This) ) 

#define IDOMHTMLInputElement_blur(This)	\
    ( (This)->lpVtbl -> blur(This) ) 


#define IDOMHTMLInputElement_defaultValue(This,result)	\
    ( (This)->lpVtbl -> defaultValue(This,result) ) 

#define IDOMHTMLInputElement_setDefaultValue(This,val)	\
    ( (This)->lpVtbl -> setDefaultValue(This,val) ) 

#define IDOMHTMLInputElement_defaultChecked(This,result)	\
    ( (This)->lpVtbl -> defaultChecked(This,result) ) 

#define IDOMHTMLInputElement_setDefaultChecked(This,checked)	\
    ( (This)->lpVtbl -> setDefaultChecked(This,checked) ) 

#define IDOMHTMLInputElement_form(This,result)	\
    ( (This)->lpVtbl -> form(This,result) ) 

#define IDOMHTMLInputElement_accept(This,result)	\
    ( (This)->lpVtbl -> accept(This,result) ) 

#define IDOMHTMLInputElement_setAccept(This,accept)	\
    ( (This)->lpVtbl -> setAccept(This,accept) ) 

#define IDOMHTMLInputElement_accessKey(This,result)	\
    ( (This)->lpVtbl -> accessKey(This,result) ) 

#define IDOMHTMLInputElement_setAccessKey(This,key)	\
    ( (This)->lpVtbl -> setAccessKey(This,key) ) 

#define IDOMHTMLInputElement_align(This,result)	\
    ( (This)->lpVtbl -> align(This,result) ) 

#define IDOMHTMLInputElement_setAlign(This,align)	\
    ( (This)->lpVtbl -> setAlign(This,align) ) 

#define IDOMHTMLInputElement_alt(This,result)	\
    ( (This)->lpVtbl -> alt(This,result) ) 

#define IDOMHTMLInputElement_setAlt(This,alt)	\
    ( (This)->lpVtbl -> setAlt(This,alt) ) 

#define IDOMHTMLInputElement_checked(This,result)	\
    ( (This)->lpVtbl -> checked(This,result) ) 

#define IDOMHTMLInputElement_setChecked(This,checked)	\
    ( (This)->lpVtbl -> setChecked(This,checked) ) 

#define IDOMHTMLInputElement_disabled(This,result)	\
    ( (This)->lpVtbl -> disabled(This,result) ) 

#define IDOMHTMLInputElement_setDisabled(This,disabled)	\
    ( (This)->lpVtbl -> setDisabled(This,disabled) ) 

#define IDOMHTMLInputElement_maxLength(This,result)	\
    ( (This)->lpVtbl -> maxLength(This,result) ) 

#define IDOMHTMLInputElement_setMaxLength(This,maxLength)	\
    ( (This)->lpVtbl -> setMaxLength(This,maxLength) ) 

#define IDOMHTMLInputElement_name(This,name)	\
    ( (This)->lpVtbl -> name(This,name) ) 

#define IDOMHTMLInputElement_setName(This,name)	\
    ( (This)->lpVtbl -> setName(This,name) ) 

#define IDOMHTMLInputElement_readOnly(This,result)	\
    ( (This)->lpVtbl -> readOnly(This,result) ) 

#define IDOMHTMLInputElement_setReadOnly(This,readOnly)	\
    ( (This)->lpVtbl -> setReadOnly(This,readOnly) ) 

#define IDOMHTMLInputElement_size(This,result)	\
    ( (This)->lpVtbl -> size(This,result) ) 

#define IDOMHTMLInputElement_setSize(This,size)	\
    ( (This)->lpVtbl -> setSize(This,size) ) 

#define IDOMHTMLInputElement_src(This,result)	\
    ( (This)->lpVtbl -> src(This,result) ) 

#define IDOMHTMLInputElement_setSrc(This,src)	\
    ( (This)->lpVtbl -> setSrc(This,src) ) 

#define IDOMHTMLInputElement_tabIndex(This,result)	\
    ( (This)->lpVtbl -> tabIndex(This,result) ) 

#define IDOMHTMLInputElement_setTabIndex(This,tabIndex)	\
    ( (This)->lpVtbl -> setTabIndex(This,tabIndex) ) 

#define IDOMHTMLInputElement_type(This,result)	\
    ( (This)->lpVtbl -> type(This,result) ) 

#define IDOMHTMLInputElement_setType(This,type)	\
    ( (This)->lpVtbl -> setType(This,type) ) 

#define IDOMHTMLInputElement_useMap(This,result)	\
    ( (This)->lpVtbl -> useMap(This,result) ) 

#define IDOMHTMLInputElement_setUseMap(This,useMap)	\
    ( (This)->lpVtbl -> setUseMap(This,useMap) ) 

#define IDOMHTMLInputElement_value(This,result)	\
    ( (This)->lpVtbl -> value(This,result) ) 

#define IDOMHTMLInputElement_setValue(This,value)	\
    ( (This)->lpVtbl -> setValue(This,value) ) 

#define IDOMHTMLInputElement_blur(This)	\
    ( (This)->lpVtbl -> blur(This) ) 

#define IDOMHTMLInputElement_focus(This)	\
    ( (This)->lpVtbl -> focus(This) ) 

#define IDOMHTMLInputElement_select(This)	\
    ( (This)->lpVtbl -> select(This) ) 

#define IDOMHTMLInputElement_click(This)	\
    ( (This)->lpVtbl -> click(This) ) 

#define IDOMHTMLInputElement_setSelectionStart(This,start)	\
    ( (This)->lpVtbl -> setSelectionStart(This,start) ) 

#define IDOMHTMLInputElement_selectionStart(This,start)	\
    ( (This)->lpVtbl -> selectionStart(This,start) ) 

#define IDOMHTMLInputElement_setSelectionEnd(This,end)	\
    ( (This)->lpVtbl -> setSelectionEnd(This,end) ) 

#define IDOMHTMLInputElement_selectionEnd(This,end)	\
    ( (This)->lpVtbl -> selectionEnd(This,end) ) 

#define IDOMHTMLInputElement_setValueForUser(This,value)	\
    ( (This)->lpVtbl -> setValueForUser(This,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMHTMLInputElement_INTERFACE_DEFINED__ */


#ifndef __IDOMHTMLTextAreaElement_INTERFACE_DEFINED__
#define __IDOMHTMLTextAreaElement_INTERFACE_DEFINED__

/* interface IDOMHTMLTextAreaElement */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMHTMLTextAreaElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("298B02B7-3EB5-4ba4-AD3F-7FA53241AADE")
    IDOMHTMLTextAreaElement : public IDOMHTMLElement
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE defaultValue( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setDefaultValue( 
            /* [in] */ BSTR val) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE form( 
            /* [retval][out] */ IDOMHTMLElement **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE accessKey( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setAccessKey( 
            /* [in] */ BSTR key) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE cols( 
            /* [retval][out] */ int *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setCols( 
            /* [in] */ int cols) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE disabled( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setDisabled( 
            /* [in] */ BOOL disabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE name( 
            /* [retval][out] */ BSTR *name) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setName( 
            /* [in] */ BSTR name) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE readOnly( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setReadOnly( 
            /* [in] */ BOOL readOnly) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE rows( 
            /* [retval][out] */ int *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setRows( 
            /* [in] */ int rows) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE tabIndex( 
            /* [retval][out] */ int *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setTabIndex( 
            /* [in] */ int tabIndex) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE type( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE value( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setValue( 
            /* [in] */ BSTR value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE blur( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE focus( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE select( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMHTMLTextAreaElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMHTMLTextAreaElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMHTMLTextAreaElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMHTMLTextAreaElement * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *nodeName )( 
            IDOMHTMLTextAreaElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *nodeValue )( 
            IDOMHTMLTextAreaElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setNodeValue )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *nodeType )( 
            IDOMHTMLTextAreaElement * This,
            /* [retval][out] */ unsigned short *result);
        
        HRESULT ( STDMETHODCALLTYPE *parentNode )( 
            IDOMHTMLTextAreaElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *childNodes )( 
            IDOMHTMLTextAreaElement * This,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *firstChild )( 
            IDOMHTMLTextAreaElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *lastChild )( 
            IDOMHTMLTextAreaElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *previousSibling )( 
            IDOMHTMLTextAreaElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *nextSibling )( 
            IDOMHTMLTextAreaElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *attributes )( 
            IDOMHTMLTextAreaElement * This,
            /* [retval][out] */ IDOMNamedNodeMap **result);
        
        HRESULT ( STDMETHODCALLTYPE *ownerDocument )( 
            IDOMHTMLTextAreaElement * This,
            /* [retval][out] */ IDOMDocument **result);
        
        HRESULT ( STDMETHODCALLTYPE *insertBefore )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *refChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *replaceChild )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *removeChild )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IDOMHTMLTextAreaElement * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ BOOL deep,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *normalize )( 
            IDOMHTMLTextAreaElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *isSupported )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ BSTR feature,
            /* [in] */ BSTR version,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *namespaceURI )( 
            IDOMHTMLTextAreaElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *prefix )( 
            IDOMHTMLTextAreaElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setPrefix )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ BSTR prefix);
        
        HRESULT ( STDMETHODCALLTYPE *localName )( 
            IDOMHTMLTextAreaElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *hasAttributes )( 
            IDOMHTMLTextAreaElement * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isSameNode )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isEqualNode )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *textContent )( 
            IDOMHTMLTextAreaElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setTextContent )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ BSTR text);
        
        HRESULT ( STDMETHODCALLTYPE *tagName )( 
            IDOMHTMLTextAreaElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *getAttribute )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setAttribute )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ BSTR name,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *removeAttribute )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *getAttributeNode )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *setAttributeNode )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ IDOMAttr *newAttr,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *removeAttributeNode )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ IDOMAttr *oldAttr,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *getElementsByTagName )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *getAttributeNS )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setAttributeNS )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR qualifiedName,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *removeAttributeNS )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName);
        
        HRESULT ( STDMETHODCALLTYPE *getAttributeNodeNS )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *setAttributeNodeNS )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ IDOMAttr *newAttr,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *getElementsByTagNameNS )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *hasAttribute )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *hasAttributeNS )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *focus )( 
            IDOMHTMLTextAreaElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *blur )( 
            IDOMHTMLTextAreaElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *idName )( 
            IDOMHTMLTextAreaElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setIdName )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ BSTR idName);
        
        HRESULT ( STDMETHODCALLTYPE *title )( 
            IDOMHTMLTextAreaElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setTitle )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ BSTR title);
        
        HRESULT ( STDMETHODCALLTYPE *lang )( 
            IDOMHTMLTextAreaElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setLang )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ BSTR lang);
        
        HRESULT ( STDMETHODCALLTYPE *dir )( 
            IDOMHTMLTextAreaElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setDir )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ BSTR dir);
        
        HRESULT ( STDMETHODCALLTYPE *className )( 
            IDOMHTMLTextAreaElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setClassName )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ BSTR className);
        
        HRESULT ( STDMETHODCALLTYPE *innerHTML )( 
            IDOMHTMLTextAreaElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setInnerHTML )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ BSTR html);
        
        HRESULT ( STDMETHODCALLTYPE *innerText )( 
            IDOMHTMLTextAreaElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setInnerText )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ BSTR text);
        
        HRESULT ( STDMETHODCALLTYPE *defaultValue )( 
            IDOMHTMLTextAreaElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setDefaultValue )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ BSTR val);
        
        HRESULT ( STDMETHODCALLTYPE *form )( 
            IDOMHTMLTextAreaElement * This,
            /* [retval][out] */ IDOMHTMLElement **result);
        
        HRESULT ( STDMETHODCALLTYPE *accessKey )( 
            IDOMHTMLTextAreaElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setAccessKey )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ BSTR key);
        
        HRESULT ( STDMETHODCALLTYPE *cols )( 
            IDOMHTMLTextAreaElement * This,
            /* [retval][out] */ int *result);
        
        HRESULT ( STDMETHODCALLTYPE *setCols )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ int cols);
        
        HRESULT ( STDMETHODCALLTYPE *disabled )( 
            IDOMHTMLTextAreaElement * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *setDisabled )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ BOOL disabled);
        
        HRESULT ( STDMETHODCALLTYPE *name )( 
            IDOMHTMLTextAreaElement * This,
            /* [retval][out] */ BSTR *name);
        
        HRESULT ( STDMETHODCALLTYPE *setName )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *readOnly )( 
            IDOMHTMLTextAreaElement * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *setReadOnly )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ BOOL readOnly);
        
        HRESULT ( STDMETHODCALLTYPE *rows )( 
            IDOMHTMLTextAreaElement * This,
            /* [retval][out] */ int *result);
        
        HRESULT ( STDMETHODCALLTYPE *setRows )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ int rows);
        
        HRESULT ( STDMETHODCALLTYPE *tabIndex )( 
            IDOMHTMLTextAreaElement * This,
            /* [retval][out] */ int *result);
        
        HRESULT ( STDMETHODCALLTYPE *setTabIndex )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ int tabIndex);
        
        HRESULT ( STDMETHODCALLTYPE *type )( 
            IDOMHTMLTextAreaElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *value )( 
            IDOMHTMLTextAreaElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setValue )( 
            IDOMHTMLTextAreaElement * This,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *blur )( 
            IDOMHTMLTextAreaElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *focus )( 
            IDOMHTMLTextAreaElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *select )( 
            IDOMHTMLTextAreaElement * This);
        
        END_INTERFACE
    } IDOMHTMLTextAreaElementVtbl;

    interface IDOMHTMLTextAreaElement
    {
        CONST_VTBL struct IDOMHTMLTextAreaElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMHTMLTextAreaElement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMHTMLTextAreaElement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMHTMLTextAreaElement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMHTMLTextAreaElement_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMHTMLTextAreaElement_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMHTMLTextAreaElement_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMHTMLTextAreaElement_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMHTMLTextAreaElement_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMHTMLTextAreaElement_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMHTMLTextAreaElement_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMHTMLTextAreaElement_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMHTMLTextAreaElement_nodeName(This,result)	\
    ( (This)->lpVtbl -> nodeName(This,result) ) 

#define IDOMHTMLTextAreaElement_nodeValue(This,result)	\
    ( (This)->lpVtbl -> nodeValue(This,result) ) 

#define IDOMHTMLTextAreaElement_setNodeValue(This,value)	\
    ( (This)->lpVtbl -> setNodeValue(This,value) ) 

#define IDOMHTMLTextAreaElement_nodeType(This,result)	\
    ( (This)->lpVtbl -> nodeType(This,result) ) 

#define IDOMHTMLTextAreaElement_parentNode(This,result)	\
    ( (This)->lpVtbl -> parentNode(This,result) ) 

#define IDOMHTMLTextAreaElement_childNodes(This,result)	\
    ( (This)->lpVtbl -> childNodes(This,result) ) 

#define IDOMHTMLTextAreaElement_firstChild(This,result)	\
    ( (This)->lpVtbl -> firstChild(This,result) ) 

#define IDOMHTMLTextAreaElement_lastChild(This,result)	\
    ( (This)->lpVtbl -> lastChild(This,result) ) 

#define IDOMHTMLTextAreaElement_previousSibling(This,result)	\
    ( (This)->lpVtbl -> previousSibling(This,result) ) 

#define IDOMHTMLTextAreaElement_nextSibling(This,result)	\
    ( (This)->lpVtbl -> nextSibling(This,result) ) 

#define IDOMHTMLTextAreaElement_attributes(This,result)	\
    ( (This)->lpVtbl -> attributes(This,result) ) 

#define IDOMHTMLTextAreaElement_ownerDocument(This,result)	\
    ( (This)->lpVtbl -> ownerDocument(This,result) ) 

#define IDOMHTMLTextAreaElement_insertBefore(This,newChild,refChild,result)	\
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,result) ) 

#define IDOMHTMLTextAreaElement_replaceChild(This,newChild,oldChild,result)	\
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,result) ) 

#define IDOMHTMLTextAreaElement_removeChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> removeChild(This,oldChild,result) ) 

#define IDOMHTMLTextAreaElement_appendChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> appendChild(This,oldChild,result) ) 

#define IDOMHTMLTextAreaElement_hasChildNodes(This,result)	\
    ( (This)->lpVtbl -> hasChildNodes(This,result) ) 

#define IDOMHTMLTextAreaElement_cloneNode(This,deep,result)	\
    ( (This)->lpVtbl -> cloneNode(This,deep,result) ) 

#define IDOMHTMLTextAreaElement_normalize(This)	\
    ( (This)->lpVtbl -> normalize(This) ) 

#define IDOMHTMLTextAreaElement_isSupported(This,feature,version,result)	\
    ( (This)->lpVtbl -> isSupported(This,feature,version,result) ) 

#define IDOMHTMLTextAreaElement_namespaceURI(This,result)	\
    ( (This)->lpVtbl -> namespaceURI(This,result) ) 

#define IDOMHTMLTextAreaElement_prefix(This,result)	\
    ( (This)->lpVtbl -> prefix(This,result) ) 

#define IDOMHTMLTextAreaElement_setPrefix(This,prefix)	\
    ( (This)->lpVtbl -> setPrefix(This,prefix) ) 

#define IDOMHTMLTextAreaElement_localName(This,result)	\
    ( (This)->lpVtbl -> localName(This,result) ) 

#define IDOMHTMLTextAreaElement_hasAttributes(This,result)	\
    ( (This)->lpVtbl -> hasAttributes(This,result) ) 

#define IDOMHTMLTextAreaElement_isSameNode(This,other,result)	\
    ( (This)->lpVtbl -> isSameNode(This,other,result) ) 

#define IDOMHTMLTextAreaElement_isEqualNode(This,other,result)	\
    ( (This)->lpVtbl -> isEqualNode(This,other,result) ) 

#define IDOMHTMLTextAreaElement_textContent(This,result)	\
    ( (This)->lpVtbl -> textContent(This,result) ) 

#define IDOMHTMLTextAreaElement_setTextContent(This,text)	\
    ( (This)->lpVtbl -> setTextContent(This,text) ) 


#define IDOMHTMLTextAreaElement_tagName(This,result)	\
    ( (This)->lpVtbl -> tagName(This,result) ) 

#define IDOMHTMLTextAreaElement_getAttribute(This,name,result)	\
    ( (This)->lpVtbl -> getAttribute(This,name,result) ) 

#define IDOMHTMLTextAreaElement_setAttribute(This,name,value)	\
    ( (This)->lpVtbl -> setAttribute(This,name,value) ) 

#define IDOMHTMLTextAreaElement_removeAttribute(This,name)	\
    ( (This)->lpVtbl -> removeAttribute(This,name) ) 

#define IDOMHTMLTextAreaElement_getAttributeNode(This,name,result)	\
    ( (This)->lpVtbl -> getAttributeNode(This,name,result) ) 

#define IDOMHTMLTextAreaElement_setAttributeNode(This,newAttr,result)	\
    ( (This)->lpVtbl -> setAttributeNode(This,newAttr,result) ) 

#define IDOMHTMLTextAreaElement_removeAttributeNode(This,oldAttr,result)	\
    ( (This)->lpVtbl -> removeAttributeNode(This,oldAttr,result) ) 

#define IDOMHTMLTextAreaElement_getElementsByTagName(This,name,result)	\
    ( (This)->lpVtbl -> getElementsByTagName(This,name,result) ) 

#define IDOMHTMLTextAreaElement_getAttributeNS(This,namespaceURI,localName,result)	\
    ( (This)->lpVtbl -> getAttributeNS(This,namespaceURI,localName,result) ) 

#define IDOMHTMLTextAreaElement_setAttributeNS(This,namespaceURI,qualifiedName,value)	\
    ( (This)->lpVtbl -> setAttributeNS(This,namespaceURI,qualifiedName,value) ) 

#define IDOMHTMLTextAreaElement_removeAttributeNS(This,namespaceURI,localName)	\
    ( (This)->lpVtbl -> removeAttributeNS(This,namespaceURI,localName) ) 

#define IDOMHTMLTextAreaElement_getAttributeNodeNS(This,namespaceURI,localName,result)	\
    ( (This)->lpVtbl -> getAttributeNodeNS(This,namespaceURI,localName,result) ) 

#define IDOMHTMLTextAreaElement_setAttributeNodeNS(This,newAttr,result)	\
    ( (This)->lpVtbl -> setAttributeNodeNS(This,newAttr,result) ) 

#define IDOMHTMLTextAreaElement_getElementsByTagNameNS(This,namespaceURI,localName,result)	\
    ( (This)->lpVtbl -> getElementsByTagNameNS(This,namespaceURI,localName,result) ) 

#define IDOMHTMLTextAreaElement_hasAttribute(This,name,result)	\
    ( (This)->lpVtbl -> hasAttribute(This,name,result) ) 

#define IDOMHTMLTextAreaElement_hasAttributeNS(This,namespaceURI,localName,result)	\
    ( (This)->lpVtbl -> hasAttributeNS(This,namespaceURI,localName,result) ) 

#define IDOMHTMLTextAreaElement_focus(This)	\
    ( (This)->lpVtbl -> focus(This) ) 

#define IDOMHTMLTextAreaElement_blur(This)	\
    ( (This)->lpVtbl -> blur(This) ) 


#define IDOMHTMLTextAreaElement_idName(This,result)	\
    ( (This)->lpVtbl -> idName(This,result) ) 

#define IDOMHTMLTextAreaElement_setIdName(This,idName)	\
    ( (This)->lpVtbl -> setIdName(This,idName) ) 

#define IDOMHTMLTextAreaElement_title(This,result)	\
    ( (This)->lpVtbl -> title(This,result) ) 

#define IDOMHTMLTextAreaElement_setTitle(This,title)	\
    ( (This)->lpVtbl -> setTitle(This,title) ) 

#define IDOMHTMLTextAreaElement_lang(This,result)	\
    ( (This)->lpVtbl -> lang(This,result) ) 

#define IDOMHTMLTextAreaElement_setLang(This,lang)	\
    ( (This)->lpVtbl -> setLang(This,lang) ) 

#define IDOMHTMLTextAreaElement_dir(This,result)	\
    ( (This)->lpVtbl -> dir(This,result) ) 

#define IDOMHTMLTextAreaElement_setDir(This,dir)	\
    ( (This)->lpVtbl -> setDir(This,dir) ) 

#define IDOMHTMLTextAreaElement_className(This,result)	\
    ( (This)->lpVtbl -> className(This,result) ) 

#define IDOMHTMLTextAreaElement_setClassName(This,className)	\
    ( (This)->lpVtbl -> setClassName(This,className) ) 

#define IDOMHTMLTextAreaElement_innerHTML(This,result)	\
    ( (This)->lpVtbl -> innerHTML(This,result) ) 

#define IDOMHTMLTextAreaElement_setInnerHTML(This,html)	\
    ( (This)->lpVtbl -> setInnerHTML(This,html) ) 

#define IDOMHTMLTextAreaElement_innerText(This,result)	\
    ( (This)->lpVtbl -> innerText(This,result) ) 

#define IDOMHTMLTextAreaElement_setInnerText(This,text)	\
    ( (This)->lpVtbl -> setInnerText(This,text) ) 


#define IDOMHTMLTextAreaElement_defaultValue(This,result)	\
    ( (This)->lpVtbl -> defaultValue(This,result) ) 

#define IDOMHTMLTextAreaElement_setDefaultValue(This,val)	\
    ( (This)->lpVtbl -> setDefaultValue(This,val) ) 

#define IDOMHTMLTextAreaElement_form(This,result)	\
    ( (This)->lpVtbl -> form(This,result) ) 

#define IDOMHTMLTextAreaElement_accessKey(This,result)	\
    ( (This)->lpVtbl -> accessKey(This,result) ) 

#define IDOMHTMLTextAreaElement_setAccessKey(This,key)	\
    ( (This)->lpVtbl -> setAccessKey(This,key) ) 

#define IDOMHTMLTextAreaElement_cols(This,result)	\
    ( (This)->lpVtbl -> cols(This,result) ) 

#define IDOMHTMLTextAreaElement_setCols(This,cols)	\
    ( (This)->lpVtbl -> setCols(This,cols) ) 

#define IDOMHTMLTextAreaElement_disabled(This,result)	\
    ( (This)->lpVtbl -> disabled(This,result) ) 

#define IDOMHTMLTextAreaElement_setDisabled(This,disabled)	\
    ( (This)->lpVtbl -> setDisabled(This,disabled) ) 

#define IDOMHTMLTextAreaElement_name(This,name)	\
    ( (This)->lpVtbl -> name(This,name) ) 

#define IDOMHTMLTextAreaElement_setName(This,name)	\
    ( (This)->lpVtbl -> setName(This,name) ) 

#define IDOMHTMLTextAreaElement_readOnly(This,result)	\
    ( (This)->lpVtbl -> readOnly(This,result) ) 

#define IDOMHTMLTextAreaElement_setReadOnly(This,readOnly)	\
    ( (This)->lpVtbl -> setReadOnly(This,readOnly) ) 

#define IDOMHTMLTextAreaElement_rows(This,result)	\
    ( (This)->lpVtbl -> rows(This,result) ) 

#define IDOMHTMLTextAreaElement_setRows(This,rows)	\
    ( (This)->lpVtbl -> setRows(This,rows) ) 

#define IDOMHTMLTextAreaElement_tabIndex(This,result)	\
    ( (This)->lpVtbl -> tabIndex(This,result) ) 

#define IDOMHTMLTextAreaElement_setTabIndex(This,tabIndex)	\
    ( (This)->lpVtbl -> setTabIndex(This,tabIndex) ) 

#define IDOMHTMLTextAreaElement_type(This,result)	\
    ( (This)->lpVtbl -> type(This,result) ) 

#define IDOMHTMLTextAreaElement_value(This,result)	\
    ( (This)->lpVtbl -> value(This,result) ) 

#define IDOMHTMLTextAreaElement_setValue(This,value)	\
    ( (This)->lpVtbl -> setValue(This,value) ) 

#define IDOMHTMLTextAreaElement_blur(This)	\
    ( (This)->lpVtbl -> blur(This) ) 

#define IDOMHTMLTextAreaElement_focus(This)	\
    ( (This)->lpVtbl -> focus(This) ) 

#define IDOMHTMLTextAreaElement_select(This)	\
    ( (This)->lpVtbl -> select(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMHTMLTextAreaElement_INTERFACE_DEFINED__ */


#ifndef __IDOMHTMLIFrameElement_INTERFACE_DEFINED__
#define __IDOMHTMLIFrameElement_INTERFACE_DEFINED__

/* interface IDOMHTMLIFrameElement */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMHTMLIFrameElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8CFFB1DA-7BA5-4cf7-B7E6-80583354855B")
    IDOMHTMLIFrameElement : public IDOMHTMLElement
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE contentFrame( 
            /* [retval][out] */ IWebFrame **result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMHTMLIFrameElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMHTMLIFrameElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMHTMLIFrameElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMHTMLIFrameElement * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *nodeName )( 
            IDOMHTMLIFrameElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *nodeValue )( 
            IDOMHTMLIFrameElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setNodeValue )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *nodeType )( 
            IDOMHTMLIFrameElement * This,
            /* [retval][out] */ unsigned short *result);
        
        HRESULT ( STDMETHODCALLTYPE *parentNode )( 
            IDOMHTMLIFrameElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *childNodes )( 
            IDOMHTMLIFrameElement * This,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *firstChild )( 
            IDOMHTMLIFrameElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *lastChild )( 
            IDOMHTMLIFrameElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *previousSibling )( 
            IDOMHTMLIFrameElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *nextSibling )( 
            IDOMHTMLIFrameElement * This,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *attributes )( 
            IDOMHTMLIFrameElement * This,
            /* [retval][out] */ IDOMNamedNodeMap **result);
        
        HRESULT ( STDMETHODCALLTYPE *ownerDocument )( 
            IDOMHTMLIFrameElement * This,
            /* [retval][out] */ IDOMDocument **result);
        
        HRESULT ( STDMETHODCALLTYPE *insertBefore )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *refChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *replaceChild )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ IDOMNode *newChild,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *removeChild )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ IDOMNode *oldChild,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IDOMHTMLIFrameElement * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ BOOL deep,
            /* [retval][out] */ IDOMNode **result);
        
        HRESULT ( STDMETHODCALLTYPE *normalize )( 
            IDOMHTMLIFrameElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *isSupported )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ BSTR feature,
            /* [in] */ BSTR version,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *namespaceURI )( 
            IDOMHTMLIFrameElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *prefix )( 
            IDOMHTMLIFrameElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setPrefix )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ BSTR prefix);
        
        HRESULT ( STDMETHODCALLTYPE *localName )( 
            IDOMHTMLIFrameElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *hasAttributes )( 
            IDOMHTMLIFrameElement * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isSameNode )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isEqualNode )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ IDOMNode *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *textContent )( 
            IDOMHTMLIFrameElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setTextContent )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ BSTR text);
        
        HRESULT ( STDMETHODCALLTYPE *tagName )( 
            IDOMHTMLIFrameElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *getAttribute )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setAttribute )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ BSTR name,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *removeAttribute )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *getAttributeNode )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *setAttributeNode )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ IDOMAttr *newAttr,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *removeAttributeNode )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ IDOMAttr *oldAttr,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *getElementsByTagName )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *getAttributeNS )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setAttributeNS )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR qualifiedName,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *removeAttributeNS )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName);
        
        HRESULT ( STDMETHODCALLTYPE *getAttributeNodeNS )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *setAttributeNodeNS )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ IDOMAttr *newAttr,
            /* [retval][out] */ IDOMAttr **result);
        
        HRESULT ( STDMETHODCALLTYPE *getElementsByTagNameNS )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ IDOMNodeList **result);
        
        HRESULT ( STDMETHODCALLTYPE *hasAttribute )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *hasAttributeNS )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ BSTR namespaceURI,
            /* [in] */ BSTR localName,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *focus )( 
            IDOMHTMLIFrameElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *blur )( 
            IDOMHTMLIFrameElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *idName )( 
            IDOMHTMLIFrameElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setIdName )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ BSTR idName);
        
        HRESULT ( STDMETHODCALLTYPE *title )( 
            IDOMHTMLIFrameElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setTitle )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ BSTR title);
        
        HRESULT ( STDMETHODCALLTYPE *lang )( 
            IDOMHTMLIFrameElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setLang )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ BSTR lang);
        
        HRESULT ( STDMETHODCALLTYPE *dir )( 
            IDOMHTMLIFrameElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setDir )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ BSTR dir);
        
        HRESULT ( STDMETHODCALLTYPE *className )( 
            IDOMHTMLIFrameElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setClassName )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ BSTR className);
        
        HRESULT ( STDMETHODCALLTYPE *innerHTML )( 
            IDOMHTMLIFrameElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setInnerHTML )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ BSTR html);
        
        HRESULT ( STDMETHODCALLTYPE *innerText )( 
            IDOMHTMLIFrameElement * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *setInnerText )( 
            IDOMHTMLIFrameElement * This,
            /* [in] */ BSTR text);
        
        HRESULT ( STDMETHODCALLTYPE *contentFrame )( 
            IDOMHTMLIFrameElement * This,
            /* [retval][out] */ IWebFrame **result);
        
        END_INTERFACE
    } IDOMHTMLIFrameElementVtbl;

    interface IDOMHTMLIFrameElement
    {
        CONST_VTBL struct IDOMHTMLIFrameElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMHTMLIFrameElement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMHTMLIFrameElement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMHTMLIFrameElement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMHTMLIFrameElement_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMHTMLIFrameElement_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMHTMLIFrameElement_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMHTMLIFrameElement_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMHTMLIFrameElement_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMHTMLIFrameElement_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMHTMLIFrameElement_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMHTMLIFrameElement_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMHTMLIFrameElement_nodeName(This,result)	\
    ( (This)->lpVtbl -> nodeName(This,result) ) 

#define IDOMHTMLIFrameElement_nodeValue(This,result)	\
    ( (This)->lpVtbl -> nodeValue(This,result) ) 

#define IDOMHTMLIFrameElement_setNodeValue(This,value)	\
    ( (This)->lpVtbl -> setNodeValue(This,value) ) 

#define IDOMHTMLIFrameElement_nodeType(This,result)	\
    ( (This)->lpVtbl -> nodeType(This,result) ) 

#define IDOMHTMLIFrameElement_parentNode(This,result)	\
    ( (This)->lpVtbl -> parentNode(This,result) ) 

#define IDOMHTMLIFrameElement_childNodes(This,result)	\
    ( (This)->lpVtbl -> childNodes(This,result) ) 

#define IDOMHTMLIFrameElement_firstChild(This,result)	\
    ( (This)->lpVtbl -> firstChild(This,result) ) 

#define IDOMHTMLIFrameElement_lastChild(This,result)	\
    ( (This)->lpVtbl -> lastChild(This,result) ) 

#define IDOMHTMLIFrameElement_previousSibling(This,result)	\
    ( (This)->lpVtbl -> previousSibling(This,result) ) 

#define IDOMHTMLIFrameElement_nextSibling(This,result)	\
    ( (This)->lpVtbl -> nextSibling(This,result) ) 

#define IDOMHTMLIFrameElement_attributes(This,result)	\
    ( (This)->lpVtbl -> attributes(This,result) ) 

#define IDOMHTMLIFrameElement_ownerDocument(This,result)	\
    ( (This)->lpVtbl -> ownerDocument(This,result) ) 

#define IDOMHTMLIFrameElement_insertBefore(This,newChild,refChild,result)	\
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,result) ) 

#define IDOMHTMLIFrameElement_replaceChild(This,newChild,oldChild,result)	\
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,result) ) 

#define IDOMHTMLIFrameElement_removeChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> removeChild(This,oldChild,result) ) 

#define IDOMHTMLIFrameElement_appendChild(This,oldChild,result)	\
    ( (This)->lpVtbl -> appendChild(This,oldChild,result) ) 

#define IDOMHTMLIFrameElement_hasChildNodes(This,result)	\
    ( (This)->lpVtbl -> hasChildNodes(This,result) ) 

#define IDOMHTMLIFrameElement_cloneNode(This,deep,result)	\
    ( (This)->lpVtbl -> cloneNode(This,deep,result) ) 

#define IDOMHTMLIFrameElement_normalize(This)	\
    ( (This)->lpVtbl -> normalize(This) ) 

#define IDOMHTMLIFrameElement_isSupported(This,feature,version,result)	\
    ( (This)->lpVtbl -> isSupported(This,feature,version,result) ) 

#define IDOMHTMLIFrameElement_namespaceURI(This,result)	\
    ( (This)->lpVtbl -> namespaceURI(This,result) ) 

#define IDOMHTMLIFrameElement_prefix(This,result)	\
    ( (This)->lpVtbl -> prefix(This,result) ) 

#define IDOMHTMLIFrameElement_setPrefix(This,prefix)	\
    ( (This)->lpVtbl -> setPrefix(This,prefix) ) 

#define IDOMHTMLIFrameElement_localName(This,result)	\
    ( (This)->lpVtbl -> localName(This,result) ) 

#define IDOMHTMLIFrameElement_hasAttributes(This,result)	\
    ( (This)->lpVtbl -> hasAttributes(This,result) ) 

#define IDOMHTMLIFrameElement_isSameNode(This,other,result)	\
    ( (This)->lpVtbl -> isSameNode(This,other,result) ) 

#define IDOMHTMLIFrameElement_isEqualNode(This,other,result)	\
    ( (This)->lpVtbl -> isEqualNode(This,other,result) ) 

#define IDOMHTMLIFrameElement_textContent(This,result)	\
    ( (This)->lpVtbl -> textContent(This,result) ) 

#define IDOMHTMLIFrameElement_setTextContent(This,text)	\
    ( (This)->lpVtbl -> setTextContent(This,text) ) 


#define IDOMHTMLIFrameElement_tagName(This,result)	\
    ( (This)->lpVtbl -> tagName(This,result) ) 

#define IDOMHTMLIFrameElement_getAttribute(This,name,result)	\
    ( (This)->lpVtbl -> getAttribute(This,name,result) ) 

#define IDOMHTMLIFrameElement_setAttribute(This,name,value)	\
    ( (This)->lpVtbl -> setAttribute(This,name,value) ) 

#define IDOMHTMLIFrameElement_removeAttribute(This,name)	\
    ( (This)->lpVtbl -> removeAttribute(This,name) ) 

#define IDOMHTMLIFrameElement_getAttributeNode(This,name,result)	\
    ( (This)->lpVtbl -> getAttributeNode(This,name,result) ) 

#define IDOMHTMLIFrameElement_setAttributeNode(This,newAttr,result)	\
    ( (This)->lpVtbl -> setAttributeNode(This,newAttr,result) ) 

#define IDOMHTMLIFrameElement_removeAttributeNode(This,oldAttr,result)	\
    ( (This)->lpVtbl -> removeAttributeNode(This,oldAttr,result) ) 

#define IDOMHTMLIFrameElement_getElementsByTagName(This,name,result)	\
    ( (This)->lpVtbl -> getElementsByTagName(This,name,result) ) 

#define IDOMHTMLIFrameElement_getAttributeNS(This,namespaceURI,localName,result)	\
    ( (This)->lpVtbl -> getAttributeNS(This,namespaceURI,localName,result) ) 

#define IDOMHTMLIFrameElement_setAttributeNS(This,namespaceURI,qualifiedName,value)	\
    ( (This)->lpVtbl -> setAttributeNS(This,namespaceURI,qualifiedName,value) ) 

#define IDOMHTMLIFrameElement_removeAttributeNS(This,namespaceURI,localName)	\
    ( (This)->lpVtbl -> removeAttributeNS(This,namespaceURI,localName) ) 

#define IDOMHTMLIFrameElement_getAttributeNodeNS(This,namespaceURI,localName,result)	\
    ( (This)->lpVtbl -> getAttributeNodeNS(This,namespaceURI,localName,result) ) 

#define IDOMHTMLIFrameElement_setAttributeNodeNS(This,newAttr,result)	\
    ( (This)->lpVtbl -> setAttributeNodeNS(This,newAttr,result) ) 

#define IDOMHTMLIFrameElement_getElementsByTagNameNS(This,namespaceURI,localName,result)	\
    ( (This)->lpVtbl -> getElementsByTagNameNS(This,namespaceURI,localName,result) ) 

#define IDOMHTMLIFrameElement_hasAttribute(This,name,result)	\
    ( (This)->lpVtbl -> hasAttribute(This,name,result) ) 

#define IDOMHTMLIFrameElement_hasAttributeNS(This,namespaceURI,localName,result)	\
    ( (This)->lpVtbl -> hasAttributeNS(This,namespaceURI,localName,result) ) 

#define IDOMHTMLIFrameElement_focus(This)	\
    ( (This)->lpVtbl -> focus(This) ) 

#define IDOMHTMLIFrameElement_blur(This)	\
    ( (This)->lpVtbl -> blur(This) ) 


#define IDOMHTMLIFrameElement_idName(This,result)	\
    ( (This)->lpVtbl -> idName(This,result) ) 

#define IDOMHTMLIFrameElement_setIdName(This,idName)	\
    ( (This)->lpVtbl -> setIdName(This,idName) ) 

#define IDOMHTMLIFrameElement_title(This,result)	\
    ( (This)->lpVtbl -> title(This,result) ) 

#define IDOMHTMLIFrameElement_setTitle(This,title)	\
    ( (This)->lpVtbl -> setTitle(This,title) ) 

#define IDOMHTMLIFrameElement_lang(This,result)	\
    ( (This)->lpVtbl -> lang(This,result) ) 

#define IDOMHTMLIFrameElement_setLang(This,lang)	\
    ( (This)->lpVtbl -> setLang(This,lang) ) 

#define IDOMHTMLIFrameElement_dir(This,result)	\
    ( (This)->lpVtbl -> dir(This,result) ) 

#define IDOMHTMLIFrameElement_setDir(This,dir)	\
    ( (This)->lpVtbl -> setDir(This,dir) ) 

#define IDOMHTMLIFrameElement_className(This,result)	\
    ( (This)->lpVtbl -> className(This,result) ) 

#define IDOMHTMLIFrameElement_setClassName(This,className)	\
    ( (This)->lpVtbl -> setClassName(This,className) ) 

#define IDOMHTMLIFrameElement_innerHTML(This,result)	\
    ( (This)->lpVtbl -> innerHTML(This,result) ) 

#define IDOMHTMLIFrameElement_setInnerHTML(This,html)	\
    ( (This)->lpVtbl -> setInnerHTML(This,html) ) 

#define IDOMHTMLIFrameElement_innerText(This,result)	\
    ( (This)->lpVtbl -> innerText(This,result) ) 

#define IDOMHTMLIFrameElement_setInnerText(This,text)	\
    ( (This)->lpVtbl -> setInnerText(This,text) ) 


#define IDOMHTMLIFrameElement_contentFrame(This,result)	\
    ( (This)->lpVtbl -> contentFrame(This,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMHTMLIFrameElement_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0047 */
/* [local] */ 


typedef struct WebFontDescription WebFontDescription;



extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0047_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0047_v0_0_s_ifspec;

#ifndef __IDOMElementPrivate_INTERFACE_DEFINED__
#define __IDOMElementPrivate_INTERFACE_DEFINED__

/* interface IDOMElementPrivate */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMElementPrivate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7FF28EC8-6DA1-498d-9A43-7E67C2D3128F")
    IDOMElementPrivate : public IUnknown
    {
    public:
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE coreElement( 
            void **element) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isEqual( 
            /* [in] */ IDOMElement *other,
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isFocused( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE innerText( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE font( 
            WebFontDescription *webFontDescription) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE renderedImage( 
            /* [retval][out] */ HBITMAP *image) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE markerTextForListItem( 
            /* [retval][out] */ BSTR *markerText) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMElementPrivateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMElementPrivate * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMElementPrivate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMElementPrivate * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *coreElement )( 
            IDOMElementPrivate * This,
            void **element);
        
        HRESULT ( STDMETHODCALLTYPE *isEqual )( 
            IDOMElementPrivate * This,
            /* [in] */ IDOMElement *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isFocused )( 
            IDOMElementPrivate * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *innerText )( 
            IDOMElementPrivate * This,
            /* [retval][out] */ BSTR *result);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *font )( 
            IDOMElementPrivate * This,
            WebFontDescription *webFontDescription);
        
        HRESULT ( STDMETHODCALLTYPE *renderedImage )( 
            IDOMElementPrivate * This,
            /* [retval][out] */ HBITMAP *image);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *markerTextForListItem )( 
            IDOMElementPrivate * This,
            /* [retval][out] */ BSTR *markerText);
        
        END_INTERFACE
    } IDOMElementPrivateVtbl;

    interface IDOMElementPrivate
    {
        CONST_VTBL struct IDOMElementPrivateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMElementPrivate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMElementPrivate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMElementPrivate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMElementPrivate_coreElement(This,element)	\
    ( (This)->lpVtbl -> coreElement(This,element) ) 

#define IDOMElementPrivate_isEqual(This,other,result)	\
    ( (This)->lpVtbl -> isEqual(This,other,result) ) 

#define IDOMElementPrivate_isFocused(This,result)	\
    ( (This)->lpVtbl -> isFocused(This,result) ) 

#define IDOMElementPrivate_innerText(This,result)	\
    ( (This)->lpVtbl -> innerText(This,result) ) 

#define IDOMElementPrivate_font(This,webFontDescription)	\
    ( (This)->lpVtbl -> font(This,webFontDescription) ) 

#define IDOMElementPrivate_renderedImage(This,image)	\
    ( (This)->lpVtbl -> renderedImage(This,image) ) 

#define IDOMElementPrivate_markerTextForListItem(This,markerText)	\
    ( (This)->lpVtbl -> markerTextForListItem(This,markerText) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMElementPrivate_INTERFACE_DEFINED__ */


#ifndef __IFormsAutoFillTransition_INTERFACE_DEFINED__
#define __IFormsAutoFillTransition_INTERFACE_DEFINED__

/* interface IFormsAutoFillTransition */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IFormsAutoFillTransition;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2DF339BC-B48E-4d35-B93A-299756ED0B4B")
    IFormsAutoFillTransition : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE isTextField( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE rectOnScreen( 
            /* [retval][out] */ LPRECT rect) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE replaceCharactersInRange( 
            /* [in] */ int startTarget,
            /* [in] */ int endTarget,
            /* [in] */ BSTR replacementString,
            /* [in] */ int index) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE selectedRange( 
            /* [out] */ int *start,
            /* [out] */ int *end) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setAutofilled( 
            /* [in] */ BOOL filled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isAutofilled( 
            /* [retval][out] */ BOOL *result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IFormsAutoFillTransitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IFormsAutoFillTransition * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IFormsAutoFillTransition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IFormsAutoFillTransition * This);
        
        HRESULT ( STDMETHODCALLTYPE *isTextField )( 
            IFormsAutoFillTransition * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *rectOnScreen )( 
            IFormsAutoFillTransition * This,
            /* [retval][out] */ LPRECT rect);
        
        HRESULT ( STDMETHODCALLTYPE *replaceCharactersInRange )( 
            IFormsAutoFillTransition * This,
            /* [in] */ int startTarget,
            /* [in] */ int endTarget,
            /* [in] */ BSTR replacementString,
            /* [in] */ int index);
        
        HRESULT ( STDMETHODCALLTYPE *selectedRange )( 
            IFormsAutoFillTransition * This,
            /* [out] */ int *start,
            /* [out] */ int *end);
        
        HRESULT ( STDMETHODCALLTYPE *setAutofilled )( 
            IFormsAutoFillTransition * This,
            /* [in] */ BOOL filled);
        
        HRESULT ( STDMETHODCALLTYPE *isAutofilled )( 
            IFormsAutoFillTransition * This,
            /* [retval][out] */ BOOL *result);
        
        END_INTERFACE
    } IFormsAutoFillTransitionVtbl;

    interface IFormsAutoFillTransition
    {
        CONST_VTBL struct IFormsAutoFillTransitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IFormsAutoFillTransition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IFormsAutoFillTransition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IFormsAutoFillTransition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IFormsAutoFillTransition_isTextField(This,result)	\
    ( (This)->lpVtbl -> isTextField(This,result) ) 

#define IFormsAutoFillTransition_rectOnScreen(This,rect)	\
    ( (This)->lpVtbl -> rectOnScreen(This,rect) ) 

#define IFormsAutoFillTransition_replaceCharactersInRange(This,startTarget,endTarget,replacementString,index)	\
    ( (This)->lpVtbl -> replaceCharactersInRange(This,startTarget,endTarget,replacementString,index) ) 

#define IFormsAutoFillTransition_selectedRange(This,start,end)	\
    ( (This)->lpVtbl -> selectedRange(This,start,end) ) 

#define IFormsAutoFillTransition_setAutofilled(This,filled)	\
    ( (This)->lpVtbl -> setAutofilled(This,filled) ) 

#define IFormsAutoFillTransition_isAutofilled(This,result)	\
    ( (This)->lpVtbl -> isAutofilled(This,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IFormsAutoFillTransition_INTERFACE_DEFINED__ */


#ifndef __IFormPromptAdditions_INTERFACE_DEFINED__
#define __IFormPromptAdditions_INTERFACE_DEFINED__

/* interface IFormPromptAdditions */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IFormPromptAdditions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C8C5F0CD-07B0-4a32-BFA8-AE465E80DD3C")
    IFormPromptAdditions : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE isUserEdited( 
            /* [retval][out] */ BOOL *result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IFormPromptAdditionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IFormPromptAdditions * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IFormPromptAdditions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IFormPromptAdditions * This);
        
        HRESULT ( STDMETHODCALLTYPE *isUserEdited )( 
            IFormPromptAdditions * This,
            /* [retval][out] */ BOOL *result);
        
        END_INTERFACE
    } IFormPromptAdditionsVtbl;

    interface IFormPromptAdditions
    {
        CONST_VTBL struct IFormPromptAdditionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IFormPromptAdditions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IFormPromptAdditions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IFormPromptAdditions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IFormPromptAdditions_isUserEdited(This,result)	\
    ( (This)->lpVtbl -> isUserEdited(This,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IFormPromptAdditions_INTERFACE_DEFINED__ */


#ifndef __IFormsAutoFillTransitionSelect_INTERFACE_DEFINED__
#define __IFormsAutoFillTransitionSelect_INTERFACE_DEFINED__

/* interface IFormsAutoFillTransitionSelect */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IFormsAutoFillTransitionSelect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6959F712-1563-4661-8D8C-F4C739C55839")
    IFormsAutoFillTransitionSelect : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE activateItemAtIndex( 
            /* [in] */ int index) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IFormsAutoFillTransitionSelectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IFormsAutoFillTransitionSelect * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IFormsAutoFillTransitionSelect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IFormsAutoFillTransitionSelect * This);
        
        HRESULT ( STDMETHODCALLTYPE *activateItemAtIndex )( 
            IFormsAutoFillTransitionSelect * This,
            /* [in] */ int index);
        
        END_INTERFACE
    } IFormsAutoFillTransitionSelectVtbl;

    interface IFormsAutoFillTransitionSelect
    {
        CONST_VTBL struct IFormsAutoFillTransitionSelectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IFormsAutoFillTransitionSelect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IFormsAutoFillTransitionSelect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IFormsAutoFillTransitionSelect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IFormsAutoFillTransitionSelect_activateItemAtIndex(This,index)	\
    ( (This)->lpVtbl -> activateItemAtIndex(This,index) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IFormsAutoFillTransitionSelect_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0051 */
/* [local] */ 



typedef 
enum _WebSelectionAffinity
    {	WebSelectionAffinityUpstream	= 0,
	WebSelectionAffinityDownstream	= 1
    } 	WebSelectionAffinity;


enum __MIDL___MIDL_itf_WebKit_0000_0051_0001
    {	DOM_BAD_BOUNDARYPOINTS_ERR	= 1,
	DOM_INVALID_NODE_TYPE_ERR	= 2
    } ;

enum __MIDL___MIDL_itf_WebKit_0000_0051_0002
    {	DOM_START_TO_START	= 0,
	DOM_START_TO_END	= 1,
	DOM_END_TO_END	= 2,
	DOM_END_TO_START	= 3
    } ;


extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0051_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0051_v0_0_s_ifspec;

#ifndef __IDOMRange_INTERFACE_DEFINED__
#define __IDOMRange_INTERFACE_DEFINED__

/* interface IDOMRange */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMRange;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2F33E42C-0B39-48b3-B7B6-E910CDB325AD")
    IDOMRange : public IDOMObject
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE startContainer( 
            /* [retval][out] */ IDOMNode **node) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE startOffset( 
            /* [retval][out] */ int *offset) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE endContainer( 
            /* [retval][out] */ IDOMNode **node) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE endOffset( 
            /* [retval][out] */ int *offset) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE collapsed( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE commonAncestorContainer( 
            /* [retval][out] */ IDOMNode **container) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setStart( 
            /* [in] */ IDOMNode *refNode,
            /* [in] */ int offset) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setEnd( 
            /* [in] */ IDOMNode *refNode,
            /* [in] */ int offset) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setStartBefore( 
            /* [in] */ IDOMNode *refNode) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setStartAfter( 
            /* [in] */ IDOMNode *refNode) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setEndBefore( 
            /* [in] */ IDOMNode *refNode) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setEndAfter( 
            /* [in] */ IDOMNode *refNode) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE collapse( 
            /* [in] */ BOOL toStart) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE selectNode( 
            /* [in] */ IDOMNode *refNode) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE selectNodeContents( 
            /* [in] */ IDOMNode *refNode) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE compareBoundaryPoints( 
            /* [in] */ unsigned short how,
            /* [in] */ IDOMRange *sourceRange) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE deleteContents( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE extractContents( 
            /* [retval][out] */ IDOMDocumentFragment **fragment) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE cloneContents( 
            /* [retval][out] */ IDOMDocumentFragment **fragment) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE insertNode( 
            /* [in] */ IDOMNode *newNode) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE surroundContents( 
            /* [in] */ IDOMNode *newParent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE cloneRange( 
            /* [retval][out] */ IDOMRange **range) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE toString( 
            /* [retval][out] */ BSTR *str) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE detach( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMRangeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMRange * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMRange * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMRange * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMRange * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMRange * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMRange * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMRange * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMRange * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMRange * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMRange * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMRange * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *startContainer )( 
            IDOMRange * This,
            /* [retval][out] */ IDOMNode **node);
        
        HRESULT ( STDMETHODCALLTYPE *startOffset )( 
            IDOMRange * This,
            /* [retval][out] */ int *offset);
        
        HRESULT ( STDMETHODCALLTYPE *endContainer )( 
            IDOMRange * This,
            /* [retval][out] */ IDOMNode **node);
        
        HRESULT ( STDMETHODCALLTYPE *endOffset )( 
            IDOMRange * This,
            /* [retval][out] */ int *offset);
        
        HRESULT ( STDMETHODCALLTYPE *collapsed )( 
            IDOMRange * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *commonAncestorContainer )( 
            IDOMRange * This,
            /* [retval][out] */ IDOMNode **container);
        
        HRESULT ( STDMETHODCALLTYPE *setStart )( 
            IDOMRange * This,
            /* [in] */ IDOMNode *refNode,
            /* [in] */ int offset);
        
        HRESULT ( STDMETHODCALLTYPE *setEnd )( 
            IDOMRange * This,
            /* [in] */ IDOMNode *refNode,
            /* [in] */ int offset);
        
        HRESULT ( STDMETHODCALLTYPE *setStartBefore )( 
            IDOMRange * This,
            /* [in] */ IDOMNode *refNode);
        
        HRESULT ( STDMETHODCALLTYPE *setStartAfter )( 
            IDOMRange * This,
            /* [in] */ IDOMNode *refNode);
        
        HRESULT ( STDMETHODCALLTYPE *setEndBefore )( 
            IDOMRange * This,
            /* [in] */ IDOMNode *refNode);
        
        HRESULT ( STDMETHODCALLTYPE *setEndAfter )( 
            IDOMRange * This,
            /* [in] */ IDOMNode *refNode);
        
        HRESULT ( STDMETHODCALLTYPE *collapse )( 
            IDOMRange * This,
            /* [in] */ BOOL toStart);
        
        HRESULT ( STDMETHODCALLTYPE *selectNode )( 
            IDOMRange * This,
            /* [in] */ IDOMNode *refNode);
        
        HRESULT ( STDMETHODCALLTYPE *selectNodeContents )( 
            IDOMRange * This,
            /* [in] */ IDOMNode *refNode);
        
        HRESULT ( STDMETHODCALLTYPE *compareBoundaryPoints )( 
            IDOMRange * This,
            /* [in] */ unsigned short how,
            /* [in] */ IDOMRange *sourceRange);
        
        HRESULT ( STDMETHODCALLTYPE *deleteContents )( 
            IDOMRange * This);
        
        HRESULT ( STDMETHODCALLTYPE *extractContents )( 
            IDOMRange * This,
            /* [retval][out] */ IDOMDocumentFragment **fragment);
        
        HRESULT ( STDMETHODCALLTYPE *cloneContents )( 
            IDOMRange * This,
            /* [retval][out] */ IDOMDocumentFragment **fragment);
        
        HRESULT ( STDMETHODCALLTYPE *insertNode )( 
            IDOMRange * This,
            /* [in] */ IDOMNode *newNode);
        
        HRESULT ( STDMETHODCALLTYPE *surroundContents )( 
            IDOMRange * This,
            /* [in] */ IDOMNode *newParent);
        
        HRESULT ( STDMETHODCALLTYPE *cloneRange )( 
            IDOMRange * This,
            /* [retval][out] */ IDOMRange **range);
        
        HRESULT ( STDMETHODCALLTYPE *toString )( 
            IDOMRange * This,
            /* [retval][out] */ BSTR *str);
        
        HRESULT ( STDMETHODCALLTYPE *detach )( 
            IDOMRange * This);
        
        END_INTERFACE
    } IDOMRangeVtbl;

    interface IDOMRange
    {
        CONST_VTBL struct IDOMRangeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMRange_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMRange_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMRange_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMRange_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMRange_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMRange_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMRange_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMRange_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMRange_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMRange_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMRange_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMRange_startContainer(This,node)	\
    ( (This)->lpVtbl -> startContainer(This,node) ) 

#define IDOMRange_startOffset(This,offset)	\
    ( (This)->lpVtbl -> startOffset(This,offset) ) 

#define IDOMRange_endContainer(This,node)	\
    ( (This)->lpVtbl -> endContainer(This,node) ) 

#define IDOMRange_endOffset(This,offset)	\
    ( (This)->lpVtbl -> endOffset(This,offset) ) 

#define IDOMRange_collapsed(This,result)	\
    ( (This)->lpVtbl -> collapsed(This,result) ) 

#define IDOMRange_commonAncestorContainer(This,container)	\
    ( (This)->lpVtbl -> commonAncestorContainer(This,container) ) 

#define IDOMRange_setStart(This,refNode,offset)	\
    ( (This)->lpVtbl -> setStart(This,refNode,offset) ) 

#define IDOMRange_setEnd(This,refNode,offset)	\
    ( (This)->lpVtbl -> setEnd(This,refNode,offset) ) 

#define IDOMRange_setStartBefore(This,refNode)	\
    ( (This)->lpVtbl -> setStartBefore(This,refNode) ) 

#define IDOMRange_setStartAfter(This,refNode)	\
    ( (This)->lpVtbl -> setStartAfter(This,refNode) ) 

#define IDOMRange_setEndBefore(This,refNode)	\
    ( (This)->lpVtbl -> setEndBefore(This,refNode) ) 

#define IDOMRange_setEndAfter(This,refNode)	\
    ( (This)->lpVtbl -> setEndAfter(This,refNode) ) 

#define IDOMRange_collapse(This,toStart)	\
    ( (This)->lpVtbl -> collapse(This,toStart) ) 

#define IDOMRange_selectNode(This,refNode)	\
    ( (This)->lpVtbl -> selectNode(This,refNode) ) 

#define IDOMRange_selectNodeContents(This,refNode)	\
    ( (This)->lpVtbl -> selectNodeContents(This,refNode) ) 

#define IDOMRange_compareBoundaryPoints(This,how,sourceRange)	\
    ( (This)->lpVtbl -> compareBoundaryPoints(This,how,sourceRange) ) 

#define IDOMRange_deleteContents(This)	\
    ( (This)->lpVtbl -> deleteContents(This) ) 

#define IDOMRange_extractContents(This,fragment)	\
    ( (This)->lpVtbl -> extractContents(This,fragment) ) 

#define IDOMRange_cloneContents(This,fragment)	\
    ( (This)->lpVtbl -> cloneContents(This,fragment) ) 

#define IDOMRange_insertNode(This,newNode)	\
    ( (This)->lpVtbl -> insertNode(This,newNode) ) 

#define IDOMRange_surroundContents(This,newParent)	\
    ( (This)->lpVtbl -> surroundContents(This,newParent) ) 

#define IDOMRange_cloneRange(This,range)	\
    ( (This)->lpVtbl -> cloneRange(This,range) ) 

#define IDOMRange_toString(This,str)	\
    ( (This)->lpVtbl -> toString(This,str) ) 

#define IDOMRange_detach(This)	\
    ( (This)->lpVtbl -> detach(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMRange_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0052 */
/* [local] */ 






extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0052_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0052_v0_0_s_ifspec;

#ifndef __IDOMWindow_INTERFACE_DEFINED__
#define __IDOMWindow_INTERFACE_DEFINED__

/* interface IDOMWindow */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IDOMWindow;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("19126DDF-E82F-46c0-A2F9-16879D7DADC5")
    IDOMWindow : public IDOMObject
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE document( 
            /* [retval][out] */ IDOMDocument **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getComputedStyle( 
            /* [in] */ IDOMElement *element,
            /* [in] */ BSTR pseudoElement) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getMatchedCSSRules( 
            /* [in] */ IDOMElement *element,
            /* [in] */ BSTR pseudoElement,
            /* [in] */ BOOL authorOnly,
            /* [retval][out] */ IDOMCSSRuleList **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE devicePixelRatio( 
            /* [retval][out] */ double *result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDOMWindowVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDOMWindow * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDOMWindow * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDOMWindow * This);
        
        HRESULT ( STDMETHODCALLTYPE *throwException )( 
            IDOMWindow * This,
            /* [in] */ BSTR exceptionMessage,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *callWebScriptMethod )( 
            IDOMWindow * This,
            /* [in] */ BSTR name,
            /* [size_is][in] */ const VARIANT args[  ],
            /* [in] */ int cArgs,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateWebScript )( 
            IDOMWindow * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *removeWebScriptKey )( 
            IDOMWindow * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *stringRepresentation )( 
            IDOMWindow * This,
            /* [retval][out] */ BSTR *stringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *webScriptValueAtIndex )( 
            IDOMWindow * This,
            /* [in] */ unsigned int index,
            /* [retval][out] */ VARIANT *result);
        
        HRESULT ( STDMETHODCALLTYPE *setWebScriptValueAtIndex )( 
            IDOMWindow * This,
            /* [in] */ unsigned int index,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *setException )( 
            IDOMWindow * This,
            /* [in] */ BSTR description);
        
        HRESULT ( STDMETHODCALLTYPE *document )( 
            IDOMWindow * This,
            /* [retval][out] */ IDOMDocument **result);
        
        HRESULT ( STDMETHODCALLTYPE *getComputedStyle )( 
            IDOMWindow * This,
            /* [in] */ IDOMElement *element,
            /* [in] */ BSTR pseudoElement);
        
        HRESULT ( STDMETHODCALLTYPE *getMatchedCSSRules )( 
            IDOMWindow * This,
            /* [in] */ IDOMElement *element,
            /* [in] */ BSTR pseudoElement,
            /* [in] */ BOOL authorOnly,
            /* [retval][out] */ IDOMCSSRuleList **result);
        
        HRESULT ( STDMETHODCALLTYPE *devicePixelRatio )( 
            IDOMWindow * This,
            /* [retval][out] */ double *result);
        
        END_INTERFACE
    } IDOMWindowVtbl;

    interface IDOMWindow
    {
        CONST_VTBL struct IDOMWindowVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDOMWindow_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDOMWindow_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDOMWindow_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDOMWindow_throwException(This,exceptionMessage,result)	\
    ( (This)->lpVtbl -> throwException(This,exceptionMessage,result) ) 

#define IDOMWindow_callWebScriptMethod(This,name,args,cArgs,result)	\
    ( (This)->lpVtbl -> callWebScriptMethod(This,name,args,cArgs,result) ) 

#define IDOMWindow_evaluateWebScript(This,script,result)	\
    ( (This)->lpVtbl -> evaluateWebScript(This,script,result) ) 

#define IDOMWindow_removeWebScriptKey(This,name)	\
    ( (This)->lpVtbl -> removeWebScriptKey(This,name) ) 

#define IDOMWindow_stringRepresentation(This,stringRepresentation)	\
    ( (This)->lpVtbl -> stringRepresentation(This,stringRepresentation) ) 

#define IDOMWindow_webScriptValueAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> webScriptValueAtIndex(This,index,result) ) 

#define IDOMWindow_setWebScriptValueAtIndex(This,index,val)	\
    ( (This)->lpVtbl -> setWebScriptValueAtIndex(This,index,val) ) 

#define IDOMWindow_setException(This,description)	\
    ( (This)->lpVtbl -> setException(This,description) ) 



#define IDOMWindow_document(This,result)	\
    ( (This)->lpVtbl -> document(This,result) ) 

#define IDOMWindow_getComputedStyle(This,element,pseudoElement)	\
    ( (This)->lpVtbl -> getComputedStyle(This,element,pseudoElement) ) 

#define IDOMWindow_getMatchedCSSRules(This,element,pseudoElement,authorOnly,result)	\
    ( (This)->lpVtbl -> getMatchedCSSRules(This,element,pseudoElement,authorOnly,result) ) 

#define IDOMWindow_devicePixelRatio(This,result)	\
    ( (This)->lpVtbl -> devicePixelRatio(This,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDOMWindow_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0053 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0053_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0053_v0_0_s_ifspec;

#ifndef __IWebArchive_INTERFACE_DEFINED__
#define __IWebArchive_INTERFACE_DEFINED__

/* interface IWebArchive */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebArchive;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F07D5252-F66E-4a4d-B9DC-33BD11DCC138")
    IWebArchive : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE initWithMainResource( 
            /* [in] */ IWebResource *mainResource,
            /* [size_is][in] */ IWebResource **subResources,
            /* [in] */ int cSubResources,
            /* [size_is][in] */ IWebArchive **subFrameArchives,
            /* [in] */ int cSubFrameArchives) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE initWithData( 
            /* [in] */ IStream *data) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE initWithNode( 
            /* [in] */ IDOMNode *node) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE mainResource( 
            /* [retval][out] */ IWebResource **resource) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE subResources( 
            /* [retval][out] */ IEnumVARIANT **enumResources) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE subframeArchives( 
            /* [retval][out] */ IEnumVARIANT **enumSubframes) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE data( 
            /* [retval][out] */ IStream **stream) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebArchiveVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebArchive * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebArchive * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebArchive * This);
        
        HRESULT ( STDMETHODCALLTYPE *initWithMainResource )( 
            IWebArchive * This,
            /* [in] */ IWebResource *mainResource,
            /* [size_is][in] */ IWebResource **subResources,
            /* [in] */ int cSubResources,
            /* [size_is][in] */ IWebArchive **subFrameArchives,
            /* [in] */ int cSubFrameArchives);
        
        HRESULT ( STDMETHODCALLTYPE *initWithData )( 
            IWebArchive * This,
            /* [in] */ IStream *data);
        
        HRESULT ( STDMETHODCALLTYPE *initWithNode )( 
            IWebArchive * This,
            /* [in] */ IDOMNode *node);
        
        HRESULT ( STDMETHODCALLTYPE *mainResource )( 
            IWebArchive * This,
            /* [retval][out] */ IWebResource **resource);
        
        HRESULT ( STDMETHODCALLTYPE *subResources )( 
            IWebArchive * This,
            /* [retval][out] */ IEnumVARIANT **enumResources);
        
        HRESULT ( STDMETHODCALLTYPE *subframeArchives )( 
            IWebArchive * This,
            /* [retval][out] */ IEnumVARIANT **enumSubframes);
        
        HRESULT ( STDMETHODCALLTYPE *data )( 
            IWebArchive * This,
            /* [retval][out] */ IStream **stream);
        
        END_INTERFACE
    } IWebArchiveVtbl;

    interface IWebArchive
    {
        CONST_VTBL struct IWebArchiveVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebArchive_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebArchive_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebArchive_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebArchive_initWithMainResource(This,mainResource,subResources,cSubResources,subFrameArchives,cSubFrameArchives)	\
    ( (This)->lpVtbl -> initWithMainResource(This,mainResource,subResources,cSubResources,subFrameArchives,cSubFrameArchives) ) 

#define IWebArchive_initWithData(This,data)	\
    ( (This)->lpVtbl -> initWithData(This,data) ) 

#define IWebArchive_initWithNode(This,node)	\
    ( (This)->lpVtbl -> initWithNode(This,node) ) 

#define IWebArchive_mainResource(This,resource)	\
    ( (This)->lpVtbl -> mainResource(This,resource) ) 

#define IWebArchive_subResources(This,enumResources)	\
    ( (This)->lpVtbl -> subResources(This,enumResources) ) 

#define IWebArchive_subframeArchives(This,enumSubframes)	\
    ( (This)->lpVtbl -> subframeArchives(This,enumSubframes) ) 

#define IWebArchive_data(This,stream)	\
    ( (This)->lpVtbl -> data(This,stream) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebArchive_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0054 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0054_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0054_v0_0_s_ifspec;

#ifndef __IWebBackForwardList_INTERFACE_DEFINED__
#define __IWebBackForwardList_INTERFACE_DEFINED__

/* interface IWebBackForwardList */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebBackForwardList;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C278A16D-B502-4131-B551-DCE3F4ED2B36")
    IWebBackForwardList : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE addItem( 
            /* [in] */ IWebHistoryItem *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE goBack( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE goForward( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE goToItem( 
            /* [in] */ IWebHistoryItem *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE backItem( 
            /* [retval][out] */ IWebHistoryItem **item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE currentItem( 
            /* [retval][out] */ IWebHistoryItem **item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE forwardItem( 
            /* [retval][out] */ IWebHistoryItem **item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE backListWithLimit( 
            /* [in] */ int limit,
            /* [out] */ int *listCount,
            /* [in] */ IWebHistoryItem **list) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE forwardListWithLimit( 
            /* [in] */ int limit,
            /* [out] */ int *listCount,
            /* [in] */ IWebHistoryItem **list) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE capacity( 
            /* [retval][out] */ int *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setCapacity( 
            /* [in] */ int size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE backListCount( 
            /* [retval][out] */ int *count) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE forwardListCount( 
            /* [retval][out] */ int *sizecount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE containsItem( 
            /* [in] */ IWebHistoryItem *item,
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE itemAtIndex( 
            /* [in] */ int index,
            /* [retval][out] */ IWebHistoryItem **item) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebBackForwardListVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebBackForwardList * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebBackForwardList * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebBackForwardList * This);
        
        HRESULT ( STDMETHODCALLTYPE *addItem )( 
            IWebBackForwardList * This,
            /* [in] */ IWebHistoryItem *item);
        
        HRESULT ( STDMETHODCALLTYPE *goBack )( 
            IWebBackForwardList * This);
        
        HRESULT ( STDMETHODCALLTYPE *goForward )( 
            IWebBackForwardList * This);
        
        HRESULT ( STDMETHODCALLTYPE *goToItem )( 
            IWebBackForwardList * This,
            /* [in] */ IWebHistoryItem *item);
        
        HRESULT ( STDMETHODCALLTYPE *backItem )( 
            IWebBackForwardList * This,
            /* [retval][out] */ IWebHistoryItem **item);
        
        HRESULT ( STDMETHODCALLTYPE *currentItem )( 
            IWebBackForwardList * This,
            /* [retval][out] */ IWebHistoryItem **item);
        
        HRESULT ( STDMETHODCALLTYPE *forwardItem )( 
            IWebBackForwardList * This,
            /* [retval][out] */ IWebHistoryItem **item);
        
        HRESULT ( STDMETHODCALLTYPE *backListWithLimit )( 
            IWebBackForwardList * This,
            /* [in] */ int limit,
            /* [out] */ int *listCount,
            /* [in] */ IWebHistoryItem **list);
        
        HRESULT ( STDMETHODCALLTYPE *forwardListWithLimit )( 
            IWebBackForwardList * This,
            /* [in] */ int limit,
            /* [out] */ int *listCount,
            /* [in] */ IWebHistoryItem **list);
        
        HRESULT ( STDMETHODCALLTYPE *capacity )( 
            IWebBackForwardList * This,
            /* [retval][out] */ int *result);
        
        HRESULT ( STDMETHODCALLTYPE *setCapacity )( 
            IWebBackForwardList * This,
            /* [in] */ int size);
        
        HRESULT ( STDMETHODCALLTYPE *backListCount )( 
            IWebBackForwardList * This,
            /* [retval][out] */ int *count);
        
        HRESULT ( STDMETHODCALLTYPE *forwardListCount )( 
            IWebBackForwardList * This,
            /* [retval][out] */ int *sizecount);
        
        HRESULT ( STDMETHODCALLTYPE *containsItem )( 
            IWebBackForwardList * This,
            /* [in] */ IWebHistoryItem *item,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *itemAtIndex )( 
            IWebBackForwardList * This,
            /* [in] */ int index,
            /* [retval][out] */ IWebHistoryItem **item);
        
        END_INTERFACE
    } IWebBackForwardListVtbl;

    interface IWebBackForwardList
    {
        CONST_VTBL struct IWebBackForwardListVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebBackForwardList_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebBackForwardList_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebBackForwardList_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebBackForwardList_addItem(This,item)	\
    ( (This)->lpVtbl -> addItem(This,item) ) 

#define IWebBackForwardList_goBack(This)	\
    ( (This)->lpVtbl -> goBack(This) ) 

#define IWebBackForwardList_goForward(This)	\
    ( (This)->lpVtbl -> goForward(This) ) 

#define IWebBackForwardList_goToItem(This,item)	\
    ( (This)->lpVtbl -> goToItem(This,item) ) 

#define IWebBackForwardList_backItem(This,item)	\
    ( (This)->lpVtbl -> backItem(This,item) ) 

#define IWebBackForwardList_currentItem(This,item)	\
    ( (This)->lpVtbl -> currentItem(This,item) ) 

#define IWebBackForwardList_forwardItem(This,item)	\
    ( (This)->lpVtbl -> forwardItem(This,item) ) 

#define IWebBackForwardList_backListWithLimit(This,limit,listCount,list)	\
    ( (This)->lpVtbl -> backListWithLimit(This,limit,listCount,list) ) 

#define IWebBackForwardList_forwardListWithLimit(This,limit,listCount,list)	\
    ( (This)->lpVtbl -> forwardListWithLimit(This,limit,listCount,list) ) 

#define IWebBackForwardList_capacity(This,result)	\
    ( (This)->lpVtbl -> capacity(This,result) ) 

#define IWebBackForwardList_setCapacity(This,size)	\
    ( (This)->lpVtbl -> setCapacity(This,size) ) 

#define IWebBackForwardList_backListCount(This,count)	\
    ( (This)->lpVtbl -> backListCount(This,count) ) 

#define IWebBackForwardList_forwardListCount(This,sizecount)	\
    ( (This)->lpVtbl -> forwardListCount(This,sizecount) ) 

#define IWebBackForwardList_containsItem(This,item,result)	\
    ( (This)->lpVtbl -> containsItem(This,item,result) ) 

#define IWebBackForwardList_itemAtIndex(This,index,item)	\
    ( (This)->lpVtbl -> itemAtIndex(This,index,item) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebBackForwardList_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0055 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0055_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0055_v0_0_s_ifspec;

#ifndef __IWebBackForwardListPrivate_INTERFACE_DEFINED__
#define __IWebBackForwardListPrivate_INTERFACE_DEFINED__

/* interface IWebBackForwardListPrivate */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebBackForwardListPrivate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0296A841-F6B1-4334-B146-7F9542CF24C3")
    IWebBackForwardListPrivate : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE removeItem( 
            /* [in] */ IWebHistoryItem *item) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebBackForwardListPrivateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebBackForwardListPrivate * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebBackForwardListPrivate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebBackForwardListPrivate * This);
        
        HRESULT ( STDMETHODCALLTYPE *removeItem )( 
            IWebBackForwardListPrivate * This,
            /* [in] */ IWebHistoryItem *item);
        
        END_INTERFACE
    } IWebBackForwardListPrivateVtbl;

    interface IWebBackForwardListPrivate
    {
        CONST_VTBL struct IWebBackForwardListPrivateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebBackForwardListPrivate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebBackForwardListPrivate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebBackForwardListPrivate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebBackForwardListPrivate_removeItem(This,item)	\
    ( (This)->lpVtbl -> removeItem(This,item) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebBackForwardListPrivate_INTERFACE_DEFINED__ */


#ifndef __IWebCache_INTERFACE_DEFINED__
#define __IWebCache_INTERFACE_DEFINED__

/* interface IWebCache */
/* [unique][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IWebCache;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0673E6F5-AE63-4871-AAC6-6A1E0E6A99AB")
    IWebCache : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE statistics( 
            /* [out][in] */ int *count,
            /* [in] */ IPropertyBag **s) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE empty( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setDisabled( 
            /* [in] */ BOOL disabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE disabled( 
            /* [retval][out] */ BOOL *__MIDL__IWebCache0000) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebCacheVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebCache * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebCache * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebCache * This);
        
        HRESULT ( STDMETHODCALLTYPE *statistics )( 
            IWebCache * This,
            /* [out][in] */ int *count,
            /* [in] */ IPropertyBag **s);
        
        HRESULT ( STDMETHODCALLTYPE *empty )( 
            IWebCache * This);
        
        HRESULT ( STDMETHODCALLTYPE *setDisabled )( 
            IWebCache * This,
            /* [in] */ BOOL disabled);
        
        HRESULT ( STDMETHODCALLTYPE *disabled )( 
            IWebCache * This,
            /* [retval][out] */ BOOL *__MIDL__IWebCache0000);
        
        END_INTERFACE
    } IWebCacheVtbl;

    interface IWebCache
    {
        CONST_VTBL struct IWebCacheVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebCache_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebCache_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebCache_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebCache_statistics(This,count,s)	\
    ( (This)->lpVtbl -> statistics(This,count,s) ) 

#define IWebCache_empty(This)	\
    ( (This)->lpVtbl -> empty(This) ) 

#define IWebCache_setDisabled(This,disabled)	\
    ( (This)->lpVtbl -> setDisabled(This,disabled) ) 

#define IWebCache_disabled(This,__MIDL__IWebCache0000)	\
    ( (This)->lpVtbl -> disabled(This,__MIDL__IWebCache0000) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebCache_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0057 */
/* [local] */ 

// this is done to get midl to treat the CFHTTPCookieStorageRef as pointer types
#if 0
typedef void *CFHTTPCookieStorageRef;

#else
typedef struct OpaqueCFHTTPCookieStorage*  CFHTTPCookieStorageRef;
#endif



extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0057_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0057_v0_0_s_ifspec;

#ifndef __IWebCookieManager_INTERFACE_DEFINED__
#define __IWebCookieManager_INTERFACE_DEFINED__

/* interface IWebCookieManager */
/* [unique][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IWebCookieManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7053FE94-3623-444f-A298-209A90879A8C")
    IWebCookieManager : public IUnknown
    {
    public:
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE cookieStorage( 
            /* [retval][out] */ CFHTTPCookieStorageRef *storage) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE setCookieStorage( 
            /* [in] */ CFHTTPCookieStorageRef storage) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebCookieManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebCookieManager * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebCookieManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebCookieManager * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *cookieStorage )( 
            IWebCookieManager * This,
            /* [retval][out] */ CFHTTPCookieStorageRef *storage);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *setCookieStorage )( 
            IWebCookieManager * This,
            /* [in] */ CFHTTPCookieStorageRef storage);
        
        END_INTERFACE
    } IWebCookieManagerVtbl;

    interface IWebCookieManager
    {
        CONST_VTBL struct IWebCookieManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebCookieManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebCookieManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebCookieManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebCookieManager_cookieStorage(This,storage)	\
    ( (This)->lpVtbl -> cookieStorage(This,storage) ) 

#define IWebCookieManager_setCookieStorage(This,storage)	\
    ( (This)->lpVtbl -> setCookieStorage(This,storage) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebCookieManager_INTERFACE_DEFINED__ */


#ifndef __IWebCoreStatistics_INTERFACE_DEFINED__
#define __IWebCoreStatistics_INTERFACE_DEFINED__

/* interface IWebCoreStatistics */
/* [unique][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IWebCoreStatistics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9607001D-6EEF-4c2c-AD22-94E9DA587973")
    IWebCoreStatistics : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE javaScriptObjectsCount( 
            /* [retval][out] */ UINT *count) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE javaScriptGlobalObjectsCount( 
            /* [retval][out] */ UINT *count) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE javaScriptProtectedObjectsCount( 
            /* [retval][out] */ UINT *count) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE javaScriptProtectedGlobalObjectsCount( 
            /* [retval][out] */ UINT *count) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE iconPageURLMappingCount( 
            /* [retval][out] */ UINT *count) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE iconRetainedPageURLCount( 
            /* [retval][out] */ UINT *count) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE iconRecordCount( 
            /* [retval][out] */ UINT *count) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE iconsWithDataCount( 
            /* [retval][out] */ UINT *count) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE cachedFontDataCount( 
            /* [retval][out] */ UINT *count) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE cachedFontDataInactiveCount( 
            /* [retval][out] */ UINT *count) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE purgeInactiveFontData( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE glyphPageCount( 
            /* [retval][out] */ UINT *count) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE javaScriptProtectedObjectTypeCounts( 
            /* [retval][out] */ IPropertyBag2 **typeNamesAndCounts) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebCoreStatisticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebCoreStatistics * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebCoreStatistics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebCoreStatistics * This);
        
        HRESULT ( STDMETHODCALLTYPE *javaScriptObjectsCount )( 
            IWebCoreStatistics * This,
            /* [retval][out] */ UINT *count);
        
        HRESULT ( STDMETHODCALLTYPE *javaScriptGlobalObjectsCount )( 
            IWebCoreStatistics * This,
            /* [retval][out] */ UINT *count);
        
        HRESULT ( STDMETHODCALLTYPE *javaScriptProtectedObjectsCount )( 
            IWebCoreStatistics * This,
            /* [retval][out] */ UINT *count);
        
        HRESULT ( STDMETHODCALLTYPE *javaScriptProtectedGlobalObjectsCount )( 
            IWebCoreStatistics * This,
            /* [retval][out] */ UINT *count);
        
        HRESULT ( STDMETHODCALLTYPE *iconPageURLMappingCount )( 
            IWebCoreStatistics * This,
            /* [retval][out] */ UINT *count);
        
        HRESULT ( STDMETHODCALLTYPE *iconRetainedPageURLCount )( 
            IWebCoreStatistics * This,
            /* [retval][out] */ UINT *count);
        
        HRESULT ( STDMETHODCALLTYPE *iconRecordCount )( 
            IWebCoreStatistics * This,
            /* [retval][out] */ UINT *count);
        
        HRESULT ( STDMETHODCALLTYPE *iconsWithDataCount )( 
            IWebCoreStatistics * This,
            /* [retval][out] */ UINT *count);
        
        HRESULT ( STDMETHODCALLTYPE *cachedFontDataCount )( 
            IWebCoreStatistics * This,
            /* [retval][out] */ UINT *count);
        
        HRESULT ( STDMETHODCALLTYPE *cachedFontDataInactiveCount )( 
            IWebCoreStatistics * This,
            /* [retval][out] */ UINT *count);
        
        HRESULT ( STDMETHODCALLTYPE *purgeInactiveFontData )( 
            IWebCoreStatistics * This);
        
        HRESULT ( STDMETHODCALLTYPE *glyphPageCount )( 
            IWebCoreStatistics * This,
            /* [retval][out] */ UINT *count);
        
        HRESULT ( STDMETHODCALLTYPE *javaScriptProtectedObjectTypeCounts )( 
            IWebCoreStatistics * This,
            /* [retval][out] */ IPropertyBag2 **typeNamesAndCounts);
        
        END_INTERFACE
    } IWebCoreStatisticsVtbl;

    interface IWebCoreStatistics
    {
        CONST_VTBL struct IWebCoreStatisticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebCoreStatistics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebCoreStatistics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebCoreStatistics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebCoreStatistics_javaScriptObjectsCount(This,count)	\
    ( (This)->lpVtbl -> javaScriptObjectsCount(This,count) ) 

#define IWebCoreStatistics_javaScriptGlobalObjectsCount(This,count)	\
    ( (This)->lpVtbl -> javaScriptGlobalObjectsCount(This,count) ) 

#define IWebCoreStatistics_javaScriptProtectedObjectsCount(This,count)	\
    ( (This)->lpVtbl -> javaScriptProtectedObjectsCount(This,count) ) 

#define IWebCoreStatistics_javaScriptProtectedGlobalObjectsCount(This,count)	\
    ( (This)->lpVtbl -> javaScriptProtectedGlobalObjectsCount(This,count) ) 

#define IWebCoreStatistics_iconPageURLMappingCount(This,count)	\
    ( (This)->lpVtbl -> iconPageURLMappingCount(This,count) ) 

#define IWebCoreStatistics_iconRetainedPageURLCount(This,count)	\
    ( (This)->lpVtbl -> iconRetainedPageURLCount(This,count) ) 

#define IWebCoreStatistics_iconRecordCount(This,count)	\
    ( (This)->lpVtbl -> iconRecordCount(This,count) ) 

#define IWebCoreStatistics_iconsWithDataCount(This,count)	\
    ( (This)->lpVtbl -> iconsWithDataCount(This,count) ) 

#define IWebCoreStatistics_cachedFontDataCount(This,count)	\
    ( (This)->lpVtbl -> cachedFontDataCount(This,count) ) 

#define IWebCoreStatistics_cachedFontDataInactiveCount(This,count)	\
    ( (This)->lpVtbl -> cachedFontDataInactiveCount(This,count) ) 

#define IWebCoreStatistics_purgeInactiveFontData(This)	\
    ( (This)->lpVtbl -> purgeInactiveFontData(This) ) 

#define IWebCoreStatistics_glyphPageCount(This,count)	\
    ( (This)->lpVtbl -> glyphPageCount(This,count) ) 

#define IWebCoreStatistics_javaScriptProtectedObjectTypeCounts(This,typeNamesAndCounts)	\
    ( (This)->lpVtbl -> javaScriptProtectedObjectTypeCounts(This,typeNamesAndCounts) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebCoreStatistics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0059 */
/* [local] */ 













extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0059_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0059_v0_0_s_ifspec;

#ifndef __IWebDataSource_INTERFACE_DEFINED__
#define __IWebDataSource_INTERFACE_DEFINED__

/* interface IWebDataSource */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebDataSource;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5221A975-AE09-4a7b-A4DF-E3B1B5F38A21")
    IWebDataSource : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE initWithRequest( 
            /* [in] */ IWebURLRequest *request) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE data( 
            /* [retval][out] */ IStream **stream) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE representation( 
            /* [retval][out] */ IWebDocumentRepresentation **rep) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE webFrame( 
            /* [retval][out] */ IWebFrame **frame) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE initialRequest( 
            /* [retval][out] */ IWebURLRequest **request) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE request( 
            /* [retval][out] */ IWebMutableURLRequest **request) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE response( 
            /* [retval][out] */ IWebURLResponse **response) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE textEncodingName( 
            /* [retval][out] */ BSTR *name) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isLoading( 
            /* [retval][out] */ BOOL *loading) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE pageTitle( 
            /* [retval][out] */ BSTR *title) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE unreachableURL( 
            /* [retval][out] */ BSTR *url) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE webArchive( 
            /* [retval][out] */ IWebArchive **archive) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE mainResource( 
            /* [retval][out] */ IWebResource **resource) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE subresources( 
            /* [retval][out] */ IEnumVARIANT **enumResources) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE subresourceForURL( 
            /* [in] */ BSTR url,
            /* [retval][out] */ IWebResource **resource) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE addSubresource( 
            /* [in] */ IWebResource *subresource) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebDataSourceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebDataSource * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebDataSource * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebDataSource * This);
        
        HRESULT ( STDMETHODCALLTYPE *initWithRequest )( 
            IWebDataSource * This,
            /* [in] */ IWebURLRequest *request);
        
        HRESULT ( STDMETHODCALLTYPE *data )( 
            IWebDataSource * This,
            /* [retval][out] */ IStream **stream);
        
        HRESULT ( STDMETHODCALLTYPE *representation )( 
            IWebDataSource * This,
            /* [retval][out] */ IWebDocumentRepresentation **rep);
        
        HRESULT ( STDMETHODCALLTYPE *webFrame )( 
            IWebDataSource * This,
            /* [retval][out] */ IWebFrame **frame);
        
        HRESULT ( STDMETHODCALLTYPE *initialRequest )( 
            IWebDataSource * This,
            /* [retval][out] */ IWebURLRequest **request);
        
        HRESULT ( STDMETHODCALLTYPE *request )( 
            IWebDataSource * This,
            /* [retval][out] */ IWebMutableURLRequest **request);
        
        HRESULT ( STDMETHODCALLTYPE *response )( 
            IWebDataSource * This,
            /* [retval][out] */ IWebURLResponse **response);
        
        HRESULT ( STDMETHODCALLTYPE *textEncodingName )( 
            IWebDataSource * This,
            /* [retval][out] */ BSTR *name);
        
        HRESULT ( STDMETHODCALLTYPE *isLoading )( 
            IWebDataSource * This,
            /* [retval][out] */ BOOL *loading);
        
        HRESULT ( STDMETHODCALLTYPE *pageTitle )( 
            IWebDataSource * This,
            /* [retval][out] */ BSTR *title);
        
        HRESULT ( STDMETHODCALLTYPE *unreachableURL )( 
            IWebDataSource * This,
            /* [retval][out] */ BSTR *url);
        
        HRESULT ( STDMETHODCALLTYPE *webArchive )( 
            IWebDataSource * This,
            /* [retval][out] */ IWebArchive **archive);
        
        HRESULT ( STDMETHODCALLTYPE *mainResource )( 
            IWebDataSource * This,
            /* [retval][out] */ IWebResource **resource);
        
        HRESULT ( STDMETHODCALLTYPE *subresources )( 
            IWebDataSource * This,
            /* [retval][out] */ IEnumVARIANT **enumResources);
        
        HRESULT ( STDMETHODCALLTYPE *subresourceForURL )( 
            IWebDataSource * This,
            /* [in] */ BSTR url,
            /* [retval][out] */ IWebResource **resource);
        
        HRESULT ( STDMETHODCALLTYPE *addSubresource )( 
            IWebDataSource * This,
            /* [in] */ IWebResource *subresource);
        
        END_INTERFACE
    } IWebDataSourceVtbl;

    interface IWebDataSource
    {
        CONST_VTBL struct IWebDataSourceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebDataSource_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebDataSource_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebDataSource_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebDataSource_initWithRequest(This,request)	\
    ( (This)->lpVtbl -> initWithRequest(This,request) ) 

#define IWebDataSource_data(This,stream)	\
    ( (This)->lpVtbl -> data(This,stream) ) 

#define IWebDataSource_representation(This,rep)	\
    ( (This)->lpVtbl -> representation(This,rep) ) 

#define IWebDataSource_webFrame(This,frame)	\
    ( (This)->lpVtbl -> webFrame(This,frame) ) 

#define IWebDataSource_initialRequest(This,request)	\
    ( (This)->lpVtbl -> initialRequest(This,request) ) 

#define IWebDataSource_request(This,request)	\
    ( (This)->lpVtbl -> request(This,request) ) 

#define IWebDataSource_response(This,response)	\
    ( (This)->lpVtbl -> response(This,response) ) 

#define IWebDataSource_textEncodingName(This,name)	\
    ( (This)->lpVtbl -> textEncodingName(This,name) ) 

#define IWebDataSource_isLoading(This,loading)	\
    ( (This)->lpVtbl -> isLoading(This,loading) ) 

#define IWebDataSource_pageTitle(This,title)	\
    ( (This)->lpVtbl -> pageTitle(This,title) ) 

#define IWebDataSource_unreachableURL(This,url)	\
    ( (This)->lpVtbl -> unreachableURL(This,url) ) 

#define IWebDataSource_webArchive(This,archive)	\
    ( (This)->lpVtbl -> webArchive(This,archive) ) 

#define IWebDataSource_mainResource(This,resource)	\
    ( (This)->lpVtbl -> mainResource(This,resource) ) 

#define IWebDataSource_subresources(This,enumResources)	\
    ( (This)->lpVtbl -> subresources(This,enumResources) ) 

#define IWebDataSource_subresourceForURL(This,url,resource)	\
    ( (This)->lpVtbl -> subresourceForURL(This,url,resource) ) 

#define IWebDataSource_addSubresource(This,subresource)	\
    ( (This)->lpVtbl -> addSubresource(This,subresource) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebDataSource_INTERFACE_DEFINED__ */


#ifndef __IWebDataSourcePrivate_INTERFACE_DEFINED__
#define __IWebDataSourcePrivate_INTERFACE_DEFINED__

/* interface IWebDataSourcePrivate */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebDataSourcePrivate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4B80B7D4-98D7-4a80-AF46-2AF84B2F2E8F")
    IWebDataSourcePrivate : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE overrideEncoding( 
            /* [retval][out] */ BSTR *encoding) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setOverrideEncoding( 
            /* [in] */ BSTR encoding) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE mainDocumentError( 
            /* [retval][out] */ IWebError **error) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setDeferMainResourceDataLoad( 
            /* [in] */ BOOL flag) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebDataSourcePrivateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebDataSourcePrivate * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebDataSourcePrivate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebDataSourcePrivate * This);
        
        HRESULT ( STDMETHODCALLTYPE *overrideEncoding )( 
            IWebDataSourcePrivate * This,
            /* [retval][out] */ BSTR *encoding);
        
        HRESULT ( STDMETHODCALLTYPE *setOverrideEncoding )( 
            IWebDataSourcePrivate * This,
            /* [in] */ BSTR encoding);
        
        HRESULT ( STDMETHODCALLTYPE *mainDocumentError )( 
            IWebDataSourcePrivate * This,
            /* [retval][out] */ IWebError **error);
        
        HRESULT ( STDMETHODCALLTYPE *setDeferMainResourceDataLoad )( 
            IWebDataSourcePrivate * This,
            /* [in] */ BOOL flag);
        
        END_INTERFACE
    } IWebDataSourcePrivateVtbl;

    interface IWebDataSourcePrivate
    {
        CONST_VTBL struct IWebDataSourcePrivateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebDataSourcePrivate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebDataSourcePrivate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebDataSourcePrivate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebDataSourcePrivate_overrideEncoding(This,encoding)	\
    ( (This)->lpVtbl -> overrideEncoding(This,encoding) ) 

#define IWebDataSourcePrivate_setOverrideEncoding(This,encoding)	\
    ( (This)->lpVtbl -> setOverrideEncoding(This,encoding) ) 

#define IWebDataSourcePrivate_mainDocumentError(This,error)	\
    ( (This)->lpVtbl -> mainDocumentError(This,error) ) 

#define IWebDataSourcePrivate_setDeferMainResourceDataLoad(This,flag)	\
    ( (This)->lpVtbl -> setDeferMainResourceDataLoad(This,flag) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebDataSourcePrivate_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0061 */
/* [local] */ 


#define WebDatabaseDisplayNameKey TEXT("WebDatabaseDisplayNameKey")
#define WebDatabaseExpectedSizeKey TEXT("WebDatabaseExpectedSizeKey")
#define WebDatabaseUsageKey TEXT("WebDatabaseUsageKey")
#define WebDatabaseDidModifyOriginNotification TEXT("WebDatabaseDidModifyOriginNotification")
#define WebDatabaseDidModifyDatabaseNotification TEXT("WebDatabaseDidModifyDatabaseNotification")
#define WebDatabaseNameKey TEXT("WebDatabaseNameKey")


extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0061_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0061_v0_0_s_ifspec;

#ifndef __IWebDatabaseManager_INTERFACE_DEFINED__
#define __IWebDatabaseManager_INTERFACE_DEFINED__

/* interface IWebDatabaseManager */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebDatabaseManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5724f010-a77b-4a42-8f89-a5095b61d469")
    IWebDatabaseManager : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE sharedWebDatabaseManager( 
            /* [retval][out] */ IWebDatabaseManager **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE origins( 
            /* [retval][out] */ IEnumVARIANT **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE databasesWithOrigin( 
            /* [in] */ IWebSecurityOrigin *origin,
            /* [retval][out] */ IEnumVARIANT **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE detailsForDatabase( 
            /* [in] */ BSTR databaseName,
            /* [in] */ IWebSecurityOrigin *origin,
            /* [retval][out] */ IPropertyBag **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE deleteAllDatabases( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE deleteOrigin( 
            /* [in] */ IWebSecurityOrigin *origin) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE deleteDatabase( 
            /* [in] */ BSTR databaseName,
            /* [in] */ IWebSecurityOrigin *origin) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setQuota( 
            /* [in] */ BSTR originName,
            /* [in] */ unsigned long long quota) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebDatabaseManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebDatabaseManager * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebDatabaseManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebDatabaseManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *sharedWebDatabaseManager )( 
            IWebDatabaseManager * This,
            /* [retval][out] */ IWebDatabaseManager **result);
        
        HRESULT ( STDMETHODCALLTYPE *origins )( 
            IWebDatabaseManager * This,
            /* [retval][out] */ IEnumVARIANT **result);
        
        HRESULT ( STDMETHODCALLTYPE *databasesWithOrigin )( 
            IWebDatabaseManager * This,
            /* [in] */ IWebSecurityOrigin *origin,
            /* [retval][out] */ IEnumVARIANT **result);
        
        HRESULT ( STDMETHODCALLTYPE *detailsForDatabase )( 
            IWebDatabaseManager * This,
            /* [in] */ BSTR databaseName,
            /* [in] */ IWebSecurityOrigin *origin,
            /* [retval][out] */ IPropertyBag **result);
        
        HRESULT ( STDMETHODCALLTYPE *deleteAllDatabases )( 
            IWebDatabaseManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *deleteOrigin )( 
            IWebDatabaseManager * This,
            /* [in] */ IWebSecurityOrigin *origin);
        
        HRESULT ( STDMETHODCALLTYPE *deleteDatabase )( 
            IWebDatabaseManager * This,
            /* [in] */ BSTR databaseName,
            /* [in] */ IWebSecurityOrigin *origin);
        
        HRESULT ( STDMETHODCALLTYPE *setQuota )( 
            IWebDatabaseManager * This,
            /* [in] */ BSTR originName,
            /* [in] */ unsigned long long quota);
        
        END_INTERFACE
    } IWebDatabaseManagerVtbl;

    interface IWebDatabaseManager
    {
        CONST_VTBL struct IWebDatabaseManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebDatabaseManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebDatabaseManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebDatabaseManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebDatabaseManager_sharedWebDatabaseManager(This,result)	\
    ( (This)->lpVtbl -> sharedWebDatabaseManager(This,result) ) 

#define IWebDatabaseManager_origins(This,result)	\
    ( (This)->lpVtbl -> origins(This,result) ) 

#define IWebDatabaseManager_databasesWithOrigin(This,origin,result)	\
    ( (This)->lpVtbl -> databasesWithOrigin(This,origin,result) ) 

#define IWebDatabaseManager_detailsForDatabase(This,databaseName,origin,result)	\
    ( (This)->lpVtbl -> detailsForDatabase(This,databaseName,origin,result) ) 

#define IWebDatabaseManager_deleteAllDatabases(This)	\
    ( (This)->lpVtbl -> deleteAllDatabases(This) ) 

#define IWebDatabaseManager_deleteOrigin(This,origin)	\
    ( (This)->lpVtbl -> deleteOrigin(This,origin) ) 

#define IWebDatabaseManager_deleteDatabase(This,databaseName,origin)	\
    ( (This)->lpVtbl -> deleteDatabase(This,databaseName,origin) ) 

#define IWebDatabaseManager_setQuota(This,originName,quota)	\
    ( (This)->lpVtbl -> setQuota(This,originName,quota) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebDatabaseManager_INTERFACE_DEFINED__ */


#ifndef __IWebDesktopNotification_INTERFACE_DEFINED__
#define __IWebDesktopNotification_INTERFACE_DEFINED__

/* interface IWebDesktopNotification */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebDesktopNotification;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0A0AAFA8-C698-4cff-BD28-39614622EEA4")
    IWebDesktopNotification : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE isHTML( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE contentsURL( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE iconURL( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE title( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE text( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE notifyDisplay( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE notifyError( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE notifyClose( 
            /* [in] */ BOOL xplicit) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebDesktopNotificationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebDesktopNotification * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebDesktopNotification * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebDesktopNotification * This);
        
        HRESULT ( STDMETHODCALLTYPE *isHTML )( 
            IWebDesktopNotification * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *contentsURL )( 
            IWebDesktopNotification * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *iconURL )( 
            IWebDesktopNotification * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *title )( 
            IWebDesktopNotification * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *text )( 
            IWebDesktopNotification * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *notifyDisplay )( 
            IWebDesktopNotification * This);
        
        HRESULT ( STDMETHODCALLTYPE *notifyError )( 
            IWebDesktopNotification * This);
        
        HRESULT ( STDMETHODCALLTYPE *notifyClose )( 
            IWebDesktopNotification * This,
            /* [in] */ BOOL xplicit);
        
        END_INTERFACE
    } IWebDesktopNotificationVtbl;

    interface IWebDesktopNotification
    {
        CONST_VTBL struct IWebDesktopNotificationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebDesktopNotification_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebDesktopNotification_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebDesktopNotification_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebDesktopNotification_isHTML(This,result)	\
    ( (This)->lpVtbl -> isHTML(This,result) ) 

#define IWebDesktopNotification_contentsURL(This,result)	\
    ( (This)->lpVtbl -> contentsURL(This,result) ) 

#define IWebDesktopNotification_iconURL(This,result)	\
    ( (This)->lpVtbl -> iconURL(This,result) ) 

#define IWebDesktopNotification_title(This,result)	\
    ( (This)->lpVtbl -> title(This,result) ) 

#define IWebDesktopNotification_text(This,result)	\
    ( (This)->lpVtbl -> text(This,result) ) 

#define IWebDesktopNotification_notifyDisplay(This)	\
    ( (This)->lpVtbl -> notifyDisplay(This) ) 

#define IWebDesktopNotification_notifyError(This)	\
    ( (This)->lpVtbl -> notifyError(This) ) 

#define IWebDesktopNotification_notifyClose(This,xplicit)	\
    ( (This)->lpVtbl -> notifyClose(This,xplicit) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebDesktopNotification_INTERFACE_DEFINED__ */


#ifndef __IWebDesktopNotificationsDelegate_INTERFACE_DEFINED__
#define __IWebDesktopNotificationsDelegate_INTERFACE_DEFINED__

/* interface IWebDesktopNotificationsDelegate */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebDesktopNotificationsDelegate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("09DA073E-38B3-466a-9828-B2915FDD2ECB")
    IWebDesktopNotificationsDelegate : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE showDesktopNotification( 
            /* [in] */ IWebDesktopNotification *notification) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE cancelDesktopNotification( 
            /* [in] */ IWebDesktopNotification *notification) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE notificationDestroyed( 
            /* [in] */ IWebDesktopNotification *notification) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE checkNotificationPermission( 
            /* [in] */ BSTR origin,
            /* [retval][out] */ int *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE requestNotificationPermission( 
            /* [in] */ BSTR origin) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebDesktopNotificationsDelegateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebDesktopNotificationsDelegate * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebDesktopNotificationsDelegate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebDesktopNotificationsDelegate * This);
        
        HRESULT ( STDMETHODCALLTYPE *showDesktopNotification )( 
            IWebDesktopNotificationsDelegate * This,
            /* [in] */ IWebDesktopNotification *notification);
        
        HRESULT ( STDMETHODCALLTYPE *cancelDesktopNotification )( 
            IWebDesktopNotificationsDelegate * This,
            /* [in] */ IWebDesktopNotification *notification);
        
        HRESULT ( STDMETHODCALLTYPE *notificationDestroyed )( 
            IWebDesktopNotificationsDelegate * This,
            /* [in] */ IWebDesktopNotification *notification);
        
        HRESULT ( STDMETHODCALLTYPE *checkNotificationPermission )( 
            IWebDesktopNotificationsDelegate * This,
            /* [in] */ BSTR origin,
            /* [retval][out] */ int *result);
        
        HRESULT ( STDMETHODCALLTYPE *requestNotificationPermission )( 
            IWebDesktopNotificationsDelegate * This,
            /* [in] */ BSTR origin);
        
        END_INTERFACE
    } IWebDesktopNotificationsDelegateVtbl;

    interface IWebDesktopNotificationsDelegate
    {
        CONST_VTBL struct IWebDesktopNotificationsDelegateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebDesktopNotificationsDelegate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebDesktopNotificationsDelegate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebDesktopNotificationsDelegate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebDesktopNotificationsDelegate_showDesktopNotification(This,notification)	\
    ( (This)->lpVtbl -> showDesktopNotification(This,notification) ) 

#define IWebDesktopNotificationsDelegate_cancelDesktopNotification(This,notification)	\
    ( (This)->lpVtbl -> cancelDesktopNotification(This,notification) ) 

#define IWebDesktopNotificationsDelegate_notificationDestroyed(This,notification)	\
    ( (This)->lpVtbl -> notificationDestroyed(This,notification) ) 

#define IWebDesktopNotificationsDelegate_checkNotificationPermission(This,origin,result)	\
    ( (This)->lpVtbl -> checkNotificationPermission(This,origin,result) ) 

#define IWebDesktopNotificationsDelegate_requestNotificationPermission(This,origin)	\
    ( (This)->lpVtbl -> requestNotificationPermission(This,origin) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebDesktopNotificationsDelegate_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0064 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0064_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0064_v0_0_s_ifspec;

#ifndef __IWebDocumentView_INTERFACE_DEFINED__
#define __IWebDocumentView_INTERFACE_DEFINED__

/* interface IWebDocumentView */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebDocumentView;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0A6397A7-90FE-49a0-B9C1-44693DD779F7")
    IWebDocumentView : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE setDataSource( 
            /* [in] */ IWebDataSource *dataSource) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE dataSourceUpdated( 
            /* [in] */ IWebDataSource *dataSource) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setNeedsLayout( 
            /* [in] */ BOOL flag) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE layout( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE viewWillMoveToHostWindow( 
            /* [in] */ OLE_HANDLE hwnd) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE viewDidMoveToHostWindow( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebDocumentViewVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebDocumentView * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebDocumentView * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebDocumentView * This);
        
        HRESULT ( STDMETHODCALLTYPE *setDataSource )( 
            IWebDocumentView * This,
            /* [in] */ IWebDataSource *dataSource);
        
        HRESULT ( STDMETHODCALLTYPE *dataSourceUpdated )( 
            IWebDocumentView * This,
            /* [in] */ IWebDataSource *dataSource);
        
        HRESULT ( STDMETHODCALLTYPE *setNeedsLayout )( 
            IWebDocumentView * This,
            /* [in] */ BOOL flag);
        
        HRESULT ( STDMETHODCALLTYPE *layout )( 
            IWebDocumentView * This);
        
        HRESULT ( STDMETHODCALLTYPE *viewWillMoveToHostWindow )( 
            IWebDocumentView * This,
            /* [in] */ OLE_HANDLE hwnd);
        
        HRESULT ( STDMETHODCALLTYPE *viewDidMoveToHostWindow )( 
            IWebDocumentView * This);
        
        END_INTERFACE
    } IWebDocumentViewVtbl;

    interface IWebDocumentView
    {
        CONST_VTBL struct IWebDocumentViewVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebDocumentView_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebDocumentView_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebDocumentView_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebDocumentView_setDataSource(This,dataSource)	\
    ( (This)->lpVtbl -> setDataSource(This,dataSource) ) 

#define IWebDocumentView_dataSourceUpdated(This,dataSource)	\
    ( (This)->lpVtbl -> dataSourceUpdated(This,dataSource) ) 

#define IWebDocumentView_setNeedsLayout(This,flag)	\
    ( (This)->lpVtbl -> setNeedsLayout(This,flag) ) 

#define IWebDocumentView_layout(This)	\
    ( (This)->lpVtbl -> layout(This) ) 

#define IWebDocumentView_viewWillMoveToHostWindow(This,hwnd)	\
    ( (This)->lpVtbl -> viewWillMoveToHostWindow(This,hwnd) ) 

#define IWebDocumentView_viewDidMoveToHostWindow(This)	\
    ( (This)->lpVtbl -> viewDidMoveToHostWindow(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebDocumentView_INTERFACE_DEFINED__ */


#ifndef __IWebDocumentSearching_INTERFACE_DEFINED__
#define __IWebDocumentSearching_INTERFACE_DEFINED__

/* interface IWebDocumentSearching */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebDocumentSearching;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0213643B-8DF9-4ba4-9534-61D92CB75007")
    IWebDocumentSearching : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE searchFor( 
            /* [in] */ BSTR str,
            /* [in] */ BOOL forwardDirection,
            /* [in] */ BOOL caseSensitive,
            /* [in] */ BOOL wrap,
            /* [retval][out] */ BOOL *result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebDocumentSearchingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebDocumentSearching * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebDocumentSearching * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebDocumentSearching * This);
        
        HRESULT ( STDMETHODCALLTYPE *searchFor )( 
            IWebDocumentSearching * This,
            /* [in] */ BSTR str,
            /* [in] */ BOOL forwardDirection,
            /* [in] */ BOOL caseSensitive,
            /* [in] */ BOOL wrap,
            /* [retval][out] */ BOOL *result);
        
        END_INTERFACE
    } IWebDocumentSearchingVtbl;

    interface IWebDocumentSearching
    {
        CONST_VTBL struct IWebDocumentSearchingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebDocumentSearching_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebDocumentSearching_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebDocumentSearching_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebDocumentSearching_searchFor(This,str,forwardDirection,caseSensitive,wrap,result)	\
    ( (This)->lpVtbl -> searchFor(This,str,forwardDirection,caseSensitive,wrap,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebDocumentSearching_INTERFACE_DEFINED__ */


#ifndef __IWebDocumentText_INTERFACE_DEFINED__
#define __IWebDocumentText_INTERFACE_DEFINED__

/* interface IWebDocumentText */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebDocumentText;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B6282B92-6F31-4948-A3A0-89763C56BBBF")
    IWebDocumentText : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE supportsTextEncoding( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE string( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE selectedString( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE selectAll( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE deselectAll( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebDocumentTextVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebDocumentText * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebDocumentText * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebDocumentText * This);
        
        HRESULT ( STDMETHODCALLTYPE *supportsTextEncoding )( 
            IWebDocumentText * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *string )( 
            IWebDocumentText * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *selectedString )( 
            IWebDocumentText * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *selectAll )( 
            IWebDocumentText * This);
        
        HRESULT ( STDMETHODCALLTYPE *deselectAll )( 
            IWebDocumentText * This);
        
        END_INTERFACE
    } IWebDocumentTextVtbl;

    interface IWebDocumentText
    {
        CONST_VTBL struct IWebDocumentTextVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebDocumentText_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebDocumentText_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebDocumentText_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebDocumentText_supportsTextEncoding(This,result)	\
    ( (This)->lpVtbl -> supportsTextEncoding(This,result) ) 

#define IWebDocumentText_string(This,result)	\
    ( (This)->lpVtbl -> string(This,result) ) 

#define IWebDocumentText_selectedString(This,result)	\
    ( (This)->lpVtbl -> selectedString(This,result) ) 

#define IWebDocumentText_selectAll(This)	\
    ( (This)->lpVtbl -> selectAll(This) ) 

#define IWebDocumentText_deselectAll(This)	\
    ( (This)->lpVtbl -> deselectAll(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebDocumentText_INTERFACE_DEFINED__ */


#ifndef __IWebDocumentRepresentation_INTERFACE_DEFINED__
#define __IWebDocumentRepresentation_INTERFACE_DEFINED__

/* interface IWebDocumentRepresentation */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebDocumentRepresentation;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3C9F6251-CFD8-447a-B429-6B6AE627436C")
    IWebDocumentRepresentation : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE setDataSource( 
            /* [in] */ IWebDataSource *dataSource) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE receivedData( 
            /* [in] */ IStream *data,
            /* [in] */ IWebDataSource *dataSource) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE receivedError( 
            /* [in] */ IWebError *error,
            /* [in] */ IWebDataSource *dataSource) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE finishedLoadingWithDataSource( 
            /* [in] */ IWebDataSource *dataSource) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE canProvideDocumentSource( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE documentSource( 
            /* [retval][out] */ BSTR *source) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE title( 
            /* [retval][out] */ BSTR *docTitle) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebDocumentRepresentationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebDocumentRepresentation * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebDocumentRepresentation * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebDocumentRepresentation * This);
        
        HRESULT ( STDMETHODCALLTYPE *setDataSource )( 
            IWebDocumentRepresentation * This,
            /* [in] */ IWebDataSource *dataSource);
        
        HRESULT ( STDMETHODCALLTYPE *receivedData )( 
            IWebDocumentRepresentation * This,
            /* [in] */ IStream *data,
            /* [in] */ IWebDataSource *dataSource);
        
        HRESULT ( STDMETHODCALLTYPE *receivedError )( 
            IWebDocumentRepresentation * This,
            /* [in] */ IWebError *error,
            /* [in] */ IWebDataSource *dataSource);
        
        HRESULT ( STDMETHODCALLTYPE *finishedLoadingWithDataSource )( 
            IWebDocumentRepresentation * This,
            /* [in] */ IWebDataSource *dataSource);
        
        HRESULT ( STDMETHODCALLTYPE *canProvideDocumentSource )( 
            IWebDocumentRepresentation * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *documentSource )( 
            IWebDocumentRepresentation * This,
            /* [retval][out] */ BSTR *source);
        
        HRESULT ( STDMETHODCALLTYPE *title )( 
            IWebDocumentRepresentation * This,
            /* [retval][out] */ BSTR *docTitle);
        
        END_INTERFACE
    } IWebDocumentRepresentationVtbl;

    interface IWebDocumentRepresentation
    {
        CONST_VTBL struct IWebDocumentRepresentationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebDocumentRepresentation_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebDocumentRepresentation_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebDocumentRepresentation_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebDocumentRepresentation_setDataSource(This,dataSource)	\
    ( (This)->lpVtbl -> setDataSource(This,dataSource) ) 

#define IWebDocumentRepresentation_receivedData(This,data,dataSource)	\
    ( (This)->lpVtbl -> receivedData(This,data,dataSource) ) 

#define IWebDocumentRepresentation_receivedError(This,error,dataSource)	\
    ( (This)->lpVtbl -> receivedError(This,error,dataSource) ) 

#define IWebDocumentRepresentation_finishedLoadingWithDataSource(This,dataSource)	\
    ( (This)->lpVtbl -> finishedLoadingWithDataSource(This,dataSource) ) 

#define IWebDocumentRepresentation_canProvideDocumentSource(This,result)	\
    ( (This)->lpVtbl -> canProvideDocumentSource(This,result) ) 

#define IWebDocumentRepresentation_documentSource(This,source)	\
    ( (This)->lpVtbl -> documentSource(This,source) ) 

#define IWebDocumentRepresentation_title(This,docTitle)	\
    ( (This)->lpVtbl -> title(This,docTitle) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebDocumentRepresentation_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0068 */
/* [local] */ 









extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0068_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0068_v0_0_s_ifspec;

#ifndef __IWebDownload_INTERFACE_DEFINED__
#define __IWebDownload_INTERFACE_DEFINED__

/* interface IWebDownload */
/* [unique][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IWebDownload;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("65EFE83B-A9E4-4516-8F3B-BAA25DA90FFD")
    IWebDownload : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE canResumeDownloadDecodedWithEncodingMIMEType( 
            /* [in] */ BSTR mimeType,
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE cancel( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE cancelForResume( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE start( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE deletesFileUponFailure( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE initWithRequest( 
            /* [in] */ IWebURLRequest *request,
            /* [in] */ IWebDownloadDelegate *delegate) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE initToResumeWithBundle( 
            /* [in] */ BSTR bundlePath,
            /* [in] */ IWebDownloadDelegate *delegate) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE bundlePathForTargetPath( 
            /* [in] */ BSTR target,
            /* [retval][out] */ BSTR *bundle) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE request( 
            /* [retval][out] */ IWebURLRequest **request) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setDeletesFileUponFailure( 
            /* [in] */ BOOL deletesFileUponFailure) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setDestination( 
            /* [in] */ BSTR path,
            /* [in] */ BOOL allowOverwrite) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebDownloadVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebDownload * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebDownload * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebDownload * This);
        
        HRESULT ( STDMETHODCALLTYPE *canResumeDownloadDecodedWithEncodingMIMEType )( 
            IWebDownload * This,
            /* [in] */ BSTR mimeType,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *cancel )( 
            IWebDownload * This);
        
        HRESULT ( STDMETHODCALLTYPE *cancelForResume )( 
            IWebDownload * This);
        
        HRESULT ( STDMETHODCALLTYPE *start )( 
            IWebDownload * This);
        
        HRESULT ( STDMETHODCALLTYPE *deletesFileUponFailure )( 
            IWebDownload * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *initWithRequest )( 
            IWebDownload * This,
            /* [in] */ IWebURLRequest *request,
            /* [in] */ IWebDownloadDelegate *delegate);
        
        HRESULT ( STDMETHODCALLTYPE *initToResumeWithBundle )( 
            IWebDownload * This,
            /* [in] */ BSTR bundlePath,
            /* [in] */ IWebDownloadDelegate *delegate);
        
        HRESULT ( STDMETHODCALLTYPE *bundlePathForTargetPath )( 
            IWebDownload * This,
            /* [in] */ BSTR target,
            /* [retval][out] */ BSTR *bundle);
        
        HRESULT ( STDMETHODCALLTYPE *request )( 
            IWebDownload * This,
            /* [retval][out] */ IWebURLRequest **request);
        
        HRESULT ( STDMETHODCALLTYPE *setDeletesFileUponFailure )( 
            IWebDownload * This,
            /* [in] */ BOOL deletesFileUponFailure);
        
        HRESULT ( STDMETHODCALLTYPE *setDestination )( 
            IWebDownload * This,
            /* [in] */ BSTR path,
            /* [in] */ BOOL allowOverwrite);
        
        END_INTERFACE
    } IWebDownloadVtbl;

    interface IWebDownload
    {
        CONST_VTBL struct IWebDownloadVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebDownload_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebDownload_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebDownload_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebDownload_canResumeDownloadDecodedWithEncodingMIMEType(This,mimeType,result)	\
    ( (This)->lpVtbl -> canResumeDownloadDecodedWithEncodingMIMEType(This,mimeType,result) ) 

#define IWebDownload_cancel(This)	\
    ( (This)->lpVtbl -> cancel(This) ) 

#define IWebDownload_cancelForResume(This)	\
    ( (This)->lpVtbl -> cancelForResume(This) ) 

#define IWebDownload_start(This)	\
    ( (This)->lpVtbl -> start(This) ) 

#define IWebDownload_deletesFileUponFailure(This,result)	\
    ( (This)->lpVtbl -> deletesFileUponFailure(This,result) ) 

#define IWebDownload_initWithRequest(This,request,delegate)	\
    ( (This)->lpVtbl -> initWithRequest(This,request,delegate) ) 

#define IWebDownload_initToResumeWithBundle(This,bundlePath,delegate)	\
    ( (This)->lpVtbl -> initToResumeWithBundle(This,bundlePath,delegate) ) 

#define IWebDownload_bundlePathForTargetPath(This,target,bundle)	\
    ( (This)->lpVtbl -> bundlePathForTargetPath(This,target,bundle) ) 

#define IWebDownload_request(This,request)	\
    ( (This)->lpVtbl -> request(This,request) ) 

#define IWebDownload_setDeletesFileUponFailure(This,deletesFileUponFailure)	\
    ( (This)->lpVtbl -> setDeletesFileUponFailure(This,deletesFileUponFailure) ) 

#define IWebDownload_setDestination(This,path,allowOverwrite)	\
    ( (This)->lpVtbl -> setDestination(This,path,allowOverwrite) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebDownload_INTERFACE_DEFINED__ */


#ifndef __IWebDownloadDelegate_INTERFACE_DEFINED__
#define __IWebDownloadDelegate_INTERFACE_DEFINED__

/* interface IWebDownloadDelegate */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebDownloadDelegate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("16A32AE6-C862-40cd-9225-2CAF823F40F9")
    IWebDownloadDelegate : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE decideDestinationWithSuggestedFilename( 
            /* [in] */ IWebDownload *download,
            /* [in] */ BSTR filename) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE didCancelAuthenticationChallenge( 
            /* [in] */ IWebDownload *download,
            /* [in] */ IWebURLAuthenticationChallenge *challenge) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE didCreateDestination( 
            /* [in] */ IWebDownload *download,
            /* [in] */ BSTR destination) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE didFailWithError( 
            /* [in] */ IWebDownload *download,
            /* [in] */ IWebError *error) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE didReceiveAuthenticationChallenge( 
            /* [in] */ IWebDownload *download,
            /* [in] */ IWebURLAuthenticationChallenge *challenge) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE didReceiveDataOfLength( 
            /* [in] */ IWebDownload *download,
            /* [in] */ unsigned int length) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE didReceiveResponse( 
            /* [in] */ IWebDownload *download,
            /* [in] */ IWebURLResponse *response) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE shouldDecodeSourceDataOfMIMEType( 
            /* [in] */ IWebDownload *download,
            /* [in] */ BSTR encodingType,
            /* [retval][out] */ BOOL *shouldDecode) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE willResumeWithResponse( 
            /* [in] */ IWebDownload *download,
            /* [in] */ IWebURLResponse *response,
            /* [in] */ long long fromByte) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE willSendRequest( 
            /* [in] */ IWebDownload *download,
            /* [in] */ IWebMutableURLRequest *request,
            /* [in] */ IWebURLResponse *redirectResponse,
            /* [out] */ IWebMutableURLRequest **finalRequest) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE didBegin( 
            /* [in] */ IWebDownload *download) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE didFinish( 
            /* [in] */ IWebDownload *download) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebDownloadDelegateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebDownloadDelegate * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebDownloadDelegate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebDownloadDelegate * This);
        
        HRESULT ( STDMETHODCALLTYPE *decideDestinationWithSuggestedFilename )( 
            IWebDownloadDelegate * This,
            /* [in] */ IWebDownload *download,
            /* [in] */ BSTR filename);
        
        HRESULT ( STDMETHODCALLTYPE *didCancelAuthenticationChallenge )( 
            IWebDownloadDelegate * This,
            /* [in] */ IWebDownload *download,
            /* [in] */ IWebURLAuthenticationChallenge *challenge);
        
        HRESULT ( STDMETHODCALLTYPE *didCreateDestination )( 
            IWebDownloadDelegate * This,
            /* [in] */ IWebDownload *download,
            /* [in] */ BSTR destination);
        
        HRESULT ( STDMETHODCALLTYPE *didFailWithError )( 
            IWebDownloadDelegate * This,
            /* [in] */ IWebDownload *download,
            /* [in] */ IWebError *error);
        
        HRESULT ( STDMETHODCALLTYPE *didReceiveAuthenticationChallenge )( 
            IWebDownloadDelegate * This,
            /* [in] */ IWebDownload *download,
            /* [in] */ IWebURLAuthenticationChallenge *challenge);
        
        HRESULT ( STDMETHODCALLTYPE *didReceiveDataOfLength )( 
            IWebDownloadDelegate * This,
            /* [in] */ IWebDownload *download,
            /* [in] */ unsigned int length);
        
        HRESULT ( STDMETHODCALLTYPE *didReceiveResponse )( 
            IWebDownloadDelegate * This,
            /* [in] */ IWebDownload *download,
            /* [in] */ IWebURLResponse *response);
        
        HRESULT ( STDMETHODCALLTYPE *shouldDecodeSourceDataOfMIMEType )( 
            IWebDownloadDelegate * This,
            /* [in] */ IWebDownload *download,
            /* [in] */ BSTR encodingType,
            /* [retval][out] */ BOOL *shouldDecode);
        
        HRESULT ( STDMETHODCALLTYPE *willResumeWithResponse )( 
            IWebDownloadDelegate * This,
            /* [in] */ IWebDownload *download,
            /* [in] */ IWebURLResponse *response,
            /* [in] */ long long fromByte);
        
        HRESULT ( STDMETHODCALLTYPE *willSendRequest )( 
            IWebDownloadDelegate * This,
            /* [in] */ IWebDownload *download,
            /* [in] */ IWebMutableURLRequest *request,
            /* [in] */ IWebURLResponse *redirectResponse,
            /* [out] */ IWebMutableURLRequest **finalRequest);
        
        HRESULT ( STDMETHODCALLTYPE *didBegin )( 
            IWebDownloadDelegate * This,
            /* [in] */ IWebDownload *download);
        
        HRESULT ( STDMETHODCALLTYPE *didFinish )( 
            IWebDownloadDelegate * This,
            /* [in] */ IWebDownload *download);
        
        END_INTERFACE
    } IWebDownloadDelegateVtbl;

    interface IWebDownloadDelegate
    {
        CONST_VTBL struct IWebDownloadDelegateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebDownloadDelegate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebDownloadDelegate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebDownloadDelegate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebDownloadDelegate_decideDestinationWithSuggestedFilename(This,download,filename)	\
    ( (This)->lpVtbl -> decideDestinationWithSuggestedFilename(This,download,filename) ) 

#define IWebDownloadDelegate_didCancelAuthenticationChallenge(This,download,challenge)	\
    ( (This)->lpVtbl -> didCancelAuthenticationChallenge(This,download,challenge) ) 

#define IWebDownloadDelegate_didCreateDestination(This,download,destination)	\
    ( (This)->lpVtbl -> didCreateDestination(This,download,destination) ) 

#define IWebDownloadDelegate_didFailWithError(This,download,error)	\
    ( (This)->lpVtbl -> didFailWithError(This,download,error) ) 

#define IWebDownloadDelegate_didReceiveAuthenticationChallenge(This,download,challenge)	\
    ( (This)->lpVtbl -> didReceiveAuthenticationChallenge(This,download,challenge) ) 

#define IWebDownloadDelegate_didReceiveDataOfLength(This,download,length)	\
    ( (This)->lpVtbl -> didReceiveDataOfLength(This,download,length) ) 

#define IWebDownloadDelegate_didReceiveResponse(This,download,response)	\
    ( (This)->lpVtbl -> didReceiveResponse(This,download,response) ) 

#define IWebDownloadDelegate_shouldDecodeSourceDataOfMIMEType(This,download,encodingType,shouldDecode)	\
    ( (This)->lpVtbl -> shouldDecodeSourceDataOfMIMEType(This,download,encodingType,shouldDecode) ) 

#define IWebDownloadDelegate_willResumeWithResponse(This,download,response,fromByte)	\
    ( (This)->lpVtbl -> willResumeWithResponse(This,download,response,fromByte) ) 

#define IWebDownloadDelegate_willSendRequest(This,download,request,redirectResponse,finalRequest)	\
    ( (This)->lpVtbl -> willSendRequest(This,download,request,redirectResponse,finalRequest) ) 

#define IWebDownloadDelegate_didBegin(This,download)	\
    ( (This)->lpVtbl -> didBegin(This,download) ) 

#define IWebDownloadDelegate_didFinish(This,download)	\
    ( (This)->lpVtbl -> didFinish(This,download) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebDownloadDelegate_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0070 */
/* [local] */ 







typedef 
enum _WebViewInsertAction
    {	WebViewInsertActionTyped	= 0,
	WebViewInsertActionPasted	= ( WebViewInsertActionTyped + 1 ) ,
	WebViewInsertActionDropped	= ( WebViewInsertActionPasted + 1 ) 
    } 	WebViewInsertAction;



extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0070_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0070_v0_0_s_ifspec;

#ifndef __IEnumSpellingGuesses_INTERFACE_DEFINED__
#define __IEnumSpellingGuesses_INTERFACE_DEFINED__

/* interface IEnumSpellingGuesses */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IEnumSpellingGuesses;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B0F960E7-FB81-447f-A958-E02DA02ADBB7")
    IEnumSpellingGuesses : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            ULONG celt,
            /* [out] */ BSTR *guess,
            /* [out] */ ULONG *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [retval][out] */ IEnumSpellingGuesses **ppenum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumSpellingGuessesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumSpellingGuesses * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumSpellingGuesses * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumSpellingGuesses * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumSpellingGuesses * This,
            ULONG celt,
            /* [out] */ BSTR *guess,
            /* [out] */ ULONG *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IEnumSpellingGuesses * This,
            ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumSpellingGuesses * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IEnumSpellingGuesses * This,
            /* [retval][out] */ IEnumSpellingGuesses **ppenum);
        
        END_INTERFACE
    } IEnumSpellingGuessesVtbl;

    interface IEnumSpellingGuesses
    {
        CONST_VTBL struct IEnumSpellingGuessesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumSpellingGuesses_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IEnumSpellingGuesses_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IEnumSpellingGuesses_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IEnumSpellingGuesses_Next(This,celt,guess,pceltFetched)	\
    ( (This)->lpVtbl -> Next(This,celt,guess,pceltFetched) ) 

#define IEnumSpellingGuesses_Skip(This,celt)	\
    ( (This)->lpVtbl -> Skip(This,celt) ) 

#define IEnumSpellingGuesses_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IEnumSpellingGuesses_Clone(This,ppenum)	\
    ( (This)->lpVtbl -> Clone(This,ppenum) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IEnumSpellingGuesses_INTERFACE_DEFINED__ */


#ifndef __IWebGrammarDetail_INTERFACE_DEFINED__
#define __IWebGrammarDetail_INTERFACE_DEFINED__

/* interface IWebGrammarDetail */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebGrammarDetail;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8B95C1B3-E1B3-4f97-80D6-2240417E3E0C")
    IWebGrammarDetail : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE location( 
            /* [retval][out] */ int *value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE length( 
            /* [retval][out] */ int *value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE userDescription( 
            /* [retval][out] */ BSTR *value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE guesses( 
            /* [retval][out] */ IEnumSpellingGuesses **guesses) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebGrammarDetailVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebGrammarDetail * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebGrammarDetail * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebGrammarDetail * This);
        
        HRESULT ( STDMETHODCALLTYPE *location )( 
            IWebGrammarDetail * This,
            /* [retval][out] */ int *value);
        
        HRESULT ( STDMETHODCALLTYPE *length )( 
            IWebGrammarDetail * This,
            /* [retval][out] */ int *value);
        
        HRESULT ( STDMETHODCALLTYPE *userDescription )( 
            IWebGrammarDetail * This,
            /* [retval][out] */ BSTR *value);
        
        HRESULT ( STDMETHODCALLTYPE *guesses )( 
            IWebGrammarDetail * This,
            /* [retval][out] */ IEnumSpellingGuesses **guesses);
        
        END_INTERFACE
    } IWebGrammarDetailVtbl;

    interface IWebGrammarDetail
    {
        CONST_VTBL struct IWebGrammarDetailVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebGrammarDetail_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebGrammarDetail_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebGrammarDetail_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebGrammarDetail_location(This,value)	\
    ( (This)->lpVtbl -> location(This,value) ) 

#define IWebGrammarDetail_length(This,value)	\
    ( (This)->lpVtbl -> length(This,value) ) 

#define IWebGrammarDetail_userDescription(This,value)	\
    ( (This)->lpVtbl -> userDescription(This,value) ) 

#define IWebGrammarDetail_guesses(This,guesses)	\
    ( (This)->lpVtbl -> guesses(This,guesses) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebGrammarDetail_INTERFACE_DEFINED__ */


#ifndef __IEnumWebGrammarDetails_INTERFACE_DEFINED__
#define __IEnumWebGrammarDetails_INTERFACE_DEFINED__

/* interface IEnumWebGrammarDetails */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IEnumWebGrammarDetails;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("FABCC69A-5917-4242-A19A-42E8B62227A7")
    IEnumWebGrammarDetails : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            ULONG celt,
            /* [out] */ IWebGrammarDetail **detail,
            /* [out] */ ULONG *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [retval][out] */ IEnumSpellingGuesses **ppenum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumWebGrammarDetailsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumWebGrammarDetails * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumWebGrammarDetails * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumWebGrammarDetails * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumWebGrammarDetails * This,
            ULONG celt,
            /* [out] */ IWebGrammarDetail **detail,
            /* [out] */ ULONG *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IEnumWebGrammarDetails * This,
            ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumWebGrammarDetails * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IEnumWebGrammarDetails * This,
            /* [retval][out] */ IEnumSpellingGuesses **ppenum);
        
        END_INTERFACE
    } IEnumWebGrammarDetailsVtbl;

    interface IEnumWebGrammarDetails
    {
        CONST_VTBL struct IEnumWebGrammarDetailsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumWebGrammarDetails_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IEnumWebGrammarDetails_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IEnumWebGrammarDetails_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IEnumWebGrammarDetails_Next(This,celt,detail,pceltFetched)	\
    ( (This)->lpVtbl -> Next(This,celt,detail,pceltFetched) ) 

#define IEnumWebGrammarDetails_Skip(This,celt)	\
    ( (This)->lpVtbl -> Skip(This,celt) ) 

#define IEnumWebGrammarDetails_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IEnumWebGrammarDetails_Clone(This,ppenum)	\
    ( (This)->lpVtbl -> Clone(This,ppenum) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IEnumWebGrammarDetails_INTERFACE_DEFINED__ */


#ifndef __IWebEditingDelegate_INTERFACE_DEFINED__
#define __IWebEditingDelegate_INTERFACE_DEFINED__

/* interface IWebEditingDelegate */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebEditingDelegate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2C75A1E3-EE9D-45c8-A385-19DE68AC5675")
    IWebEditingDelegate : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE shouldBeginEditingInDOMRange( 
            /* [in] */ IWebView *webView,
            /* [in] */ IDOMRange *range,
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE shouldEndEditingInDOMRange( 
            /* [in] */ IWebView *webView,
            /* [in] */ IDOMRange *range,
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE shouldInsertNode( 
            /* [in] */ IWebView *webView,
            /* [in] */ IDOMNode *node,
            /* [in] */ IDOMRange *range,
            /* [in] */ WebViewInsertAction action) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE shouldInsertText( 
            /* [in] */ IWebView *webView,
            /* [in] */ BSTR text,
            /* [in] */ IDOMRange *range,
            /* [in] */ WebViewInsertAction action,
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE shouldDeleteDOMRange( 
            /* [in] */ IWebView *webView,
            /* [in] */ IDOMRange *range,
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE shouldChangeSelectedDOMRange( 
            /* [in] */ IWebView *webView,
            /* [in] */ IDOMRange *currentRange,
            /* [in] */ IDOMRange *proposedRange,
            /* [in] */ WebSelectionAffinity selectionAffinity,
            /* [in] */ BOOL stillSelecting,
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE shouldApplyStyle( 
            /* [in] */ IWebView *webView,
            /* [in] */ IDOMCSSStyleDeclaration *style,
            /* [in] */ IDOMRange *range,
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE shouldChangeTypingStyle( 
            /* [in] */ IWebView *webView,
            /* [in] */ IDOMCSSStyleDeclaration *currentStyle,
            /* [in] */ IDOMCSSStyleDeclaration *proposedStyle,
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE doPlatformCommand( 
            /* [in] */ IWebView *webView,
            /* [in] */ BSTR command,
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE webViewDidBeginEditing( 
            /* [in] */ IWebNotification *notification) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE webViewDidChange( 
            /* [in] */ IWebNotification *notification) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE webViewDidEndEditing( 
            /* [in] */ IWebNotification *notification) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE webViewDidChangeTypingStyle( 
            /* [in] */ IWebNotification *notification) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE webViewDidChangeSelection( 
            /* [in] */ IWebNotification *notification) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE undoManagerForWebView( 
            /* [in] */ IWebView *webView,
            /* [retval][out] */ IWebUndoManager **undoManager) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ignoreWordInSpellDocument( 
            /* [in] */ IWebView *view,
            /* [in] */ BSTR word) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE learnWord( 
            /* [in] */ BSTR word) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE checkSpellingOfString( 
            /* [in] */ IWebView *view,
            /* [in] */ LPCTSTR text,
            /* [in] */ int length,
            /* [out] */ int *misspellingLocation,
            /* [out] */ int *misspellingLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE checkGrammarOfString( 
            /* [in] */ IWebView *view,
            /* [in] */ LPCTSTR text,
            /* [in] */ int length,
            /* [out] */ IEnumWebGrammarDetails **grammarDetails,
            /* [out] */ int *badGrammarLocation,
            /* [out] */ int *badGrammarLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE updateSpellingUIWithGrammarString( 
            /* [in] */ BSTR string,
            /* [in] */ int location,
            /* [in] */ int length,
            /* [in] */ BSTR userDescription,
            /* [in] */ BSTR *guesses,
            /* [in] */ int guessesCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE updateSpellingUIWithMisspelledWord( 
            /* [in] */ BSTR word) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE showSpellingUI( 
            /* [in] */ BOOL show) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE spellingUIIsShowing( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE guessesForWord( 
            /* [in] */ BSTR word,
            /* [retval][out] */ IEnumSpellingGuesses **guesses) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE closeSpellDocument( 
            /* [in] */ IWebView *view) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE sharedSpellCheckerExists( 
            /* [retval][out] */ BOOL *exists) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE preflightChosenSpellServer( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE updateGrammar( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebEditingDelegateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebEditingDelegate * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebEditingDelegate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebEditingDelegate * This);
        
        HRESULT ( STDMETHODCALLTYPE *shouldBeginEditingInDOMRange )( 
            IWebEditingDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ IDOMRange *range,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *shouldEndEditingInDOMRange )( 
            IWebEditingDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ IDOMRange *range,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *shouldInsertNode )( 
            IWebEditingDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ IDOMNode *node,
            /* [in] */ IDOMRange *range,
            /* [in] */ WebViewInsertAction action);
        
        HRESULT ( STDMETHODCALLTYPE *shouldInsertText )( 
            IWebEditingDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ BSTR text,
            /* [in] */ IDOMRange *range,
            /* [in] */ WebViewInsertAction action,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *shouldDeleteDOMRange )( 
            IWebEditingDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ IDOMRange *range,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *shouldChangeSelectedDOMRange )( 
            IWebEditingDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ IDOMRange *currentRange,
            /* [in] */ IDOMRange *proposedRange,
            /* [in] */ WebSelectionAffinity selectionAffinity,
            /* [in] */ BOOL stillSelecting,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *shouldApplyStyle )( 
            IWebEditingDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ IDOMCSSStyleDeclaration *style,
            /* [in] */ IDOMRange *range,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *shouldChangeTypingStyle )( 
            IWebEditingDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ IDOMCSSStyleDeclaration *currentStyle,
            /* [in] */ IDOMCSSStyleDeclaration *proposedStyle,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *doPlatformCommand )( 
            IWebEditingDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ BSTR command,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *webViewDidBeginEditing )( 
            IWebEditingDelegate * This,
            /* [in] */ IWebNotification *notification);
        
        HRESULT ( STDMETHODCALLTYPE *webViewDidChange )( 
            IWebEditingDelegate * This,
            /* [in] */ IWebNotification *notification);
        
        HRESULT ( STDMETHODCALLTYPE *webViewDidEndEditing )( 
            IWebEditingDelegate * This,
            /* [in] */ IWebNotification *notification);
        
        HRESULT ( STDMETHODCALLTYPE *webViewDidChangeTypingStyle )( 
            IWebEditingDelegate * This,
            /* [in] */ IWebNotification *notification);
        
        HRESULT ( STDMETHODCALLTYPE *webViewDidChangeSelection )( 
            IWebEditingDelegate * This,
            /* [in] */ IWebNotification *notification);
        
        HRESULT ( STDMETHODCALLTYPE *undoManagerForWebView )( 
            IWebEditingDelegate * This,
            /* [in] */ IWebView *webView,
            /* [retval][out] */ IWebUndoManager **undoManager);
        
        HRESULT ( STDMETHODCALLTYPE *ignoreWordInSpellDocument )( 
            IWebEditingDelegate * This,
            /* [in] */ IWebView *view,
            /* [in] */ BSTR word);
        
        HRESULT ( STDMETHODCALLTYPE *learnWord )( 
            IWebEditingDelegate * This,
            /* [in] */ BSTR word);
        
        HRESULT ( STDMETHODCALLTYPE *checkSpellingOfString )( 
            IWebEditingDelegate * This,
            /* [in] */ IWebView *view,
            /* [in] */ LPCTSTR text,
            /* [in] */ int length,
            /* [out] */ int *misspellingLocation,
            /* [out] */ int *misspellingLength);
        
        HRESULT ( STDMETHODCALLTYPE *checkGrammarOfString )( 
            IWebEditingDelegate * This,
            /* [in] */ IWebView *view,
            /* [in] */ LPCTSTR text,
            /* [in] */ int length,
            /* [out] */ IEnumWebGrammarDetails **grammarDetails,
            /* [out] */ int *badGrammarLocation,
            /* [out] */ int *badGrammarLength);
        
        HRESULT ( STDMETHODCALLTYPE *updateSpellingUIWithGrammarString )( 
            IWebEditingDelegate * This,
            /* [in] */ BSTR string,
            /* [in] */ int location,
            /* [in] */ int length,
            /* [in] */ BSTR userDescription,
            /* [in] */ BSTR *guesses,
            /* [in] */ int guessesCount);
        
        HRESULT ( STDMETHODCALLTYPE *updateSpellingUIWithMisspelledWord )( 
            IWebEditingDelegate * This,
            /* [in] */ BSTR word);
        
        HRESULT ( STDMETHODCALLTYPE *showSpellingUI )( 
            IWebEditingDelegate * This,
            /* [in] */ BOOL show);
        
        HRESULT ( STDMETHODCALLTYPE *spellingUIIsShowing )( 
            IWebEditingDelegate * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *guessesForWord )( 
            IWebEditingDelegate * This,
            /* [in] */ BSTR word,
            /* [retval][out] */ IEnumSpellingGuesses **guesses);
        
        HRESULT ( STDMETHODCALLTYPE *closeSpellDocument )( 
            IWebEditingDelegate * This,
            /* [in] */ IWebView *view);
        
        HRESULT ( STDMETHODCALLTYPE *sharedSpellCheckerExists )( 
            IWebEditingDelegate * This,
            /* [retval][out] */ BOOL *exists);
        
        HRESULT ( STDMETHODCALLTYPE *preflightChosenSpellServer )( 
            IWebEditingDelegate * This);
        
        HRESULT ( STDMETHODCALLTYPE *updateGrammar )( 
            IWebEditingDelegate * This);
        
        END_INTERFACE
    } IWebEditingDelegateVtbl;

    interface IWebEditingDelegate
    {
        CONST_VTBL struct IWebEditingDelegateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebEditingDelegate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebEditingDelegate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebEditingDelegate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebEditingDelegate_shouldBeginEditingInDOMRange(This,webView,range,result)	\
    ( (This)->lpVtbl -> shouldBeginEditingInDOMRange(This,webView,range,result) ) 

#define IWebEditingDelegate_shouldEndEditingInDOMRange(This,webView,range,result)	\
    ( (This)->lpVtbl -> shouldEndEditingInDOMRange(This,webView,range,result) ) 

#define IWebEditingDelegate_shouldInsertNode(This,webView,node,range,action)	\
    ( (This)->lpVtbl -> shouldInsertNode(This,webView,node,range,action) ) 

#define IWebEditingDelegate_shouldInsertText(This,webView,text,range,action,result)	\
    ( (This)->lpVtbl -> shouldInsertText(This,webView,text,range,action,result) ) 

#define IWebEditingDelegate_shouldDeleteDOMRange(This,webView,range,result)	\
    ( (This)->lpVtbl -> shouldDeleteDOMRange(This,webView,range,result) ) 

#define IWebEditingDelegate_shouldChangeSelectedDOMRange(This,webView,currentRange,proposedRange,selectionAffinity,stillSelecting,result)	\
    ( (This)->lpVtbl -> shouldChangeSelectedDOMRange(This,webView,currentRange,proposedRange,selectionAffinity,stillSelecting,result) ) 

#define IWebEditingDelegate_shouldApplyStyle(This,webView,style,range,result)	\
    ( (This)->lpVtbl -> shouldApplyStyle(This,webView,style,range,result) ) 

#define IWebEditingDelegate_shouldChangeTypingStyle(This,webView,currentStyle,proposedStyle,result)	\
    ( (This)->lpVtbl -> shouldChangeTypingStyle(This,webView,currentStyle,proposedStyle,result) ) 

#define IWebEditingDelegate_doPlatformCommand(This,webView,command,result)	\
    ( (This)->lpVtbl -> doPlatformCommand(This,webView,command,result) ) 

#define IWebEditingDelegate_webViewDidBeginEditing(This,notification)	\
    ( (This)->lpVtbl -> webViewDidBeginEditing(This,notification) ) 

#define IWebEditingDelegate_webViewDidChange(This,notification)	\
    ( (This)->lpVtbl -> webViewDidChange(This,notification) ) 

#define IWebEditingDelegate_webViewDidEndEditing(This,notification)	\
    ( (This)->lpVtbl -> webViewDidEndEditing(This,notification) ) 

#define IWebEditingDelegate_webViewDidChangeTypingStyle(This,notification)	\
    ( (This)->lpVtbl -> webViewDidChangeTypingStyle(This,notification) ) 

#define IWebEditingDelegate_webViewDidChangeSelection(This,notification)	\
    ( (This)->lpVtbl -> webViewDidChangeSelection(This,notification) ) 

#define IWebEditingDelegate_undoManagerForWebView(This,webView,undoManager)	\
    ( (This)->lpVtbl -> undoManagerForWebView(This,webView,undoManager) ) 

#define IWebEditingDelegate_ignoreWordInSpellDocument(This,view,word)	\
    ( (This)->lpVtbl -> ignoreWordInSpellDocument(This,view,word) ) 

#define IWebEditingDelegate_learnWord(This,word)	\
    ( (This)->lpVtbl -> learnWord(This,word) ) 

#define IWebEditingDelegate_checkSpellingOfString(This,view,text,length,misspellingLocation,misspellingLength)	\
    ( (This)->lpVtbl -> checkSpellingOfString(This,view,text,length,misspellingLocation,misspellingLength) ) 

#define IWebEditingDelegate_checkGrammarOfString(This,view,text,length,grammarDetails,badGrammarLocation,badGrammarLength)	\
    ( (This)->lpVtbl -> checkGrammarOfString(This,view,text,length,grammarDetails,badGrammarLocation,badGrammarLength) ) 

#define IWebEditingDelegate_updateSpellingUIWithGrammarString(This,string,location,length,userDescription,guesses,guessesCount)	\
    ( (This)->lpVtbl -> updateSpellingUIWithGrammarString(This,string,location,length,userDescription,guesses,guessesCount) ) 

#define IWebEditingDelegate_updateSpellingUIWithMisspelledWord(This,word)	\
    ( (This)->lpVtbl -> updateSpellingUIWithMisspelledWord(This,word) ) 

#define IWebEditingDelegate_showSpellingUI(This,show)	\
    ( (This)->lpVtbl -> showSpellingUI(This,show) ) 

#define IWebEditingDelegate_spellingUIIsShowing(This,result)	\
    ( (This)->lpVtbl -> spellingUIIsShowing(This,result) ) 

#define IWebEditingDelegate_guessesForWord(This,word,guesses)	\
    ( (This)->lpVtbl -> guessesForWord(This,word,guesses) ) 

#define IWebEditingDelegate_closeSpellDocument(This,view)	\
    ( (This)->lpVtbl -> closeSpellDocument(This,view) ) 

#define IWebEditingDelegate_sharedSpellCheckerExists(This,exists)	\
    ( (This)->lpVtbl -> sharedSpellCheckerExists(This,exists) ) 

#define IWebEditingDelegate_preflightChosenSpellServer(This)	\
    ( (This)->lpVtbl -> preflightChosenSpellServer(This) ) 

#define IWebEditingDelegate_updateGrammar(This)	\
    ( (This)->lpVtbl -> updateGrammar(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebEditingDelegate_INTERFACE_DEFINED__ */


#ifndef __IWebEmbeddedView_INTERFACE_DEFINED__
#define __IWebEmbeddedView_INTERFACE_DEFINED__

/* interface IWebEmbeddedView */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebEmbeddedView;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F2771780-84C2-4684-8D52-D4F923E67F71")
    IWebEmbeddedView : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE createViewWindow( 
            /* [in] */ OLE_HANDLE parentWindow,
            /* [in] */ LPSIZE pluginSize,
            /* [retval][out] */ OLE_HANDLE *window) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE didReceiveResponse( 
            /* [in] */ IWebURLResponse *response) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE didReceiveData( 
            /* [in] */ IStream *data) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE didFinishLoading( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE didFail( 
            /* [in] */ IWebError *error) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebEmbeddedViewVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebEmbeddedView * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebEmbeddedView * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebEmbeddedView * This);
        
        HRESULT ( STDMETHODCALLTYPE *createViewWindow )( 
            IWebEmbeddedView * This,
            /* [in] */ OLE_HANDLE parentWindow,
            /* [in] */ LPSIZE pluginSize,
            /* [retval][out] */ OLE_HANDLE *window);
        
        HRESULT ( STDMETHODCALLTYPE *didReceiveResponse )( 
            IWebEmbeddedView * This,
            /* [in] */ IWebURLResponse *response);
        
        HRESULT ( STDMETHODCALLTYPE *didReceiveData )( 
            IWebEmbeddedView * This,
            /* [in] */ IStream *data);
        
        HRESULT ( STDMETHODCALLTYPE *didFinishLoading )( 
            IWebEmbeddedView * This);
        
        HRESULT ( STDMETHODCALLTYPE *didFail )( 
            IWebEmbeddedView * This,
            /* [in] */ IWebError *error);
        
        END_INTERFACE
    } IWebEmbeddedViewVtbl;

    interface IWebEmbeddedView
    {
        CONST_VTBL struct IWebEmbeddedViewVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebEmbeddedView_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebEmbeddedView_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebEmbeddedView_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebEmbeddedView_createViewWindow(This,parentWindow,pluginSize,window)	\
    ( (This)->lpVtbl -> createViewWindow(This,parentWindow,pluginSize,window) ) 

#define IWebEmbeddedView_didReceiveResponse(This,response)	\
    ( (This)->lpVtbl -> didReceiveResponse(This,response) ) 

#define IWebEmbeddedView_didReceiveData(This,data)	\
    ( (This)->lpVtbl -> didReceiveData(This,data) ) 

#define IWebEmbeddedView_didFinishLoading(This)	\
    ( (This)->lpVtbl -> didFinishLoading(This) ) 

#define IWebEmbeddedView_didFail(This,error)	\
    ( (This)->lpVtbl -> didFail(This,error) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebEmbeddedView_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0075 */
/* [local] */ 

#define WebURLErrorDomain TEXT("CFURLErrorDomain")

enum __MIDL___MIDL_itf_WebKit_0000_0075_0001
    {	WebURLErrorUnknown	= -1,
	WebURLErrorCancelled	= -999,
	WebURLErrorBadURL	= -1000,
	WebURLErrorTimedOut	= -1001,
	WebURLErrorUnsupportedURL	= -1002,
	WebURLErrorCannotFindHost	= -1003,
	WebURLErrorCannotConnectToHost	= -1004,
	WebURLErrorNetworkConnectionLost	= -1005,
	WebURLErrorDNSLookupFailed	= -1006,
	WebURLErrorHTTPTooManyRedirects	= -1007,
	WebURLErrorResourceUnavailable	= -1008,
	WebURLErrorNotConnectedToInternet	= -1009,
	WebURLErrorRedirectToNonExistentLocation	= -1010,
	WebURLErrorBadServerResponse	= -1011,
	WebURLErrorUserCancelledAuthentication	= -1012,
	WebURLErrorUserAuthenticationRequired	= -1013,
	WebURLErrorZeroByteResource	= -1014,
	WebURLErrorFileDoesNotExist	= -1100,
	WebURLErrorFileIsDirectory	= -1101,
	WebURLErrorNoPermissionsToReadFile	= -1102,
	WebURLErrorSecureConnectionFailed	= -1200,
	WebURLErrorServerCertificateHasBadDate	= -1201,
	WebURLErrorServerCertificateUntrusted	= -1202,
	WebURLErrorServerCertificateHasUnknownRoot	= -1203,
	WebURLErrorServerCertificateNotYetValid	= -1204,
	WebURLErrorClientCertificateRejected	= -1205,
	WebURLErrorClientCertificateRequired	= -1206,
	WebURLErrorCannotLoadFromNetwork	= -2000,
	WebURLErrorCannotCreateFile	= -3000,
	WebURLErrorCannotOpenFile	= -3001,
	WebURLErrorCannotCloseFile	= -3002,
	WebURLErrorCannotWriteToFile	= -3003,
	WebURLErrorCannotRemoveFile	= -3004,
	WebURLErrorCannotMoveFile	= -3005,
	WebURLErrorDownloadDecodingFailedMidStream	= -3006,
	WebURLErrorDownloadDecodingFailedToComplete	= -3007
    } ;
#define WebKitErrorDomain TEXT("WebKitErrorDomain")

enum __MIDL___MIDL_itf_WebKit_0000_0075_0002
    {	WebKitErrorCannotShowMIMEType	= 100,
	WebKitErrorCannotShowURL	= 101,
	WebKitErrorFrameLoadInterruptedByPolicyChange	= 102,
	WebKitErrorCannotUseRestrictedPort	= 103
    } ;

enum __MIDL___MIDL_itf_WebKit_0000_0075_0003
    {	WebKitErrorCannotFindPlugIn	= 200,
	WebKitErrorCannotLoadPlugIn	= 201,
	WebKitErrorJavaUnavailable	= 202
    } ;

enum __MIDL___MIDL_itf_WebKit_0000_0075_0004
    {	WebKitErrorGeolocationLocationUnknown	= 300
    } ;
#define WebKitErrorMIMETypeKey TEXT("WebKitErrorMIMETypeKey")
#define WebKitErrorPlugInNameKey TEXT("WebKitErrorPlugInNameKey")
#define WebKitErrorPlugInPageURLStringKey TEXT("WebKitErrorPlugInPageURLStringKey")
#define WebPOSIXErrorDomain TEXT("NSPOSIXErrorDomain")
#define WebPOSIXErrorECONNRESET 54


extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0075_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0075_v0_0_s_ifspec;

#ifndef __IWebError_INTERFACE_DEFINED__
#define __IWebError_INTERFACE_DEFINED__

/* interface IWebError */
/* [unique][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IWebError;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("89E3B189-0B60-4d6b-A87A-3F1172CB5538")
    IWebError : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE init( 
            /* [in] */ BSTR domain,
            /* [in] */ int code,
            /* [in] */ BSTR url) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE code( 
            /* [retval][out] */ int *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE domain( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE localizedDescription( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE localizedFailureReason( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE localizedRecoveryOptions( 
            /* [retval][out] */ IEnumVARIANT **enumOptions) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE localizedRecoverySuggestion( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE recoverAttempter( 
            /* [retval][out] */ IUnknown **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE userInfo( 
            /* [retval][out] */ IPropertyBag **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE failingURL( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isPolicyChangeError( 
            /* [retval][out] */ BOOL *result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebErrorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebError * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebError * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebError * This);
        
        HRESULT ( STDMETHODCALLTYPE *init )( 
            IWebError * This,
            /* [in] */ BSTR domain,
            /* [in] */ int code,
            /* [in] */ BSTR url);
        
        HRESULT ( STDMETHODCALLTYPE *code )( 
            IWebError * This,
            /* [retval][out] */ int *result);
        
        HRESULT ( STDMETHODCALLTYPE *domain )( 
            IWebError * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *localizedDescription )( 
            IWebError * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *localizedFailureReason )( 
            IWebError * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *localizedRecoveryOptions )( 
            IWebError * This,
            /* [retval][out] */ IEnumVARIANT **enumOptions);
        
        HRESULT ( STDMETHODCALLTYPE *localizedRecoverySuggestion )( 
            IWebError * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *recoverAttempter )( 
            IWebError * This,
            /* [retval][out] */ IUnknown **result);
        
        HRESULT ( STDMETHODCALLTYPE *userInfo )( 
            IWebError * This,
            /* [retval][out] */ IPropertyBag **result);
        
        HRESULT ( STDMETHODCALLTYPE *failingURL )( 
            IWebError * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *isPolicyChangeError )( 
            IWebError * This,
            /* [retval][out] */ BOOL *result);
        
        END_INTERFACE
    } IWebErrorVtbl;

    interface IWebError
    {
        CONST_VTBL struct IWebErrorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebError_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebError_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebError_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebError_init(This,domain,code,url)	\
    ( (This)->lpVtbl -> init(This,domain,code,url) ) 

#define IWebError_code(This,result)	\
    ( (This)->lpVtbl -> code(This,result) ) 

#define IWebError_domain(This,result)	\
    ( (This)->lpVtbl -> domain(This,result) ) 

#define IWebError_localizedDescription(This,result)	\
    ( (This)->lpVtbl -> localizedDescription(This,result) ) 

#define IWebError_localizedFailureReason(This,result)	\
    ( (This)->lpVtbl -> localizedFailureReason(This,result) ) 

#define IWebError_localizedRecoveryOptions(This,enumOptions)	\
    ( (This)->lpVtbl -> localizedRecoveryOptions(This,enumOptions) ) 

#define IWebError_localizedRecoverySuggestion(This,result)	\
    ( (This)->lpVtbl -> localizedRecoverySuggestion(This,result) ) 

#define IWebError_recoverAttempter(This,result)	\
    ( (This)->lpVtbl -> recoverAttempter(This,result) ) 

#define IWebError_userInfo(This,result)	\
    ( (This)->lpVtbl -> userInfo(This,result) ) 

#define IWebError_failingURL(This,result)	\
    ( (This)->lpVtbl -> failingURL(This,result) ) 

#define IWebError_isPolicyChangeError(This,result)	\
    ( (This)->lpVtbl -> isPolicyChangeError(This,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebError_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0076 */
/* [local] */ 

#define WebKitErrorPlugInCancelledConnection 203
// FIXME: WebKitErrorPlugInWillHandleLoad is used for the cancel we do to prevent loading plugin content twice.  See <rdar://problem/4258008>
#define WebKitErrorPlugInWillHandleLoad 204
#define WebErrorFailingURLKey TEXT("WebErrorFailingURLKey")


extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0076_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0076_v0_0_s_ifspec;

#ifndef __IWebErrorPrivate_INTERFACE_DEFINED__
#define __IWebErrorPrivate_INTERFACE_DEFINED__

/* interface IWebErrorPrivate */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebErrorPrivate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("19FED49C-7016-48a6-B5C6-07ADE116531B")
    IWebErrorPrivate : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE sslPeerCertificate( 
            /* [retval][out] */ OLE_HANDLE *result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebErrorPrivateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebErrorPrivate * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebErrorPrivate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebErrorPrivate * This);
        
        HRESULT ( STDMETHODCALLTYPE *sslPeerCertificate )( 
            IWebErrorPrivate * This,
            /* [retval][out] */ OLE_HANDLE *result);
        
        END_INTERFACE
    } IWebErrorPrivateVtbl;

    interface IWebErrorPrivate
    {
        CONST_VTBL struct IWebErrorPrivateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebErrorPrivate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebErrorPrivate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebErrorPrivate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebErrorPrivate_sslPeerCertificate(This,result)	\
    ( (This)->lpVtbl -> sslPeerCertificate(This,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebErrorPrivate_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0077 */
/* [local] */ 







extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0077_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0077_v0_0_s_ifspec;

#ifndef __IWebFormSubmissionListener_INTERFACE_DEFINED__
#define __IWebFormSubmissionListener_INTERFACE_DEFINED__

/* interface IWebFormSubmissionListener */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebFormSubmissionListener;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1911D650-035E-4204-8746-ABECF77A4C9B")
    IWebFormSubmissionListener : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE continueSubmit( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebFormSubmissionListenerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebFormSubmissionListener * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebFormSubmissionListener * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebFormSubmissionListener * This);
        
        HRESULT ( STDMETHODCALLTYPE *continueSubmit )( 
            IWebFormSubmissionListener * This);
        
        END_INTERFACE
    } IWebFormSubmissionListenerVtbl;

    interface IWebFormSubmissionListener
    {
        CONST_VTBL struct IWebFormSubmissionListenerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebFormSubmissionListener_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebFormSubmissionListener_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebFormSubmissionListener_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebFormSubmissionListener_continueSubmit(This)	\
    ( (This)->lpVtbl -> continueSubmit(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebFormSubmissionListener_INTERFACE_DEFINED__ */


#ifndef __IWebFormDelegate_INTERFACE_DEFINED__
#define __IWebFormDelegate_INTERFACE_DEFINED__

/* interface IWebFormDelegate */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebFormDelegate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4CBEC1BD-ABC3-4bdb-8E5E-4D3BCF9E8C1E")
    IWebFormDelegate : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE textFieldDidBeginEditing( 
            /* [in] */ IDOMHTMLInputElement *element,
            /* [in] */ IWebFrame *frame) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE textFieldDidEndEditing( 
            /* [in] */ IDOMHTMLInputElement *element,
            /* [in] */ IWebFrame *frame) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE textDidChangeInTextField( 
            /* [in] */ IDOMHTMLInputElement *element,
            /* [in] */ IWebFrame *frame) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE textDidChangeInTextArea( 
            /* [in] */ IDOMHTMLTextAreaElement *element,
            /* [in] */ IWebFrame *frame) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE doPlatformCommand( 
            /* [in] */ IDOMHTMLInputElement *element,
            /* [in] */ BSTR command,
            /* [in] */ IWebFrame *frame,
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE shouldHandleEvent( 
            /* [in] */ IDOMHTMLInputElement *element,
            /* [in] */ void *event,
            /* [in] */ IWebFrame *frame,
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE willSubmitForm( 
            /* [in] */ IWebFrame *frame,
            /* [in] */ IWebFrame *sourceFrame,
            /* [in] */ IDOMElement *form,
            /* [in] */ IPropertyBag *values,
            /* [in] */ IWebFormSubmissionListener *listener) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebFormDelegateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebFormDelegate * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebFormDelegate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebFormDelegate * This);
        
        HRESULT ( STDMETHODCALLTYPE *textFieldDidBeginEditing )( 
            IWebFormDelegate * This,
            /* [in] */ IDOMHTMLInputElement *element,
            /* [in] */ IWebFrame *frame);
        
        HRESULT ( STDMETHODCALLTYPE *textFieldDidEndEditing )( 
            IWebFormDelegate * This,
            /* [in] */ IDOMHTMLInputElement *element,
            /* [in] */ IWebFrame *frame);
        
        HRESULT ( STDMETHODCALLTYPE *textDidChangeInTextField )( 
            IWebFormDelegate * This,
            /* [in] */ IDOMHTMLInputElement *element,
            /* [in] */ IWebFrame *frame);
        
        HRESULT ( STDMETHODCALLTYPE *textDidChangeInTextArea )( 
            IWebFormDelegate * This,
            /* [in] */ IDOMHTMLTextAreaElement *element,
            /* [in] */ IWebFrame *frame);
        
        HRESULT ( STDMETHODCALLTYPE *doPlatformCommand )( 
            IWebFormDelegate * This,
            /* [in] */ IDOMHTMLInputElement *element,
            /* [in] */ BSTR command,
            /* [in] */ IWebFrame *frame,
            /* [retval][out] */ BOOL *result);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *shouldHandleEvent )( 
            IWebFormDelegate * This,
            /* [in] */ IDOMHTMLInputElement *element,
            /* [in] */ void *event,
            /* [in] */ IWebFrame *frame,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *willSubmitForm )( 
            IWebFormDelegate * This,
            /* [in] */ IWebFrame *frame,
            /* [in] */ IWebFrame *sourceFrame,
            /* [in] */ IDOMElement *form,
            /* [in] */ IPropertyBag *values,
            /* [in] */ IWebFormSubmissionListener *listener);
        
        END_INTERFACE
    } IWebFormDelegateVtbl;

    interface IWebFormDelegate
    {
        CONST_VTBL struct IWebFormDelegateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebFormDelegate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebFormDelegate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebFormDelegate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebFormDelegate_textFieldDidBeginEditing(This,element,frame)	\
    ( (This)->lpVtbl -> textFieldDidBeginEditing(This,element,frame) ) 

#define IWebFormDelegate_textFieldDidEndEditing(This,element,frame)	\
    ( (This)->lpVtbl -> textFieldDidEndEditing(This,element,frame) ) 

#define IWebFormDelegate_textDidChangeInTextField(This,element,frame)	\
    ( (This)->lpVtbl -> textDidChangeInTextField(This,element,frame) ) 

#define IWebFormDelegate_textDidChangeInTextArea(This,element,frame)	\
    ( (This)->lpVtbl -> textDidChangeInTextArea(This,element,frame) ) 

#define IWebFormDelegate_doPlatformCommand(This,element,command,frame,result)	\
    ( (This)->lpVtbl -> doPlatformCommand(This,element,command,frame,result) ) 

#define IWebFormDelegate_shouldHandleEvent(This,element,event,frame,result)	\
    ( (This)->lpVtbl -> shouldHandleEvent(This,element,event,frame,result) ) 

#define IWebFormDelegate_willSubmitForm(This,frame,sourceFrame,form,values,listener)	\
    ( (This)->lpVtbl -> willSubmitForm(This,frame,sourceFrame,form,values,listener) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebFormDelegate_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0079 */
/* [local] */ 

// this is done to get midl to treat the JavaScriptCore API types as pointer types
#if 0
typedef void *JSGlobalContextRef;

#else
typedef struct OpaqueJSContext* JSGlobalContextRef;
#endif











extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0079_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0079_v0_0_s_ifspec;

#ifndef __IWebFrame_INTERFACE_DEFINED__
#define __IWebFrame_INTERFACE_DEFINED__

/* interface IWebFrame */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebFrame;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B4B22EF7-DD43-4d01-A992-99C4A8B1F845")
    IWebFrame : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE name( 
            /* [retval][out] */ BSTR *frameName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE webView( 
            /* [retval][out] */ IWebView **view) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE frameView( 
            /* [retval][out] */ IWebFrameView **view) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DOMDocument( 
            /* [retval][out] */ IDOMDocument **document) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE frameElement( 
            /* [retval][out] */ IDOMHTMLElement **frameElement) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE loadRequest( 
            /* [in] */ IWebURLRequest *request) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE loadData( 
            /* [in] */ IStream *data,
            /* [in] */ BSTR mimeType,
            /* [in] */ BSTR textEncodingName,
            /* [in] */ BSTR url) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE loadHTMLString( 
            /* [in] */ BSTR string,
            /* [in] */ BSTR baseURL) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE loadAlternateHTMLString( 
            /* [in] */ BSTR str,
            /* [in] */ BSTR baseURL,
            /* [in] */ BSTR unreachableURL) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE loadArchive( 
            /* [in] */ IWebArchive *archive) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE dataSource( 
            /* [retval][out] */ IWebDataSource **source) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE provisionalDataSource( 
            /* [retval][out] */ IWebDataSource **source) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE stopLoading( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE reload( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE findFrameNamed( 
            /* [in] */ BSTR name,
            /* [retval][out] */ IWebFrame **frame) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE parentFrame( 
            /* [retval][out] */ IWebFrame **frame) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE childFrames( 
            /* [retval][out] */ IEnumVARIANT **enumFrames) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE currentForm( 
            /* [retval][out] */ IDOMElement **frameElement) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setAllowsScrolling( 
            /* [in] */ BOOL flag) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE allowsScrolling( 
            /* [retval][out] */ BOOL *flag) = 0;
        
        virtual /* [local] */ JSGlobalContextRef STDMETHODCALLTYPE globalContext( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setIsDisconnected( 
            /* [in] */ BOOL flag) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setExcludeFromTextSearch( 
            /* [in] */ BOOL flag) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE reloadFromOrigin( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebFrameVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebFrame * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebFrame * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebFrame * This);
        
        HRESULT ( STDMETHODCALLTYPE *name )( 
            IWebFrame * This,
            /* [retval][out] */ BSTR *frameName);
        
        HRESULT ( STDMETHODCALLTYPE *webView )( 
            IWebFrame * This,
            /* [retval][out] */ IWebView **view);
        
        HRESULT ( STDMETHODCALLTYPE *frameView )( 
            IWebFrame * This,
            /* [retval][out] */ IWebFrameView **view);
        
        HRESULT ( STDMETHODCALLTYPE *DOMDocument )( 
            IWebFrame * This,
            /* [retval][out] */ IDOMDocument **document);
        
        HRESULT ( STDMETHODCALLTYPE *frameElement )( 
            IWebFrame * This,
            /* [retval][out] */ IDOMHTMLElement **frameElement);
        
        HRESULT ( STDMETHODCALLTYPE *loadRequest )( 
            IWebFrame * This,
            /* [in] */ IWebURLRequest *request);
        
        HRESULT ( STDMETHODCALLTYPE *loadData )( 
            IWebFrame * This,
            /* [in] */ IStream *data,
            /* [in] */ BSTR mimeType,
            /* [in] */ BSTR textEncodingName,
            /* [in] */ BSTR url);
        
        HRESULT ( STDMETHODCALLTYPE *loadHTMLString )( 
            IWebFrame * This,
            /* [in] */ BSTR string,
            /* [in] */ BSTR baseURL);
        
        HRESULT ( STDMETHODCALLTYPE *loadAlternateHTMLString )( 
            IWebFrame * This,
            /* [in] */ BSTR str,
            /* [in] */ BSTR baseURL,
            /* [in] */ BSTR unreachableURL);
        
        HRESULT ( STDMETHODCALLTYPE *loadArchive )( 
            IWebFrame * This,
            /* [in] */ IWebArchive *archive);
        
        HRESULT ( STDMETHODCALLTYPE *dataSource )( 
            IWebFrame * This,
            /* [retval][out] */ IWebDataSource **source);
        
        HRESULT ( STDMETHODCALLTYPE *provisionalDataSource )( 
            IWebFrame * This,
            /* [retval][out] */ IWebDataSource **source);
        
        HRESULT ( STDMETHODCALLTYPE *stopLoading )( 
            IWebFrame * This);
        
        HRESULT ( STDMETHODCALLTYPE *reload )( 
            IWebFrame * This);
        
        HRESULT ( STDMETHODCALLTYPE *findFrameNamed )( 
            IWebFrame * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ IWebFrame **frame);
        
        HRESULT ( STDMETHODCALLTYPE *parentFrame )( 
            IWebFrame * This,
            /* [retval][out] */ IWebFrame **frame);
        
        HRESULT ( STDMETHODCALLTYPE *childFrames )( 
            IWebFrame * This,
            /* [retval][out] */ IEnumVARIANT **enumFrames);
        
        HRESULT ( STDMETHODCALLTYPE *currentForm )( 
            IWebFrame * This,
            /* [retval][out] */ IDOMElement **frameElement);
        
        HRESULT ( STDMETHODCALLTYPE *setAllowsScrolling )( 
            IWebFrame * This,
            /* [in] */ BOOL flag);
        
        HRESULT ( STDMETHODCALLTYPE *allowsScrolling )( 
            IWebFrame * This,
            /* [retval][out] */ BOOL *flag);
        
        /* [local] */ JSGlobalContextRef ( STDMETHODCALLTYPE *globalContext )( 
            IWebFrame * This);
        
        HRESULT ( STDMETHODCALLTYPE *setIsDisconnected )( 
            IWebFrame * This,
            /* [in] */ BOOL flag);
        
        HRESULT ( STDMETHODCALLTYPE *setExcludeFromTextSearch )( 
            IWebFrame * This,
            /* [in] */ BOOL flag);
        
        HRESULT ( STDMETHODCALLTYPE *reloadFromOrigin )( 
            IWebFrame * This);
        
        END_INTERFACE
    } IWebFrameVtbl;

    interface IWebFrame
    {
        CONST_VTBL struct IWebFrameVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebFrame_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebFrame_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebFrame_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebFrame_name(This,frameName)	\
    ( (This)->lpVtbl -> name(This,frameName) ) 

#define IWebFrame_webView(This,view)	\
    ( (This)->lpVtbl -> webView(This,view) ) 

#define IWebFrame_frameView(This,view)	\
    ( (This)->lpVtbl -> frameView(This,view) ) 

#define IWebFrame_DOMDocument(This,document)	\
    ( (This)->lpVtbl -> DOMDocument(This,document) ) 

#define IWebFrame_frameElement(This,frameElement)	\
    ( (This)->lpVtbl -> frameElement(This,frameElement) ) 

#define IWebFrame_loadRequest(This,request)	\
    ( (This)->lpVtbl -> loadRequest(This,request) ) 

#define IWebFrame_loadData(This,data,mimeType,textEncodingName,url)	\
    ( (This)->lpVtbl -> loadData(This,data,mimeType,textEncodingName,url) ) 

#define IWebFrame_loadHTMLString(This,string,baseURL)	\
    ( (This)->lpVtbl -> loadHTMLString(This,string,baseURL) ) 

#define IWebFrame_loadAlternateHTMLString(This,str,baseURL,unreachableURL)	\
    ( (This)->lpVtbl -> loadAlternateHTMLString(This,str,baseURL,unreachableURL) ) 

#define IWebFrame_loadArchive(This,archive)	\
    ( (This)->lpVtbl -> loadArchive(This,archive) ) 

#define IWebFrame_dataSource(This,source)	\
    ( (This)->lpVtbl -> dataSource(This,source) ) 

#define IWebFrame_provisionalDataSource(This,source)	\
    ( (This)->lpVtbl -> provisionalDataSource(This,source) ) 

#define IWebFrame_stopLoading(This)	\
    ( (This)->lpVtbl -> stopLoading(This) ) 

#define IWebFrame_reload(This)	\
    ( (This)->lpVtbl -> reload(This) ) 

#define IWebFrame_findFrameNamed(This,name,frame)	\
    ( (This)->lpVtbl -> findFrameNamed(This,name,frame) ) 

#define IWebFrame_parentFrame(This,frame)	\
    ( (This)->lpVtbl -> parentFrame(This,frame) ) 

#define IWebFrame_childFrames(This,enumFrames)	\
    ( (This)->lpVtbl -> childFrames(This,enumFrames) ) 

#define IWebFrame_currentForm(This,frameElement)	\
    ( (This)->lpVtbl -> currentForm(This,frameElement) ) 

#define IWebFrame_setAllowsScrolling(This,flag)	\
    ( (This)->lpVtbl -> setAllowsScrolling(This,flag) ) 

#define IWebFrame_allowsScrolling(This,flag)	\
    ( (This)->lpVtbl -> allowsScrolling(This,flag) ) 

#define IWebFrame_globalContext(This)	\
    ( (This)->lpVtbl -> globalContext(This) ) 

#define IWebFrame_setIsDisconnected(This,flag)	\
    ( (This)->lpVtbl -> setIsDisconnected(This,flag) ) 

#define IWebFrame_setExcludeFromTextSearch(This,flag)	\
    ( (This)->lpVtbl -> setExcludeFromTextSearch(This,flag) ) 

#define IWebFrame_reloadFromOrigin(This)	\
    ( (This)->lpVtbl -> reloadFromOrigin(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebFrame_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0080 */
/* [local] */ 







extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0080_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0080_v0_0_s_ifspec;

#ifndef __IWebFrameLoadDelegate_INTERFACE_DEFINED__
#define __IWebFrameLoadDelegate_INTERFACE_DEFINED__

/* interface IWebFrameLoadDelegate */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebFrameLoadDelegate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3354665B-84BA-4fdf-B35E-BF5CF9D96026")
    IWebFrameLoadDelegate : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE didStartProvisionalLoadForFrame( 
            /* [in] */ IWebView *webView,
            /* [in] */ IWebFrame *frame) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE didReceiveServerRedirectForProvisionalLoadForFrame( 
            /* [in] */ IWebView *webView,
            /* [in] */ IWebFrame *frame) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE didFailProvisionalLoadWithError( 
            /* [in] */ IWebView *webView,
            /* [in] */ IWebError *error,
            /* [in] */ IWebFrame *frame) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE didCommitLoadForFrame( 
            /* [in] */ IWebView *webView,
            /* [in] */ IWebFrame *frame) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE didReceiveTitle( 
            /* [in] */ IWebView *webView,
            /* [in] */ BSTR title,
            /* [in] */ IWebFrame *frame) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE didReceiveIcon( 
            /* [in] */ IWebView *webView,
            /* [in] */ OLE_HANDLE hBitmap,
            /* [in] */ IWebFrame *frame) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE didFinishLoadForFrame( 
            /* [in] */ IWebView *webView,
            /* [in] */ IWebFrame *frame) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE didFailLoadWithError( 
            /* [in] */ IWebView *webView,
            /* [in] */ IWebError *error,
            /* [in] */ IWebFrame *forFrame) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE didChangeLocationWithinPageForFrame( 
            /* [in] */ IWebView *webView,
            /* [in] */ IWebFrame *frame) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE willPerformClientRedirectToURL( 
            /* [in] */ IWebView *webView,
            /* [in] */ BSTR url,
            /* [in] */ double delaySeconds,
            /* [in] */ DATE fireDate,
            /* [in] */ IWebFrame *frame) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE didCancelClientRedirectForFrame( 
            /* [in] */ IWebView *webView,
            /* [in] */ IWebFrame *frame) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE willCloseFrame( 
            /* [in] */ IWebView *webView,
            /* [in] */ IWebFrame *frame) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE windowScriptObjectAvailable( 
            /* [in] */ IWebView *webView,
            /* [in] */ JSContextRef context,
            /* [in] */ JSObjectRef windowScriptObject) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE didClearWindowObject( 
            /* [in] */ IWebView *webView,
            /* [in] */ JSContextRef context,
            /* [in] */ JSObjectRef windowScriptObject,
            /* [in] */ IWebFrame *frame) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebFrameLoadDelegateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebFrameLoadDelegate * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebFrameLoadDelegate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebFrameLoadDelegate * This);
        
        HRESULT ( STDMETHODCALLTYPE *didStartProvisionalLoadForFrame )( 
            IWebFrameLoadDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ IWebFrame *frame);
        
        HRESULT ( STDMETHODCALLTYPE *didReceiveServerRedirectForProvisionalLoadForFrame )( 
            IWebFrameLoadDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ IWebFrame *frame);
        
        HRESULT ( STDMETHODCALLTYPE *didFailProvisionalLoadWithError )( 
            IWebFrameLoadDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ IWebError *error,
            /* [in] */ IWebFrame *frame);
        
        HRESULT ( STDMETHODCALLTYPE *didCommitLoadForFrame )( 
            IWebFrameLoadDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ IWebFrame *frame);
        
        HRESULT ( STDMETHODCALLTYPE *didReceiveTitle )( 
            IWebFrameLoadDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ BSTR title,
            /* [in] */ IWebFrame *frame);
        
        HRESULT ( STDMETHODCALLTYPE *didReceiveIcon )( 
            IWebFrameLoadDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ OLE_HANDLE hBitmap,
            /* [in] */ IWebFrame *frame);
        
        HRESULT ( STDMETHODCALLTYPE *didFinishLoadForFrame )( 
            IWebFrameLoadDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ IWebFrame *frame);
        
        HRESULT ( STDMETHODCALLTYPE *didFailLoadWithError )( 
            IWebFrameLoadDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ IWebError *error,
            /* [in] */ IWebFrame *forFrame);
        
        HRESULT ( STDMETHODCALLTYPE *didChangeLocationWithinPageForFrame )( 
            IWebFrameLoadDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ IWebFrame *frame);
        
        HRESULT ( STDMETHODCALLTYPE *willPerformClientRedirectToURL )( 
            IWebFrameLoadDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ BSTR url,
            /* [in] */ double delaySeconds,
            /* [in] */ DATE fireDate,
            /* [in] */ IWebFrame *frame);
        
        HRESULT ( STDMETHODCALLTYPE *didCancelClientRedirectForFrame )( 
            IWebFrameLoadDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ IWebFrame *frame);
        
        HRESULT ( STDMETHODCALLTYPE *willCloseFrame )( 
            IWebFrameLoadDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ IWebFrame *frame);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *windowScriptObjectAvailable )( 
            IWebFrameLoadDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ JSContextRef context,
            /* [in] */ JSObjectRef windowScriptObject);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *didClearWindowObject )( 
            IWebFrameLoadDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ JSContextRef context,
            /* [in] */ JSObjectRef windowScriptObject,
            /* [in] */ IWebFrame *frame);
        
        END_INTERFACE
    } IWebFrameLoadDelegateVtbl;

    interface IWebFrameLoadDelegate
    {
        CONST_VTBL struct IWebFrameLoadDelegateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebFrameLoadDelegate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebFrameLoadDelegate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebFrameLoadDelegate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebFrameLoadDelegate_didStartProvisionalLoadForFrame(This,webView,frame)	\
    ( (This)->lpVtbl -> didStartProvisionalLoadForFrame(This,webView,frame) ) 

#define IWebFrameLoadDelegate_didReceiveServerRedirectForProvisionalLoadForFrame(This,webView,frame)	\
    ( (This)->lpVtbl -> didReceiveServerRedirectForProvisionalLoadForFrame(This,webView,frame) ) 

#define IWebFrameLoadDelegate_didFailProvisionalLoadWithError(This,webView,error,frame)	\
    ( (This)->lpVtbl -> didFailProvisionalLoadWithError(This,webView,error,frame) ) 

#define IWebFrameLoadDelegate_didCommitLoadForFrame(This,webView,frame)	\
    ( (This)->lpVtbl -> didCommitLoadForFrame(This,webView,frame) ) 

#define IWebFrameLoadDelegate_didReceiveTitle(This,webView,title,frame)	\
    ( (This)->lpVtbl -> didReceiveTitle(This,webView,title,frame) ) 

#define IWebFrameLoadDelegate_didReceiveIcon(This,webView,hBitmap,frame)	\
    ( (This)->lpVtbl -> didReceiveIcon(This,webView,hBitmap,frame) ) 

#define IWebFrameLoadDelegate_didFinishLoadForFrame(This,webView,frame)	\
    ( (This)->lpVtbl -> didFinishLoadForFrame(This,webView,frame) ) 

#define IWebFrameLoadDelegate_didFailLoadWithError(This,webView,error,forFrame)	\
    ( (This)->lpVtbl -> didFailLoadWithError(This,webView,error,forFrame) ) 

#define IWebFrameLoadDelegate_didChangeLocationWithinPageForFrame(This,webView,frame)	\
    ( (This)->lpVtbl -> didChangeLocationWithinPageForFrame(This,webView,frame) ) 

#define IWebFrameLoadDelegate_willPerformClientRedirectToURL(This,webView,url,delaySeconds,fireDate,frame)	\
    ( (This)->lpVtbl -> willPerformClientRedirectToURL(This,webView,url,delaySeconds,fireDate,frame) ) 

#define IWebFrameLoadDelegate_didCancelClientRedirectForFrame(This,webView,frame)	\
    ( (This)->lpVtbl -> didCancelClientRedirectForFrame(This,webView,frame) ) 

#define IWebFrameLoadDelegate_willCloseFrame(This,webView,frame)	\
    ( (This)->lpVtbl -> willCloseFrame(This,webView,frame) ) 

#define IWebFrameLoadDelegate_windowScriptObjectAvailable(This,webView,context,windowScriptObject)	\
    ( (This)->lpVtbl -> windowScriptObjectAvailable(This,webView,context,windowScriptObject) ) 

#define IWebFrameLoadDelegate_didClearWindowObject(This,webView,context,windowScriptObject,frame)	\
    ( (This)->lpVtbl -> didClearWindowObject(This,webView,context,windowScriptObject,frame) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebFrameLoadDelegate_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0081 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0081_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0081_v0_0_s_ifspec;

#ifndef __IWebFrameLoadDelegatePrivate_INTERFACE_DEFINED__
#define __IWebFrameLoadDelegatePrivate_INTERFACE_DEFINED__

/* interface IWebFrameLoadDelegatePrivate */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebFrameLoadDelegatePrivate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5566CB49-6E87-4075-80CE-9BAC374C52DE")
    IWebFrameLoadDelegatePrivate : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE didFinishDocumentLoadForFrame( 
            /* [in] */ IWebView *sender,
            /* [in] */ IWebFrame *frame) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE didFirstLayoutInFrame( 
            /* [in] */ IWebView *sender,
            /* [in] */ IWebFrame *frame) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE didHandleOnloadEventsForFrame( 
            /* [in] */ IWebView *sender,
            /* [in] */ IWebFrame *frame) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE didFirstVisuallyNonEmptyLayoutInFrame( 
            /* [in] */ IWebView *sender,
            /* [in] */ IWebFrame *frame) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebFrameLoadDelegatePrivateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebFrameLoadDelegatePrivate * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebFrameLoadDelegatePrivate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebFrameLoadDelegatePrivate * This);
        
        HRESULT ( STDMETHODCALLTYPE *didFinishDocumentLoadForFrame )( 
            IWebFrameLoadDelegatePrivate * This,
            /* [in] */ IWebView *sender,
            /* [in] */ IWebFrame *frame);
        
        HRESULT ( STDMETHODCALLTYPE *didFirstLayoutInFrame )( 
            IWebFrameLoadDelegatePrivate * This,
            /* [in] */ IWebView *sender,
            /* [in] */ IWebFrame *frame);
        
        HRESULT ( STDMETHODCALLTYPE *didHandleOnloadEventsForFrame )( 
            IWebFrameLoadDelegatePrivate * This,
            /* [in] */ IWebView *sender,
            /* [in] */ IWebFrame *frame);
        
        HRESULT ( STDMETHODCALLTYPE *didFirstVisuallyNonEmptyLayoutInFrame )( 
            IWebFrameLoadDelegatePrivate * This,
            /* [in] */ IWebView *sender,
            /* [in] */ IWebFrame *frame);
        
        END_INTERFACE
    } IWebFrameLoadDelegatePrivateVtbl;

    interface IWebFrameLoadDelegatePrivate
    {
        CONST_VTBL struct IWebFrameLoadDelegatePrivateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebFrameLoadDelegatePrivate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebFrameLoadDelegatePrivate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebFrameLoadDelegatePrivate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebFrameLoadDelegatePrivate_didFinishDocumentLoadForFrame(This,sender,frame)	\
    ( (This)->lpVtbl -> didFinishDocumentLoadForFrame(This,sender,frame) ) 

#define IWebFrameLoadDelegatePrivate_didFirstLayoutInFrame(This,sender,frame)	\
    ( (This)->lpVtbl -> didFirstLayoutInFrame(This,sender,frame) ) 

#define IWebFrameLoadDelegatePrivate_didHandleOnloadEventsForFrame(This,sender,frame)	\
    ( (This)->lpVtbl -> didHandleOnloadEventsForFrame(This,sender,frame) ) 

#define IWebFrameLoadDelegatePrivate_didFirstVisuallyNonEmptyLayoutInFrame(This,sender,frame)	\
    ( (This)->lpVtbl -> didFirstVisuallyNonEmptyLayoutInFrame(This,sender,frame) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebFrameLoadDelegatePrivate_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0082 */
/* [local] */ 







extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0082_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0082_v0_0_s_ifspec;

#ifndef __IWebFrameLoadDelegatePrivate2_INTERFACE_DEFINED__
#define __IWebFrameLoadDelegatePrivate2_INTERFACE_DEFINED__

/* interface IWebFrameLoadDelegatePrivate2 */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebFrameLoadDelegatePrivate2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4148C9F8-94D9-479A-BCF1-C15E5269CCC1")
    IWebFrameLoadDelegatePrivate2 : public IWebFrameLoadDelegatePrivate
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE didDisplayInsecureContent( 
            /* [in] */ IWebView *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE didRunInsecureContent( 
            /* [in] */ IWebView *sender,
            /* [in] */ IWebSecurityOrigin *origin) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE didClearWindowObjectForFrameInScriptWorld( 
            /* [in] */ IWebView *webView,
            /* [in] */ IWebFrame *frame,
            /* [in] */ IWebScriptWorld *__MIDL__IWebFrameLoadDelegatePrivate20000) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE didPushStateWithinPageForFrame( 
            /* [in] */ IWebView *webView,
            /* [in] */ IWebFrame *frame) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE didReplaceStateWithinPageForFrame( 
            /* [in] */ IWebView *webView,
            /* [in] */ IWebFrame *frame) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE didPopStateWithinPageForFrame( 
            /* [in] */ IWebView *webView,
            /* [in] */ IWebFrame *frame) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE didChangeIcons( 
            /* [in] */ IWebView *webView,
            /* [in] */ IWebFrame *frame) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebFrameLoadDelegatePrivate2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebFrameLoadDelegatePrivate2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebFrameLoadDelegatePrivate2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebFrameLoadDelegatePrivate2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *didFinishDocumentLoadForFrame )( 
            IWebFrameLoadDelegatePrivate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ IWebFrame *frame);
        
        HRESULT ( STDMETHODCALLTYPE *didFirstLayoutInFrame )( 
            IWebFrameLoadDelegatePrivate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ IWebFrame *frame);
        
        HRESULT ( STDMETHODCALLTYPE *didHandleOnloadEventsForFrame )( 
            IWebFrameLoadDelegatePrivate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ IWebFrame *frame);
        
        HRESULT ( STDMETHODCALLTYPE *didFirstVisuallyNonEmptyLayoutInFrame )( 
            IWebFrameLoadDelegatePrivate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ IWebFrame *frame);
        
        HRESULT ( STDMETHODCALLTYPE *didDisplayInsecureContent )( 
            IWebFrameLoadDelegatePrivate2 * This,
            /* [in] */ IWebView *sender);
        
        HRESULT ( STDMETHODCALLTYPE *didRunInsecureContent )( 
            IWebFrameLoadDelegatePrivate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ IWebSecurityOrigin *origin);
        
        HRESULT ( STDMETHODCALLTYPE *didClearWindowObjectForFrameInScriptWorld )( 
            IWebFrameLoadDelegatePrivate2 * This,
            /* [in] */ IWebView *webView,
            /* [in] */ IWebFrame *frame,
            /* [in] */ IWebScriptWorld *__MIDL__IWebFrameLoadDelegatePrivate20000);
        
        HRESULT ( STDMETHODCALLTYPE *didPushStateWithinPageForFrame )( 
            IWebFrameLoadDelegatePrivate2 * This,
            /* [in] */ IWebView *webView,
            /* [in] */ IWebFrame *frame);
        
        HRESULT ( STDMETHODCALLTYPE *didReplaceStateWithinPageForFrame )( 
            IWebFrameLoadDelegatePrivate2 * This,
            /* [in] */ IWebView *webView,
            /* [in] */ IWebFrame *frame);
        
        HRESULT ( STDMETHODCALLTYPE *didPopStateWithinPageForFrame )( 
            IWebFrameLoadDelegatePrivate2 * This,
            /* [in] */ IWebView *webView,
            /* [in] */ IWebFrame *frame);
        
        HRESULT ( STDMETHODCALLTYPE *didChangeIcons )( 
            IWebFrameLoadDelegatePrivate2 * This,
            /* [in] */ IWebView *webView,
            /* [in] */ IWebFrame *frame);
        
        END_INTERFACE
    } IWebFrameLoadDelegatePrivate2Vtbl;

    interface IWebFrameLoadDelegatePrivate2
    {
        CONST_VTBL struct IWebFrameLoadDelegatePrivate2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebFrameLoadDelegatePrivate2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebFrameLoadDelegatePrivate2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebFrameLoadDelegatePrivate2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebFrameLoadDelegatePrivate2_didFinishDocumentLoadForFrame(This,sender,frame)	\
    ( (This)->lpVtbl -> didFinishDocumentLoadForFrame(This,sender,frame) ) 

#define IWebFrameLoadDelegatePrivate2_didFirstLayoutInFrame(This,sender,frame)	\
    ( (This)->lpVtbl -> didFirstLayoutInFrame(This,sender,frame) ) 

#define IWebFrameLoadDelegatePrivate2_didHandleOnloadEventsForFrame(This,sender,frame)	\
    ( (This)->lpVtbl -> didHandleOnloadEventsForFrame(This,sender,frame) ) 

#define IWebFrameLoadDelegatePrivate2_didFirstVisuallyNonEmptyLayoutInFrame(This,sender,frame)	\
    ( (This)->lpVtbl -> didFirstVisuallyNonEmptyLayoutInFrame(This,sender,frame) ) 


#define IWebFrameLoadDelegatePrivate2_didDisplayInsecureContent(This,sender)	\
    ( (This)->lpVtbl -> didDisplayInsecureContent(This,sender) ) 

#define IWebFrameLoadDelegatePrivate2_didRunInsecureContent(This,sender,origin)	\
    ( (This)->lpVtbl -> didRunInsecureContent(This,sender,origin) ) 

#define IWebFrameLoadDelegatePrivate2_didClearWindowObjectForFrameInScriptWorld(This,webView,frame,__MIDL__IWebFrameLoadDelegatePrivate20000)	\
    ( (This)->lpVtbl -> didClearWindowObjectForFrameInScriptWorld(This,webView,frame,__MIDL__IWebFrameLoadDelegatePrivate20000) ) 

#define IWebFrameLoadDelegatePrivate2_didPushStateWithinPageForFrame(This,webView,frame)	\
    ( (This)->lpVtbl -> didPushStateWithinPageForFrame(This,webView,frame) ) 

#define IWebFrameLoadDelegatePrivate2_didReplaceStateWithinPageForFrame(This,webView,frame)	\
    ( (This)->lpVtbl -> didReplaceStateWithinPageForFrame(This,webView,frame) ) 

#define IWebFrameLoadDelegatePrivate2_didPopStateWithinPageForFrame(This,webView,frame)	\
    ( (This)->lpVtbl -> didPopStateWithinPageForFrame(This,webView,frame) ) 

#define IWebFrameLoadDelegatePrivate2_didChangeIcons(This,webView,frame)	\
    ( (This)->lpVtbl -> didChangeIcons(This,webView,frame) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebFrameLoadDelegatePrivate2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0083 */
/* [local] */ 





typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_WebKit_0000_0083_0001
    {	WebFrameLoadTypeStandard	= 0,
	WebFrameLoadTypeBack	= ( WebFrameLoadTypeStandard + 1 ) ,
	WebFrameLoadTypeForward	= ( WebFrameLoadTypeBack + 1 ) ,
	WebFrameLoadTypeIndexedBackForward	= ( WebFrameLoadTypeForward + 1 ) ,
	WebFrameLoadTypeReload	= ( WebFrameLoadTypeIndexedBackForward + 1 ) ,
	WebFrameLoadTypeReloadAllowingStaleData	= ( WebFrameLoadTypeReload + 1 ) ,
	WebFrameLoadTypeSame	= ( WebFrameLoadTypeReloadAllowingStaleData + 1 ) ,
	WebFrameLoadTypeRedirectWithLockedBackForwardList	= ( WebFrameLoadTypeSame + 1 ) ,
	WebFrameLoadTypeReplace	= ( WebFrameLoadTypeRedirectWithLockedBackForwardList + 1 ) ,
	WebFrameLoadTypeReloadFromOrigin	= ( WebFrameLoadTypeReplace + 1 ) ,
	WebFrameLoadTypeBackWMLDeckNotAccessible	= ( WebFrameLoadTypeReloadFromOrigin + 1 ) 
    } 	WebFrameLoadType;



extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0083_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0083_v0_0_s_ifspec;

#ifndef __IWebFramePrivate_INTERFACE_DEFINED__
#define __IWebFramePrivate_INTERFACE_DEFINED__

/* interface IWebFramePrivate */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebFramePrivate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A1657D07-4881-4475-9D10-76548731D448")
    IWebFramePrivate : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE unused1( 
            /* [retval][out] */ BSTR *__MIDL__IWebFramePrivate0000) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE scrollOffset( 
            /* [retval][out] */ SIZE *offset) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE layout( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE firstLayoutDone( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE loadType( 
            /* [retval][out] */ WebFrameLoadType *type) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setInPrintingMode( 
            /* [in] */ BOOL value,
            /* [in] */ HDC printDC) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getPrintedPageCount( 
            /* [in] */ HDC printDC,
            /* [retval][out] */ UINT *pageCount) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE spoolPages( 
            /* [in] */ HDC printDC,
            /* [in] */ UINT startPage,
            /* [in] */ UINT endPage,
            /* [in] */ void *ctx) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isFrameSet( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE string( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE size( 
            /* [retval][out] */ SIZE *size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE hasScrollBars( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE contentBounds( 
            /* [retval][out] */ RECT *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE frameBounds( 
            /* [retval][out] */ RECT *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isDescendantOfFrame( 
            /* [in] */ IWebFrame *ancestor,
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE pendingFrameUnloadEventCount( 
            /* [retval][out] */ UINT *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE fetchApplicationIcon( 
            /* [in] */ IWebIconFetcherDelegate *delegate,
            /* [retval][out] */ IWebIconFetcher **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE paintDocumentRectToContext( 
            /* [in] */ RECT rect,
            /* [in] */ OLE_HANDLE deviceContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE elementDoesAutoComplete( 
            /* [in] */ IDOMElement *element,
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE pauseAnimation( 
            /* [in] */ BSTR animationName,
            /* [in] */ IDOMNode *node,
            /* [in] */ double secondsFromNow,
            /* [retval][out] */ BOOL *animationWasRunning) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE pauseTransition( 
            /* [in] */ BSTR propertyName,
            /* [in] */ IDOMNode *node,
            /* [in] */ double secondsFromNow,
            /* [retval][out] */ BOOL *transitionWasRunning) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE numberOfActiveAnimations( 
            /* [retval][out] */ UINT *number) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isDisplayingStandaloneImage( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE allowsFollowingLink( 
            /* [in] */ BSTR url,
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE stringByEvaluatingJavaScriptInScriptWorld( 
            /* [in] */ IWebScriptWorld *__MIDL__IWebFramePrivate0001,
            /* [in] */ JSObjectRef globalObject,
            /* [in] */ BSTR script,
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual /* [local] */ JSGlobalContextRef STDMETHODCALLTYPE globalContextForScriptWorld( 
            /* [in] */ IWebScriptWorld *__MIDL__IWebFramePrivate0002) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE counterValueForElementById( 
            /* [in] */ BSTR id,
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE pauseSVGAnimation( 
            /* [in] */ BSTR elementId,
            /* [in] */ IDOMNode *node,
            /* [in] */ double secondsFromNow,
            /* [retval][out] */ BOOL *animationWasRunning) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE visibleContentRect( 
            /* [retval][out] */ RECT *__MIDL__IWebFramePrivate0003) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE pageNumberForElementById( 
            /* [in] */ BSTR id,
            /* [in] */ float pageWidthInPixels,
            /* [in] */ float pageHeightInPixels,
            /* [retval][out] */ int *pageNumber) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE numberOfPages( 
            /* [in] */ float pageWidthInPixels,
            /* [in] */ float pageHeightInPixels,
            /* [retval][out] */ int *pageNumber) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE layerTreeAsText( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE paintScrollViewRectToContextAtPoint( 
            /* [in] */ RECT rect,
            /* [in] */ POINT pt,
            /* [in] */ OLE_HANDLE deviceContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE renderTreeAsExternalRepresentation( 
            /* [in] */ BOOL forPrinting,
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE suspendAnimations( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE resumeAnimations( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebFramePrivateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebFramePrivate * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebFramePrivate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebFramePrivate * This);
        
        HRESULT ( STDMETHODCALLTYPE *unused1 )( 
            IWebFramePrivate * This,
            /* [retval][out] */ BSTR *__MIDL__IWebFramePrivate0000);
        
        HRESULT ( STDMETHODCALLTYPE *scrollOffset )( 
            IWebFramePrivate * This,
            /* [retval][out] */ SIZE *offset);
        
        HRESULT ( STDMETHODCALLTYPE *layout )( 
            IWebFramePrivate * This);
        
        HRESULT ( STDMETHODCALLTYPE *firstLayoutDone )( 
            IWebFramePrivate * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *loadType )( 
            IWebFramePrivate * This,
            /* [retval][out] */ WebFrameLoadType *type);
        
        HRESULT ( STDMETHODCALLTYPE *setInPrintingMode )( 
            IWebFramePrivate * This,
            /* [in] */ BOOL value,
            /* [in] */ HDC printDC);
        
        HRESULT ( STDMETHODCALLTYPE *getPrintedPageCount )( 
            IWebFramePrivate * This,
            /* [in] */ HDC printDC,
            /* [retval][out] */ UINT *pageCount);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *spoolPages )( 
            IWebFramePrivate * This,
            /* [in] */ HDC printDC,
            /* [in] */ UINT startPage,
            /* [in] */ UINT endPage,
            /* [in] */ void *ctx);
        
        HRESULT ( STDMETHODCALLTYPE *isFrameSet )( 
            IWebFramePrivate * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *string )( 
            IWebFramePrivate * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *size )( 
            IWebFramePrivate * This,
            /* [retval][out] */ SIZE *size);
        
        HRESULT ( STDMETHODCALLTYPE *hasScrollBars )( 
            IWebFramePrivate * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *contentBounds )( 
            IWebFramePrivate * This,
            /* [retval][out] */ RECT *result);
        
        HRESULT ( STDMETHODCALLTYPE *frameBounds )( 
            IWebFramePrivate * This,
            /* [retval][out] */ RECT *result);
        
        HRESULT ( STDMETHODCALLTYPE *isDescendantOfFrame )( 
            IWebFramePrivate * This,
            /* [in] */ IWebFrame *ancestor,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *pendingFrameUnloadEventCount )( 
            IWebFramePrivate * This,
            /* [retval][out] */ UINT *result);
        
        HRESULT ( STDMETHODCALLTYPE *fetchApplicationIcon )( 
            IWebFramePrivate * This,
            /* [in] */ IWebIconFetcherDelegate *delegate,
            /* [retval][out] */ IWebIconFetcher **result);
        
        HRESULT ( STDMETHODCALLTYPE *paintDocumentRectToContext )( 
            IWebFramePrivate * This,
            /* [in] */ RECT rect,
            /* [in] */ OLE_HANDLE deviceContext);
        
        HRESULT ( STDMETHODCALLTYPE *elementDoesAutoComplete )( 
            IWebFramePrivate * This,
            /* [in] */ IDOMElement *element,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *pauseAnimation )( 
            IWebFramePrivate * This,
            /* [in] */ BSTR animationName,
            /* [in] */ IDOMNode *node,
            /* [in] */ double secondsFromNow,
            /* [retval][out] */ BOOL *animationWasRunning);
        
        HRESULT ( STDMETHODCALLTYPE *pauseTransition )( 
            IWebFramePrivate * This,
            /* [in] */ BSTR propertyName,
            /* [in] */ IDOMNode *node,
            /* [in] */ double secondsFromNow,
            /* [retval][out] */ BOOL *transitionWasRunning);
        
        HRESULT ( STDMETHODCALLTYPE *numberOfActiveAnimations )( 
            IWebFramePrivate * This,
            /* [retval][out] */ UINT *number);
        
        HRESULT ( STDMETHODCALLTYPE *isDisplayingStandaloneImage )( 
            IWebFramePrivate * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *allowsFollowingLink )( 
            IWebFramePrivate * This,
            /* [in] */ BSTR url,
            /* [retval][out] */ BOOL *result);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *stringByEvaluatingJavaScriptInScriptWorld )( 
            IWebFramePrivate * This,
            /* [in] */ IWebScriptWorld *__MIDL__IWebFramePrivate0001,
            /* [in] */ JSObjectRef globalObject,
            /* [in] */ BSTR script,
            /* [retval][out] */ BSTR *result);
        
        /* [local] */ JSGlobalContextRef ( STDMETHODCALLTYPE *globalContextForScriptWorld )( 
            IWebFramePrivate * This,
            /* [in] */ IWebScriptWorld *__MIDL__IWebFramePrivate0002);
        
        HRESULT ( STDMETHODCALLTYPE *counterValueForElementById )( 
            IWebFramePrivate * This,
            /* [in] */ BSTR id,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *pauseSVGAnimation )( 
            IWebFramePrivate * This,
            /* [in] */ BSTR elementId,
            /* [in] */ IDOMNode *node,
            /* [in] */ double secondsFromNow,
            /* [retval][out] */ BOOL *animationWasRunning);
        
        HRESULT ( STDMETHODCALLTYPE *visibleContentRect )( 
            IWebFramePrivate * This,
            /* [retval][out] */ RECT *__MIDL__IWebFramePrivate0003);
        
        HRESULT ( STDMETHODCALLTYPE *pageNumberForElementById )( 
            IWebFramePrivate * This,
            /* [in] */ BSTR id,
            /* [in] */ float pageWidthInPixels,
            /* [in] */ float pageHeightInPixels,
            /* [retval][out] */ int *pageNumber);
        
        HRESULT ( STDMETHODCALLTYPE *numberOfPages )( 
            IWebFramePrivate * This,
            /* [in] */ float pageWidthInPixels,
            /* [in] */ float pageHeightInPixels,
            /* [retval][out] */ int *pageNumber);
        
        HRESULT ( STDMETHODCALLTYPE *layerTreeAsText )( 
            IWebFramePrivate * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *paintScrollViewRectToContextAtPoint )( 
            IWebFramePrivate * This,
            /* [in] */ RECT rect,
            /* [in] */ POINT pt,
            /* [in] */ OLE_HANDLE deviceContext);
        
        HRESULT ( STDMETHODCALLTYPE *renderTreeAsExternalRepresentation )( 
            IWebFramePrivate * This,
            /* [in] */ BOOL forPrinting,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *suspendAnimations )( 
            IWebFramePrivate * This);
        
        HRESULT ( STDMETHODCALLTYPE *resumeAnimations )( 
            IWebFramePrivate * This);
        
        END_INTERFACE
    } IWebFramePrivateVtbl;

    interface IWebFramePrivate
    {
        CONST_VTBL struct IWebFramePrivateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebFramePrivate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebFramePrivate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebFramePrivate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebFramePrivate_unused1(This,__MIDL__IWebFramePrivate0000)	\
    ( (This)->lpVtbl -> unused1(This,__MIDL__IWebFramePrivate0000) ) 

#define IWebFramePrivate_scrollOffset(This,offset)	\
    ( (This)->lpVtbl -> scrollOffset(This,offset) ) 

#define IWebFramePrivate_layout(This)	\
    ( (This)->lpVtbl -> layout(This) ) 

#define IWebFramePrivate_firstLayoutDone(This,result)	\
    ( (This)->lpVtbl -> firstLayoutDone(This,result) ) 

#define IWebFramePrivate_loadType(This,type)	\
    ( (This)->lpVtbl -> loadType(This,type) ) 

#define IWebFramePrivate_setInPrintingMode(This,value,printDC)	\
    ( (This)->lpVtbl -> setInPrintingMode(This,value,printDC) ) 

#define IWebFramePrivate_getPrintedPageCount(This,printDC,pageCount)	\
    ( (This)->lpVtbl -> getPrintedPageCount(This,printDC,pageCount) ) 

#define IWebFramePrivate_spoolPages(This,printDC,startPage,endPage,ctx)	\
    ( (This)->lpVtbl -> spoolPages(This,printDC,startPage,endPage,ctx) ) 

#define IWebFramePrivate_isFrameSet(This,result)	\
    ( (This)->lpVtbl -> isFrameSet(This,result) ) 

#define IWebFramePrivate_string(This,result)	\
    ( (This)->lpVtbl -> string(This,result) ) 

#define IWebFramePrivate_size(This,size)	\
    ( (This)->lpVtbl -> size(This,size) ) 

#define IWebFramePrivate_hasScrollBars(This,result)	\
    ( (This)->lpVtbl -> hasScrollBars(This,result) ) 

#define IWebFramePrivate_contentBounds(This,result)	\
    ( (This)->lpVtbl -> contentBounds(This,result) ) 

#define IWebFramePrivate_frameBounds(This,result)	\
    ( (This)->lpVtbl -> frameBounds(This,result) ) 

#define IWebFramePrivate_isDescendantOfFrame(This,ancestor,result)	\
    ( (This)->lpVtbl -> isDescendantOfFrame(This,ancestor,result) ) 

#define IWebFramePrivate_pendingFrameUnloadEventCount(This,result)	\
    ( (This)->lpVtbl -> pendingFrameUnloadEventCount(This,result) ) 

#define IWebFramePrivate_fetchApplicationIcon(This,delegate,result)	\
    ( (This)->lpVtbl -> fetchApplicationIcon(This,delegate,result) ) 

#define IWebFramePrivate_paintDocumentRectToContext(This,rect,deviceContext)	\
    ( (This)->lpVtbl -> paintDocumentRectToContext(This,rect,deviceContext) ) 

#define IWebFramePrivate_elementDoesAutoComplete(This,element,result)	\
    ( (This)->lpVtbl -> elementDoesAutoComplete(This,element,result) ) 

#define IWebFramePrivate_pauseAnimation(This,animationName,node,secondsFromNow,animationWasRunning)	\
    ( (This)->lpVtbl -> pauseAnimation(This,animationName,node,secondsFromNow,animationWasRunning) ) 

#define IWebFramePrivate_pauseTransition(This,propertyName,node,secondsFromNow,transitionWasRunning)	\
    ( (This)->lpVtbl -> pauseTransition(This,propertyName,node,secondsFromNow,transitionWasRunning) ) 

#define IWebFramePrivate_numberOfActiveAnimations(This,number)	\
    ( (This)->lpVtbl -> numberOfActiveAnimations(This,number) ) 

#define IWebFramePrivate_isDisplayingStandaloneImage(This,result)	\
    ( (This)->lpVtbl -> isDisplayingStandaloneImage(This,result) ) 

#define IWebFramePrivate_allowsFollowingLink(This,url,result)	\
    ( (This)->lpVtbl -> allowsFollowingLink(This,url,result) ) 

#define IWebFramePrivate_stringByEvaluatingJavaScriptInScriptWorld(This,__MIDL__IWebFramePrivate0001,globalObject,script,result)	\
    ( (This)->lpVtbl -> stringByEvaluatingJavaScriptInScriptWorld(This,__MIDL__IWebFramePrivate0001,globalObject,script,result) ) 

#define IWebFramePrivate_globalContextForScriptWorld(This,__MIDL__IWebFramePrivate0002)	\
    ( (This)->lpVtbl -> globalContextForScriptWorld(This,__MIDL__IWebFramePrivate0002) ) 

#define IWebFramePrivate_counterValueForElementById(This,id,result)	\
    ( (This)->lpVtbl -> counterValueForElementById(This,id,result) ) 

#define IWebFramePrivate_pauseSVGAnimation(This,elementId,node,secondsFromNow,animationWasRunning)	\
    ( (This)->lpVtbl -> pauseSVGAnimation(This,elementId,node,secondsFromNow,animationWasRunning) ) 

#define IWebFramePrivate_visibleContentRect(This,__MIDL__IWebFramePrivate0003)	\
    ( (This)->lpVtbl -> visibleContentRect(This,__MIDL__IWebFramePrivate0003) ) 

#define IWebFramePrivate_pageNumberForElementById(This,id,pageWidthInPixels,pageHeightInPixels,pageNumber)	\
    ( (This)->lpVtbl -> pageNumberForElementById(This,id,pageWidthInPixels,pageHeightInPixels,pageNumber) ) 

#define IWebFramePrivate_numberOfPages(This,pageWidthInPixels,pageHeightInPixels,pageNumber)	\
    ( (This)->lpVtbl -> numberOfPages(This,pageWidthInPixels,pageHeightInPixels,pageNumber) ) 

#define IWebFramePrivate_layerTreeAsText(This,result)	\
    ( (This)->lpVtbl -> layerTreeAsText(This,result) ) 

#define IWebFramePrivate_paintScrollViewRectToContextAtPoint(This,rect,pt,deviceContext)	\
    ( (This)->lpVtbl -> paintScrollViewRectToContextAtPoint(This,rect,pt,deviceContext) ) 

#define IWebFramePrivate_renderTreeAsExternalRepresentation(This,forPrinting,result)	\
    ( (This)->lpVtbl -> renderTreeAsExternalRepresentation(This,forPrinting,result) ) 

#define IWebFramePrivate_suspendAnimations(This)	\
    ( (This)->lpVtbl -> suspendAnimations(This) ) 

#define IWebFramePrivate_resumeAnimations(This)	\
    ( (This)->lpVtbl -> resumeAnimations(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebFramePrivate_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0084 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0084_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0084_v0_0_s_ifspec;

#ifndef __IWebFrameView_INTERFACE_DEFINED__
#define __IWebFrameView_INTERFACE_DEFINED__

/* interface IWebFrameView */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebFrameView;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("E23E1B15-78F6-4e89-AD2E-49992A040A35")
    IWebFrameView : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE webFrame( 
            /* [retval][out] */ IWebFrame **frame) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE documentView( 
            /* [retval][out] */ IWebDocumentView **view) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setAllowsScrolling( 
            /* [in] */ BOOL flag) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE allowsScrolling( 
            /* [retval][out] */ BOOL *flag) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebFrameViewVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebFrameView * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebFrameView * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebFrameView * This);
        
        HRESULT ( STDMETHODCALLTYPE *webFrame )( 
            IWebFrameView * This,
            /* [retval][out] */ IWebFrame **frame);
        
        HRESULT ( STDMETHODCALLTYPE *documentView )( 
            IWebFrameView * This,
            /* [retval][out] */ IWebDocumentView **view);
        
        HRESULT ( STDMETHODCALLTYPE *setAllowsScrolling )( 
            IWebFrameView * This,
            /* [in] */ BOOL flag);
        
        HRESULT ( STDMETHODCALLTYPE *allowsScrolling )( 
            IWebFrameView * This,
            /* [retval][out] */ BOOL *flag);
        
        END_INTERFACE
    } IWebFrameViewVtbl;

    interface IWebFrameView
    {
        CONST_VTBL struct IWebFrameViewVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebFrameView_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebFrameView_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebFrameView_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebFrameView_webFrame(This,frame)	\
    ( (This)->lpVtbl -> webFrame(This,frame) ) 

#define IWebFrameView_documentView(This,view)	\
    ( (This)->lpVtbl -> documentView(This,view) ) 

#define IWebFrameView_setAllowsScrolling(This,flag)	\
    ( (This)->lpVtbl -> setAllowsScrolling(This,flag) ) 

#define IWebFrameView_allowsScrolling(This,flag)	\
    ( (This)->lpVtbl -> allowsScrolling(This,flag) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebFrameView_INTERFACE_DEFINED__ */


#ifndef __IWebGeolocationPolicyListener_INTERFACE_DEFINED__
#define __IWebGeolocationPolicyListener_INTERFACE_DEFINED__

/* interface IWebGeolocationPolicyListener */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebGeolocationPolicyListener;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1300A76E-26DF-4BED-B79F-3930D7A4202F")
    IWebGeolocationPolicyListener : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE allow( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE deny( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebGeolocationPolicyListenerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebGeolocationPolicyListener * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebGeolocationPolicyListener * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebGeolocationPolicyListener * This);
        
        HRESULT ( STDMETHODCALLTYPE *allow )( 
            IWebGeolocationPolicyListener * This);
        
        HRESULT ( STDMETHODCALLTYPE *deny )( 
            IWebGeolocationPolicyListener * This);
        
        END_INTERFACE
    } IWebGeolocationPolicyListenerVtbl;

    interface IWebGeolocationPolicyListener
    {
        CONST_VTBL struct IWebGeolocationPolicyListenerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebGeolocationPolicyListener_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebGeolocationPolicyListener_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebGeolocationPolicyListener_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebGeolocationPolicyListener_allow(This)	\
    ( (This)->lpVtbl -> allow(This) ) 

#define IWebGeolocationPolicyListener_deny(This)	\
    ( (This)->lpVtbl -> deny(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebGeolocationPolicyListener_INTERFACE_DEFINED__ */


#ifndef __IWebGeolocationPosition_INTERFACE_DEFINED__
#define __IWebGeolocationPosition_INTERFACE_DEFINED__

/* interface IWebGeolocationPosition */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebGeolocationPosition;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8C92A6B9-4CBB-4626-A596-24C1B47D7CC7")
    IWebGeolocationPosition : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE initWithTimestamp( 
            /* [in] */ double timestamp,
            /* [in] */ double latitude,
            /* [in] */ double longitude,
            /* [in] */ double accuracy) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebGeolocationPositionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebGeolocationPosition * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebGeolocationPosition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebGeolocationPosition * This);
        
        HRESULT ( STDMETHODCALLTYPE *initWithTimestamp )( 
            IWebGeolocationPosition * This,
            /* [in] */ double timestamp,
            /* [in] */ double latitude,
            /* [in] */ double longitude,
            /* [in] */ double accuracy);
        
        END_INTERFACE
    } IWebGeolocationPositionVtbl;

    interface IWebGeolocationPosition
    {
        CONST_VTBL struct IWebGeolocationPositionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebGeolocationPosition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebGeolocationPosition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebGeolocationPosition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebGeolocationPosition_initWithTimestamp(This,timestamp,latitude,longitude,accuracy)	\
    ( (This)->lpVtbl -> initWithTimestamp(This,timestamp,latitude,longitude,accuracy) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebGeolocationPosition_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0087 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0087_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0087_v0_0_s_ifspec;

#ifndef __IWebGeolocationProvider_INTERFACE_DEFINED__
#define __IWebGeolocationProvider_INTERFACE_DEFINED__

/* interface IWebGeolocationProvider */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebGeolocationProvider;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("47F4CCF6-963D-4306-BE0B-8205C94672B5")
    IWebGeolocationProvider : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE registerWebView( 
            /* [in] */ IWebView *webView) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE unregisterWebView( 
            /* [in] */ IWebView *webView) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE lastPosition( 
            /* [retval][out] */ IWebGeolocationPosition **lastPosition) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebGeolocationProviderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebGeolocationProvider * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebGeolocationProvider * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebGeolocationProvider * This);
        
        HRESULT ( STDMETHODCALLTYPE *registerWebView )( 
            IWebGeolocationProvider * This,
            /* [in] */ IWebView *webView);
        
        HRESULT ( STDMETHODCALLTYPE *unregisterWebView )( 
            IWebGeolocationProvider * This,
            /* [in] */ IWebView *webView);
        
        HRESULT ( STDMETHODCALLTYPE *lastPosition )( 
            IWebGeolocationProvider * This,
            /* [retval][out] */ IWebGeolocationPosition **lastPosition);
        
        END_INTERFACE
    } IWebGeolocationProviderVtbl;

    interface IWebGeolocationProvider
    {
        CONST_VTBL struct IWebGeolocationProviderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebGeolocationProvider_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebGeolocationProvider_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebGeolocationProvider_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebGeolocationProvider_registerWebView(This,webView)	\
    ( (This)->lpVtbl -> registerWebView(This,webView) ) 

#define IWebGeolocationProvider_unregisterWebView(This,webView)	\
    ( (This)->lpVtbl -> unregisterWebView(This,webView) ) 

#define IWebGeolocationProvider_lastPosition(This,lastPosition)	\
    ( (This)->lpVtbl -> lastPosition(This,lastPosition) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebGeolocationProvider_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0088 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0088_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0088_v0_0_s_ifspec;

#ifndef __IWebHTMLRepresentation_INTERFACE_DEFINED__
#define __IWebHTMLRepresentation_INTERFACE_DEFINED__

/* interface IWebHTMLRepresentation */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebHTMLRepresentation;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("E043542A-9545-4de3-8DF0-794FD6811CB1")
    IWebHTMLRepresentation : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE supportedMIMETypes( 
            /* [out][in] */ BSTR *types,
            /* [out][in] */ int *cTypes) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE supportedNonImageMIMETypes( 
            /* [out][in] */ BSTR *types,
            /* [out][in] */ int *cTypes) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE supportedImageMIMETypes( 
            /* [out][in] */ BSTR *types,
            /* [out][in] */ int *cTypes) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE attributedStringFromDOMNodes( 
            /* [in] */ IDOMNode *startNode,
            /* [in] */ int startOffset,
            /* [in] */ IDOMNode *endNode,
            /* [in] */ int endOffset,
            /* [retval][out] */ IDataObject **attributedString) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE elementWithName( 
            /* [in] */ BSTR name,
            /* [in] */ IDOMElement *form,
            /* [retval][out] */ IDOMElement **element) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE elementDoesAutoComplete( 
            /* [in] */ IDOMElement *element,
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE elementIsPassword( 
            /* [in] */ IDOMElement *element,
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE formForElement( 
            /* [in] */ IDOMElement *element,
            /* [retval][out] */ IDOMElement **form) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE currentForm( 
            /* [retval][out] */ IDOMElement **form) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE controlsInForm( 
            /* [in] */ IDOMElement *form,
            /* [out][in] */ IDOMElement **controls,
            /* [out][in] */ int *cControls) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE deprecatedSearchForLabels( 
            /* [size_is][in] */ BSTR *labels,
            /* [in] */ int cLabels,
            /* [in] */ IDOMElement *beforeElement,
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE matchLabels( 
            /* [size_is][in] */ BSTR *labels,
            /* [in] */ int cLabels,
            /* [in] */ IDOMElement *againstElement,
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE searchForLabels( 
            /* [size_is][in] */ BSTR *labels,
            /* [in] */ unsigned int cLabels,
            /* [in] */ IDOMElement *beforeElement,
            /* [out] */ unsigned int *resultDistance,
            /* [out] */ BOOL *resultIsInCellAbove,
            /* [retval][out] */ BSTR *result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebHTMLRepresentationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebHTMLRepresentation * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebHTMLRepresentation * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebHTMLRepresentation * This);
        
        HRESULT ( STDMETHODCALLTYPE *supportedMIMETypes )( 
            IWebHTMLRepresentation * This,
            /* [out][in] */ BSTR *types,
            /* [out][in] */ int *cTypes);
        
        HRESULT ( STDMETHODCALLTYPE *supportedNonImageMIMETypes )( 
            IWebHTMLRepresentation * This,
            /* [out][in] */ BSTR *types,
            /* [out][in] */ int *cTypes);
        
        HRESULT ( STDMETHODCALLTYPE *supportedImageMIMETypes )( 
            IWebHTMLRepresentation * This,
            /* [out][in] */ BSTR *types,
            /* [out][in] */ int *cTypes);
        
        HRESULT ( STDMETHODCALLTYPE *attributedStringFromDOMNodes )( 
            IWebHTMLRepresentation * This,
            /* [in] */ IDOMNode *startNode,
            /* [in] */ int startOffset,
            /* [in] */ IDOMNode *endNode,
            /* [in] */ int endOffset,
            /* [retval][out] */ IDataObject **attributedString);
        
        HRESULT ( STDMETHODCALLTYPE *elementWithName )( 
            IWebHTMLRepresentation * This,
            /* [in] */ BSTR name,
            /* [in] */ IDOMElement *form,
            /* [retval][out] */ IDOMElement **element);
        
        HRESULT ( STDMETHODCALLTYPE *elementDoesAutoComplete )( 
            IWebHTMLRepresentation * This,
            /* [in] */ IDOMElement *element,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *elementIsPassword )( 
            IWebHTMLRepresentation * This,
            /* [in] */ IDOMElement *element,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *formForElement )( 
            IWebHTMLRepresentation * This,
            /* [in] */ IDOMElement *element,
            /* [retval][out] */ IDOMElement **form);
        
        HRESULT ( STDMETHODCALLTYPE *currentForm )( 
            IWebHTMLRepresentation * This,
            /* [retval][out] */ IDOMElement **form);
        
        HRESULT ( STDMETHODCALLTYPE *controlsInForm )( 
            IWebHTMLRepresentation * This,
            /* [in] */ IDOMElement *form,
            /* [out][in] */ IDOMElement **controls,
            /* [out][in] */ int *cControls);
        
        HRESULT ( STDMETHODCALLTYPE *deprecatedSearchForLabels )( 
            IWebHTMLRepresentation * This,
            /* [size_is][in] */ BSTR *labels,
            /* [in] */ int cLabels,
            /* [in] */ IDOMElement *beforeElement,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *matchLabels )( 
            IWebHTMLRepresentation * This,
            /* [size_is][in] */ BSTR *labels,
            /* [in] */ int cLabels,
            /* [in] */ IDOMElement *againstElement,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *searchForLabels )( 
            IWebHTMLRepresentation * This,
            /* [size_is][in] */ BSTR *labels,
            /* [in] */ unsigned int cLabels,
            /* [in] */ IDOMElement *beforeElement,
            /* [out] */ unsigned int *resultDistance,
            /* [out] */ BOOL *resultIsInCellAbove,
            /* [retval][out] */ BSTR *result);
        
        END_INTERFACE
    } IWebHTMLRepresentationVtbl;

    interface IWebHTMLRepresentation
    {
        CONST_VTBL struct IWebHTMLRepresentationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebHTMLRepresentation_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebHTMLRepresentation_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebHTMLRepresentation_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebHTMLRepresentation_supportedMIMETypes(This,types,cTypes)	\
    ( (This)->lpVtbl -> supportedMIMETypes(This,types,cTypes) ) 

#define IWebHTMLRepresentation_supportedNonImageMIMETypes(This,types,cTypes)	\
    ( (This)->lpVtbl -> supportedNonImageMIMETypes(This,types,cTypes) ) 

#define IWebHTMLRepresentation_supportedImageMIMETypes(This,types,cTypes)	\
    ( (This)->lpVtbl -> supportedImageMIMETypes(This,types,cTypes) ) 

#define IWebHTMLRepresentation_attributedStringFromDOMNodes(This,startNode,startOffset,endNode,endOffset,attributedString)	\
    ( (This)->lpVtbl -> attributedStringFromDOMNodes(This,startNode,startOffset,endNode,endOffset,attributedString) ) 

#define IWebHTMLRepresentation_elementWithName(This,name,form,element)	\
    ( (This)->lpVtbl -> elementWithName(This,name,form,element) ) 

#define IWebHTMLRepresentation_elementDoesAutoComplete(This,element,result)	\
    ( (This)->lpVtbl -> elementDoesAutoComplete(This,element,result) ) 

#define IWebHTMLRepresentation_elementIsPassword(This,element,result)	\
    ( (This)->lpVtbl -> elementIsPassword(This,element,result) ) 

#define IWebHTMLRepresentation_formForElement(This,element,form)	\
    ( (This)->lpVtbl -> formForElement(This,element,form) ) 

#define IWebHTMLRepresentation_currentForm(This,form)	\
    ( (This)->lpVtbl -> currentForm(This,form) ) 

#define IWebHTMLRepresentation_controlsInForm(This,form,controls,cControls)	\
    ( (This)->lpVtbl -> controlsInForm(This,form,controls,cControls) ) 

#define IWebHTMLRepresentation_deprecatedSearchForLabels(This,labels,cLabels,beforeElement,result)	\
    ( (This)->lpVtbl -> deprecatedSearchForLabels(This,labels,cLabels,beforeElement,result) ) 

#define IWebHTMLRepresentation_matchLabels(This,labels,cLabels,againstElement,result)	\
    ( (This)->lpVtbl -> matchLabels(This,labels,cLabels,againstElement,result) ) 

#define IWebHTMLRepresentation_searchForLabels(This,labels,cLabels,beforeElement,resultDistance,resultIsInCellAbove,result)	\
    ( (This)->lpVtbl -> searchForLabels(This,labels,cLabels,beforeElement,resultDistance,resultIsInCellAbove,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebHTMLRepresentation_INTERFACE_DEFINED__ */


#ifndef __IWebURLResponse_INTERFACE_DEFINED__
#define __IWebURLResponse_INTERFACE_DEFINED__

/* interface IWebURLResponse */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebURLResponse;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9814930B-E037-4477-8DF1-4D898B648995")
    IWebURLResponse : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE expectedContentLength( 
            /* [retval][out] */ long long *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE initWithURL( 
            /* [in] */ BSTR url,
            /* [in] */ BSTR mimeType,
            /* [in] */ int expectedContentLength,
            /* [in] */ BSTR textEncodingName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MIMEType( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE suggestedFilename( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE textEncodingName( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE URL( 
            /* [retval][out] */ BSTR *result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebURLResponseVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebURLResponse * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebURLResponse * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebURLResponse * This);
        
        HRESULT ( STDMETHODCALLTYPE *expectedContentLength )( 
            IWebURLResponse * This,
            /* [retval][out] */ long long *result);
        
        HRESULT ( STDMETHODCALLTYPE *initWithURL )( 
            IWebURLResponse * This,
            /* [in] */ BSTR url,
            /* [in] */ BSTR mimeType,
            /* [in] */ int expectedContentLength,
            /* [in] */ BSTR textEncodingName);
        
        HRESULT ( STDMETHODCALLTYPE *MIMEType )( 
            IWebURLResponse * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *suggestedFilename )( 
            IWebURLResponse * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *textEncodingName )( 
            IWebURLResponse * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *URL )( 
            IWebURLResponse * This,
            /* [retval][out] */ BSTR *result);
        
        END_INTERFACE
    } IWebURLResponseVtbl;

    interface IWebURLResponse
    {
        CONST_VTBL struct IWebURLResponseVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebURLResponse_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebURLResponse_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebURLResponse_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebURLResponse_expectedContentLength(This,result)	\
    ( (This)->lpVtbl -> expectedContentLength(This,result) ) 

#define IWebURLResponse_initWithURL(This,url,mimeType,expectedContentLength,textEncodingName)	\
    ( (This)->lpVtbl -> initWithURL(This,url,mimeType,expectedContentLength,textEncodingName) ) 

#define IWebURLResponse_MIMEType(This,result)	\
    ( (This)->lpVtbl -> MIMEType(This,result) ) 

#define IWebURLResponse_suggestedFilename(This,result)	\
    ( (This)->lpVtbl -> suggestedFilename(This,result) ) 

#define IWebURLResponse_textEncodingName(This,result)	\
    ( (This)->lpVtbl -> textEncodingName(This,result) ) 

#define IWebURLResponse_URL(This,result)	\
    ( (This)->lpVtbl -> URL(This,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebURLResponse_INTERFACE_DEFINED__ */


#ifndef __IWebHTTPURLResponse_INTERFACE_DEFINED__
#define __IWebHTTPURLResponse_INTERFACE_DEFINED__

/* interface IWebHTTPURLResponse */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebHTTPURLResponse;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("56B54483-FA29-4ce5-96FA-2D9B81D57162")
    IWebHTTPURLResponse : public IWebURLResponse
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE allHeaderFields( 
            /* [retval][out] */ IPropertyBag **headerFields) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE localizedStringForStatusCode( 
            /* [in] */ int statusCode,
            /* [retval][out] */ BSTR *statusString) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE statusCode( 
            /* [retval][out] */ int *statusCode) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isAttachment( 
            /* [retval][out] */ BOOL *attachment) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebHTTPURLResponseVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebHTTPURLResponse * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebHTTPURLResponse * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebHTTPURLResponse * This);
        
        HRESULT ( STDMETHODCALLTYPE *expectedContentLength )( 
            IWebHTTPURLResponse * This,
            /* [retval][out] */ long long *result);
        
        HRESULT ( STDMETHODCALLTYPE *initWithURL )( 
            IWebHTTPURLResponse * This,
            /* [in] */ BSTR url,
            /* [in] */ BSTR mimeType,
            /* [in] */ int expectedContentLength,
            /* [in] */ BSTR textEncodingName);
        
        HRESULT ( STDMETHODCALLTYPE *MIMEType )( 
            IWebHTTPURLResponse * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *suggestedFilename )( 
            IWebHTTPURLResponse * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *textEncodingName )( 
            IWebHTTPURLResponse * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *URL )( 
            IWebHTTPURLResponse * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *allHeaderFields )( 
            IWebHTTPURLResponse * This,
            /* [retval][out] */ IPropertyBag **headerFields);
        
        HRESULT ( STDMETHODCALLTYPE *localizedStringForStatusCode )( 
            IWebHTTPURLResponse * This,
            /* [in] */ int statusCode,
            /* [retval][out] */ BSTR *statusString);
        
        HRESULT ( STDMETHODCALLTYPE *statusCode )( 
            IWebHTTPURLResponse * This,
            /* [retval][out] */ int *statusCode);
        
        HRESULT ( STDMETHODCALLTYPE *isAttachment )( 
            IWebHTTPURLResponse * This,
            /* [retval][out] */ BOOL *attachment);
        
        END_INTERFACE
    } IWebHTTPURLResponseVtbl;

    interface IWebHTTPURLResponse
    {
        CONST_VTBL struct IWebHTTPURLResponseVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebHTTPURLResponse_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebHTTPURLResponse_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebHTTPURLResponse_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebHTTPURLResponse_expectedContentLength(This,result)	\
    ( (This)->lpVtbl -> expectedContentLength(This,result) ) 

#define IWebHTTPURLResponse_initWithURL(This,url,mimeType,expectedContentLength,textEncodingName)	\
    ( (This)->lpVtbl -> initWithURL(This,url,mimeType,expectedContentLength,textEncodingName) ) 

#define IWebHTTPURLResponse_MIMEType(This,result)	\
    ( (This)->lpVtbl -> MIMEType(This,result) ) 

#define IWebHTTPURLResponse_suggestedFilename(This,result)	\
    ( (This)->lpVtbl -> suggestedFilename(This,result) ) 

#define IWebHTTPURLResponse_textEncodingName(This,result)	\
    ( (This)->lpVtbl -> textEncodingName(This,result) ) 

#define IWebHTTPURLResponse_URL(This,result)	\
    ( (This)->lpVtbl -> URL(This,result) ) 


#define IWebHTTPURLResponse_allHeaderFields(This,headerFields)	\
    ( (This)->lpVtbl -> allHeaderFields(This,headerFields) ) 

#define IWebHTTPURLResponse_localizedStringForStatusCode(This,statusCode,statusString)	\
    ( (This)->lpVtbl -> localizedStringForStatusCode(This,statusCode,statusString) ) 

#define IWebHTTPURLResponse_statusCode(This,statusCode)	\
    ( (This)->lpVtbl -> statusCode(This,statusCode) ) 

#define IWebHTTPURLResponse_isAttachment(This,attachment)	\
    ( (This)->lpVtbl -> isAttachment(This,attachment) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebHTTPURLResponse_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0090 */
/* [local] */ 

#define WebHistoryItemsAddedNotification TEXT("WebHistoryItemsAddedNotification")
#define WebHistoryItemsRemovedNotification TEXT("WebHistoryItemsRemovedNotification")
#define WebHistoryAllItemsRemovedNotification TEXT("WebHistoryAllItemsRemovedNotification")
#define WebHistoryLoadedNotification TEXT("WebHistoryLoadedNotification")
#define WebHistoryItemsDiscardedWhileLoadingNotification TEXT("WebHistoryItemsDiscardedWhileLoadingNotification")
#define WebHistorySavedNotification TEXT("WebHistorySavedNotification")




extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0090_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0090_v0_0_s_ifspec;

#ifndef __IWebHistory_INTERFACE_DEFINED__
#define __IWebHistory_INTERFACE_DEFINED__

/* interface IWebHistory */
/* [unique][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IWebHistory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F34E4B1A-361D-4b9f-9A3F-D869DCD97F9A")
    IWebHistory : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE optionalSharedHistory( 
            /* [retval][out] */ IWebHistory **history) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setOptionalSharedHistory( 
            /* [in] */ IWebHistory *history) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE loadFromURL( 
            /* [in] */ BSTR url,
            /* [out] */ IWebError **error,
            /* [retval][out] */ BOOL *succeeded) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE saveToURL( 
            /* [in] */ BSTR url,
            /* [out] */ IWebError **error,
            /* [retval][out] */ BOOL *succeeded) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE addItems( 
            /* [in] */ int itemCount,
            /* [in] */ IWebHistoryItem **items) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE removeItems( 
            /* [in] */ int itemCount,
            /* [in] */ IWebHistoryItem **items) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE removeAllItems( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE orderedLastVisitedDays( 
            /* [out][in] */ int *count,
            /* [in] */ DATE *calendarDates) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE orderedItemsLastVisitedOnDay( 
            /* [out][in] */ int *count,
            /* [in] */ IWebHistoryItem **items,
            /* [in] */ DATE calendarDate) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE itemForURL( 
            /* [in] */ BSTR url,
            /* [retval][out] */ IWebHistoryItem **item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setHistoryItemLimit( 
            /* [in] */ int limit) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE historyItemLimit( 
            /* [retval][out] */ int *limit) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setHistoryAgeInDaysLimit( 
            /* [in] */ int limit) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE historyAgeInDaysLimit( 
            /* [retval][out] */ int *limit) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebHistoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebHistory * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebHistory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebHistory * This);
        
        HRESULT ( STDMETHODCALLTYPE *optionalSharedHistory )( 
            IWebHistory * This,
            /* [retval][out] */ IWebHistory **history);
        
        HRESULT ( STDMETHODCALLTYPE *setOptionalSharedHistory )( 
            IWebHistory * This,
            /* [in] */ IWebHistory *history);
        
        HRESULT ( STDMETHODCALLTYPE *loadFromURL )( 
            IWebHistory * This,
            /* [in] */ BSTR url,
            /* [out] */ IWebError **error,
            /* [retval][out] */ BOOL *succeeded);
        
        HRESULT ( STDMETHODCALLTYPE *saveToURL )( 
            IWebHistory * This,
            /* [in] */ BSTR url,
            /* [out] */ IWebError **error,
            /* [retval][out] */ BOOL *succeeded);
        
        HRESULT ( STDMETHODCALLTYPE *addItems )( 
            IWebHistory * This,
            /* [in] */ int itemCount,
            /* [in] */ IWebHistoryItem **items);
        
        HRESULT ( STDMETHODCALLTYPE *removeItems )( 
            IWebHistory * This,
            /* [in] */ int itemCount,
            /* [in] */ IWebHistoryItem **items);
        
        HRESULT ( STDMETHODCALLTYPE *removeAllItems )( 
            IWebHistory * This);
        
        HRESULT ( STDMETHODCALLTYPE *orderedLastVisitedDays )( 
            IWebHistory * This,
            /* [out][in] */ int *count,
            /* [in] */ DATE *calendarDates);
        
        HRESULT ( STDMETHODCALLTYPE *orderedItemsLastVisitedOnDay )( 
            IWebHistory * This,
            /* [out][in] */ int *count,
            /* [in] */ IWebHistoryItem **items,
            /* [in] */ DATE calendarDate);
        
        HRESULT ( STDMETHODCALLTYPE *itemForURL )( 
            IWebHistory * This,
            /* [in] */ BSTR url,
            /* [retval][out] */ IWebHistoryItem **item);
        
        HRESULT ( STDMETHODCALLTYPE *setHistoryItemLimit )( 
            IWebHistory * This,
            /* [in] */ int limit);
        
        HRESULT ( STDMETHODCALLTYPE *historyItemLimit )( 
            IWebHistory * This,
            /* [retval][out] */ int *limit);
        
        HRESULT ( STDMETHODCALLTYPE *setHistoryAgeInDaysLimit )( 
            IWebHistory * This,
            /* [in] */ int limit);
        
        HRESULT ( STDMETHODCALLTYPE *historyAgeInDaysLimit )( 
            IWebHistory * This,
            /* [retval][out] */ int *limit);
        
        END_INTERFACE
    } IWebHistoryVtbl;

    interface IWebHistory
    {
        CONST_VTBL struct IWebHistoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebHistory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebHistory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebHistory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebHistory_optionalSharedHistory(This,history)	\
    ( (This)->lpVtbl -> optionalSharedHistory(This,history) ) 

#define IWebHistory_setOptionalSharedHistory(This,history)	\
    ( (This)->lpVtbl -> setOptionalSharedHistory(This,history) ) 

#define IWebHistory_loadFromURL(This,url,error,succeeded)	\
    ( (This)->lpVtbl -> loadFromURL(This,url,error,succeeded) ) 

#define IWebHistory_saveToURL(This,url,error,succeeded)	\
    ( (This)->lpVtbl -> saveToURL(This,url,error,succeeded) ) 

#define IWebHistory_addItems(This,itemCount,items)	\
    ( (This)->lpVtbl -> addItems(This,itemCount,items) ) 

#define IWebHistory_removeItems(This,itemCount,items)	\
    ( (This)->lpVtbl -> removeItems(This,itemCount,items) ) 

#define IWebHistory_removeAllItems(This)	\
    ( (This)->lpVtbl -> removeAllItems(This) ) 

#define IWebHistory_orderedLastVisitedDays(This,count,calendarDates)	\
    ( (This)->lpVtbl -> orderedLastVisitedDays(This,count,calendarDates) ) 

#define IWebHistory_orderedItemsLastVisitedOnDay(This,count,items,calendarDate)	\
    ( (This)->lpVtbl -> orderedItemsLastVisitedOnDay(This,count,items,calendarDate) ) 

#define IWebHistory_itemForURL(This,url,item)	\
    ( (This)->lpVtbl -> itemForURL(This,url,item) ) 

#define IWebHistory_setHistoryItemLimit(This,limit)	\
    ( (This)->lpVtbl -> setHistoryItemLimit(This,limit) ) 

#define IWebHistory_historyItemLimit(This,limit)	\
    ( (This)->lpVtbl -> historyItemLimit(This,limit) ) 

#define IWebHistory_setHistoryAgeInDaysLimit(This,limit)	\
    ( (This)->lpVtbl -> setHistoryAgeInDaysLimit(This,limit) ) 

#define IWebHistory_historyAgeInDaysLimit(This,limit)	\
    ( (This)->lpVtbl -> historyAgeInDaysLimit(This,limit) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebHistory_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0091 */
/* [local] */ 






extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0091_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0091_v0_0_s_ifspec;

#ifndef __IWebHistoryDelegate_INTERFACE_DEFINED__
#define __IWebHistoryDelegate_INTERFACE_DEFINED__

/* interface IWebHistoryDelegate */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebHistoryDelegate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("16AF211F-7C00-4f7f-A8DB-B1219FEABF3B")
    IWebHistoryDelegate : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE didNavigateWithNavigationData( 
            /* [in] */ IWebView *webView,
            /* [in] */ IWebNavigationData *navigationData,
            /* [in] */ IWebFrame *webFrame) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE didPerformClientRedirectFromURL( 
            /* [in] */ IWebView *webView,
            /* [in] */ BSTR sourceURL,
            /* [in] */ BSTR destinationURL,
            /* [in] */ IWebFrame *webFrame) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE didPerformServerRedirectFromURL( 
            /* [in] */ IWebView *webView,
            /* [in] */ BSTR sourceURL,
            /* [in] */ BSTR destinationURL,
            /* [in] */ IWebFrame *webFrame) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE updateHistoryTitle( 
            /* [in] */ IWebView *webView,
            /* [in] */ BSTR title,
            /* [in] */ BSTR url) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE populateVisitedLinksForWebView( 
            /* [in] */ IWebView *webView) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebHistoryDelegateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebHistoryDelegate * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebHistoryDelegate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebHistoryDelegate * This);
        
        HRESULT ( STDMETHODCALLTYPE *didNavigateWithNavigationData )( 
            IWebHistoryDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ IWebNavigationData *navigationData,
            /* [in] */ IWebFrame *webFrame);
        
        HRESULT ( STDMETHODCALLTYPE *didPerformClientRedirectFromURL )( 
            IWebHistoryDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ BSTR sourceURL,
            /* [in] */ BSTR destinationURL,
            /* [in] */ IWebFrame *webFrame);
        
        HRESULT ( STDMETHODCALLTYPE *didPerformServerRedirectFromURL )( 
            IWebHistoryDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ BSTR sourceURL,
            /* [in] */ BSTR destinationURL,
            /* [in] */ IWebFrame *webFrame);
        
        HRESULT ( STDMETHODCALLTYPE *updateHistoryTitle )( 
            IWebHistoryDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ BSTR title,
            /* [in] */ BSTR url);
        
        HRESULT ( STDMETHODCALLTYPE *populateVisitedLinksForWebView )( 
            IWebHistoryDelegate * This,
            /* [in] */ IWebView *webView);
        
        END_INTERFACE
    } IWebHistoryDelegateVtbl;

    interface IWebHistoryDelegate
    {
        CONST_VTBL struct IWebHistoryDelegateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebHistoryDelegate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebHistoryDelegate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebHistoryDelegate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebHistoryDelegate_didNavigateWithNavigationData(This,webView,navigationData,webFrame)	\
    ( (This)->lpVtbl -> didNavigateWithNavigationData(This,webView,navigationData,webFrame) ) 

#define IWebHistoryDelegate_didPerformClientRedirectFromURL(This,webView,sourceURL,destinationURL,webFrame)	\
    ( (This)->lpVtbl -> didPerformClientRedirectFromURL(This,webView,sourceURL,destinationURL,webFrame) ) 

#define IWebHistoryDelegate_didPerformServerRedirectFromURL(This,webView,sourceURL,destinationURL,webFrame)	\
    ( (This)->lpVtbl -> didPerformServerRedirectFromURL(This,webView,sourceURL,destinationURL,webFrame) ) 

#define IWebHistoryDelegate_updateHistoryTitle(This,webView,title,url)	\
    ( (This)->lpVtbl -> updateHistoryTitle(This,webView,title,url) ) 

#define IWebHistoryDelegate_populateVisitedLinksForWebView(This,webView)	\
    ( (This)->lpVtbl -> populateVisitedLinksForWebView(This,webView) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebHistoryDelegate_INTERFACE_DEFINED__ */


#ifndef __IWebHistoryItem_INTERFACE_DEFINED__
#define __IWebHistoryItem_INTERFACE_DEFINED__

/* interface IWebHistoryItem */
/* [unique][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IWebHistoryItem;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1E2970AE-72B7-4500-A7A0-12B0FFEB91FC")
    IWebHistoryItem : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE initWithURLString( 
            /* [in] */ BSTR urlString,
            /* [in] */ BSTR title,
            /* [in] */ DATE lastVisited) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE originalURLString( 
            /* [retval][out] */ BSTR *url) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE URLString( 
            /* [retval][out] */ BSTR *url) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE title( 
            /* [retval][out] */ BSTR *pageTitle) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE lastVisitedTimeInterval( 
            /* [retval][out] */ DATE *lastVisited) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setAlternateTitle( 
            /* [in] */ BSTR title) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE alternateTitle( 
            /* [retval][out] */ BSTR *title) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE icon( 
            /* [retval][out] */ OLE_HANDLE *hBitmap) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebHistoryItemVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebHistoryItem * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebHistoryItem * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebHistoryItem * This);
        
        HRESULT ( STDMETHODCALLTYPE *initWithURLString )( 
            IWebHistoryItem * This,
            /* [in] */ BSTR urlString,
            /* [in] */ BSTR title,
            /* [in] */ DATE lastVisited);
        
        HRESULT ( STDMETHODCALLTYPE *originalURLString )( 
            IWebHistoryItem * This,
            /* [retval][out] */ BSTR *url);
        
        HRESULT ( STDMETHODCALLTYPE *URLString )( 
            IWebHistoryItem * This,
            /* [retval][out] */ BSTR *url);
        
        HRESULT ( STDMETHODCALLTYPE *title )( 
            IWebHistoryItem * This,
            /* [retval][out] */ BSTR *pageTitle);
        
        HRESULT ( STDMETHODCALLTYPE *lastVisitedTimeInterval )( 
            IWebHistoryItem * This,
            /* [retval][out] */ DATE *lastVisited);
        
        HRESULT ( STDMETHODCALLTYPE *setAlternateTitle )( 
            IWebHistoryItem * This,
            /* [in] */ BSTR title);
        
        HRESULT ( STDMETHODCALLTYPE *alternateTitle )( 
            IWebHistoryItem * This,
            /* [retval][out] */ BSTR *title);
        
        HRESULT ( STDMETHODCALLTYPE *icon )( 
            IWebHistoryItem * This,
            /* [retval][out] */ OLE_HANDLE *hBitmap);
        
        END_INTERFACE
    } IWebHistoryItemVtbl;

    interface IWebHistoryItem
    {
        CONST_VTBL struct IWebHistoryItemVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebHistoryItem_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebHistoryItem_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebHistoryItem_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebHistoryItem_initWithURLString(This,urlString,title,lastVisited)	\
    ( (This)->lpVtbl -> initWithURLString(This,urlString,title,lastVisited) ) 

#define IWebHistoryItem_originalURLString(This,url)	\
    ( (This)->lpVtbl -> originalURLString(This,url) ) 

#define IWebHistoryItem_URLString(This,url)	\
    ( (This)->lpVtbl -> URLString(This,url) ) 

#define IWebHistoryItem_title(This,pageTitle)	\
    ( (This)->lpVtbl -> title(This,pageTitle) ) 

#define IWebHistoryItem_lastVisitedTimeInterval(This,lastVisited)	\
    ( (This)->lpVtbl -> lastVisitedTimeInterval(This,lastVisited) ) 

#define IWebHistoryItem_setAlternateTitle(This,title)	\
    ( (This)->lpVtbl -> setAlternateTitle(This,title) ) 

#define IWebHistoryItem_alternateTitle(This,title)	\
    ( (This)->lpVtbl -> alternateTitle(This,title) ) 

#define IWebHistoryItem_icon(This,hBitmap)	\
    ( (This)->lpVtbl -> icon(This,hBitmap) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebHistoryItem_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0093 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0093_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0093_v0_0_s_ifspec;

#ifndef __IWebHistoryItemPrivate_INTERFACE_DEFINED__
#define __IWebHistoryItemPrivate_INTERFACE_DEFINED__

/* interface IWebHistoryItemPrivate */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebHistoryItemPrivate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("E9D5DC2C-192F-4795-B0EC-4E770E539D97")
    IWebHistoryItemPrivate : public IUnknown
    {
    public:
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE initFromDictionaryRepresentation( 
            /* [in] */ void *dictionary) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE dictionaryRepresentation( 
            /* [retval][out] */ void **dictionary) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE visitCount( 
            /* [retval][out] */ int *count) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setVisitCount( 
            /* [in] */ int count) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE hasURLString( 
            /* [retval][out] */ BOOL *hasURL) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE mergeAutoCompleteHints( 
            /* [in] */ IWebHistoryItem *otherItem) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setLastVisitedTimeInterval( 
            /* [in] */ DATE time) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setTitle( 
            /* [in] */ BSTR title) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RSSFeedReferrer( 
            /* [retval][out] */ BSTR *url) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setRSSFeedReferrer( 
            /* [in] */ BSTR url) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE hasPageCache( 
            /* [retval][out] */ BOOL *hasCache) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setHasPageCache( 
            /* [in] */ BOOL hasCache) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE target( 
            /* [retval][out] */ BSTR *target) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isTargetItem( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE children( 
            /* [out] */ unsigned int *childCount,
            /* [retval][out] */ SAFEARRAY **children) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE lastVisitWasFailure( 
            /* [retval][out] */ BOOL *wasFailure) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setLastVisitWasFailure( 
            /* [in] */ BOOL wasFailure) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE lastVisitWasHTTPNonGet( 
            /* [retval][out] */ BOOL *HTTPNonGet) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setLastVisitWasHTTPNonGet( 
            /* [in] */ BOOL wasHTTPNonGet) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE redirectURLs( 
            /* [retval][out] */ IEnumVARIANT **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE visitedWithTitle( 
            /* [in] */ BSTR title,
            /* [in] */ BOOL increaseVisitCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getDailyVisitCounts( 
            /* [out] */ int *number,
            /* [retval][out] */ int **counts) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getWeeklyVisitCounts( 
            /* [out] */ int *number,
            /* [retval][out] */ int **counts) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE recordInitialVisit( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebHistoryItemPrivateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebHistoryItemPrivate * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebHistoryItemPrivate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebHistoryItemPrivate * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *initFromDictionaryRepresentation )( 
            IWebHistoryItemPrivate * This,
            /* [in] */ void *dictionary);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *dictionaryRepresentation )( 
            IWebHistoryItemPrivate * This,
            /* [retval][out] */ void **dictionary);
        
        HRESULT ( STDMETHODCALLTYPE *visitCount )( 
            IWebHistoryItemPrivate * This,
            /* [retval][out] */ int *count);
        
        HRESULT ( STDMETHODCALLTYPE *setVisitCount )( 
            IWebHistoryItemPrivate * This,
            /* [in] */ int count);
        
        HRESULT ( STDMETHODCALLTYPE *hasURLString )( 
            IWebHistoryItemPrivate * This,
            /* [retval][out] */ BOOL *hasURL);
        
        HRESULT ( STDMETHODCALLTYPE *mergeAutoCompleteHints )( 
            IWebHistoryItemPrivate * This,
            /* [in] */ IWebHistoryItem *otherItem);
        
        HRESULT ( STDMETHODCALLTYPE *setLastVisitedTimeInterval )( 
            IWebHistoryItemPrivate * This,
            /* [in] */ DATE time);
        
        HRESULT ( STDMETHODCALLTYPE *setTitle )( 
            IWebHistoryItemPrivate * This,
            /* [in] */ BSTR title);
        
        HRESULT ( STDMETHODCALLTYPE *RSSFeedReferrer )( 
            IWebHistoryItemPrivate * This,
            /* [retval][out] */ BSTR *url);
        
        HRESULT ( STDMETHODCALLTYPE *setRSSFeedReferrer )( 
            IWebHistoryItemPrivate * This,
            /* [in] */ BSTR url);
        
        HRESULT ( STDMETHODCALLTYPE *hasPageCache )( 
            IWebHistoryItemPrivate * This,
            /* [retval][out] */ BOOL *hasCache);
        
        HRESULT ( STDMETHODCALLTYPE *setHasPageCache )( 
            IWebHistoryItemPrivate * This,
            /* [in] */ BOOL hasCache);
        
        HRESULT ( STDMETHODCALLTYPE *target )( 
            IWebHistoryItemPrivate * This,
            /* [retval][out] */ BSTR *target);
        
        HRESULT ( STDMETHODCALLTYPE *isTargetItem )( 
            IWebHistoryItemPrivate * This,
            /* [retval][out] */ BOOL *result);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *children )( 
            IWebHistoryItemPrivate * This,
            /* [out] */ unsigned int *childCount,
            /* [retval][out] */ SAFEARRAY **children);
        
        HRESULT ( STDMETHODCALLTYPE *lastVisitWasFailure )( 
            IWebHistoryItemPrivate * This,
            /* [retval][out] */ BOOL *wasFailure);
        
        HRESULT ( STDMETHODCALLTYPE *setLastVisitWasFailure )( 
            IWebHistoryItemPrivate * This,
            /* [in] */ BOOL wasFailure);
        
        HRESULT ( STDMETHODCALLTYPE *lastVisitWasHTTPNonGet )( 
            IWebHistoryItemPrivate * This,
            /* [retval][out] */ BOOL *HTTPNonGet);
        
        HRESULT ( STDMETHODCALLTYPE *setLastVisitWasHTTPNonGet )( 
            IWebHistoryItemPrivate * This,
            /* [in] */ BOOL wasHTTPNonGet);
        
        HRESULT ( STDMETHODCALLTYPE *redirectURLs )( 
            IWebHistoryItemPrivate * This,
            /* [retval][out] */ IEnumVARIANT **result);
        
        HRESULT ( STDMETHODCALLTYPE *visitedWithTitle )( 
            IWebHistoryItemPrivate * This,
            /* [in] */ BSTR title,
            /* [in] */ BOOL increaseVisitCount);
        
        HRESULT ( STDMETHODCALLTYPE *getDailyVisitCounts )( 
            IWebHistoryItemPrivate * This,
            /* [out] */ int *number,
            /* [retval][out] */ int **counts);
        
        HRESULT ( STDMETHODCALLTYPE *getWeeklyVisitCounts )( 
            IWebHistoryItemPrivate * This,
            /* [out] */ int *number,
            /* [retval][out] */ int **counts);
        
        HRESULT ( STDMETHODCALLTYPE *recordInitialVisit )( 
            IWebHistoryItemPrivate * This);
        
        END_INTERFACE
    } IWebHistoryItemPrivateVtbl;

    interface IWebHistoryItemPrivate
    {
        CONST_VTBL struct IWebHistoryItemPrivateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebHistoryItemPrivate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebHistoryItemPrivate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebHistoryItemPrivate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebHistoryItemPrivate_initFromDictionaryRepresentation(This,dictionary)	\
    ( (This)->lpVtbl -> initFromDictionaryRepresentation(This,dictionary) ) 

#define IWebHistoryItemPrivate_dictionaryRepresentation(This,dictionary)	\
    ( (This)->lpVtbl -> dictionaryRepresentation(This,dictionary) ) 

#define IWebHistoryItemPrivate_visitCount(This,count)	\
    ( (This)->lpVtbl -> visitCount(This,count) ) 

#define IWebHistoryItemPrivate_setVisitCount(This,count)	\
    ( (This)->lpVtbl -> setVisitCount(This,count) ) 

#define IWebHistoryItemPrivate_hasURLString(This,hasURL)	\
    ( (This)->lpVtbl -> hasURLString(This,hasURL) ) 

#define IWebHistoryItemPrivate_mergeAutoCompleteHints(This,otherItem)	\
    ( (This)->lpVtbl -> mergeAutoCompleteHints(This,otherItem) ) 

#define IWebHistoryItemPrivate_setLastVisitedTimeInterval(This,time)	\
    ( (This)->lpVtbl -> setLastVisitedTimeInterval(This,time) ) 

#define IWebHistoryItemPrivate_setTitle(This,title)	\
    ( (This)->lpVtbl -> setTitle(This,title) ) 

#define IWebHistoryItemPrivate_RSSFeedReferrer(This,url)	\
    ( (This)->lpVtbl -> RSSFeedReferrer(This,url) ) 

#define IWebHistoryItemPrivate_setRSSFeedReferrer(This,url)	\
    ( (This)->lpVtbl -> setRSSFeedReferrer(This,url) ) 

#define IWebHistoryItemPrivate_hasPageCache(This,hasCache)	\
    ( (This)->lpVtbl -> hasPageCache(This,hasCache) ) 

#define IWebHistoryItemPrivate_setHasPageCache(This,hasCache)	\
    ( (This)->lpVtbl -> setHasPageCache(This,hasCache) ) 

#define IWebHistoryItemPrivate_target(This,target)	\
    ( (This)->lpVtbl -> target(This,target) ) 

#define IWebHistoryItemPrivate_isTargetItem(This,result)	\
    ( (This)->lpVtbl -> isTargetItem(This,result) ) 

#define IWebHistoryItemPrivate_children(This,childCount,children)	\
    ( (This)->lpVtbl -> children(This,childCount,children) ) 

#define IWebHistoryItemPrivate_lastVisitWasFailure(This,wasFailure)	\
    ( (This)->lpVtbl -> lastVisitWasFailure(This,wasFailure) ) 

#define IWebHistoryItemPrivate_setLastVisitWasFailure(This,wasFailure)	\
    ( (This)->lpVtbl -> setLastVisitWasFailure(This,wasFailure) ) 

#define IWebHistoryItemPrivate_lastVisitWasHTTPNonGet(This,HTTPNonGet)	\
    ( (This)->lpVtbl -> lastVisitWasHTTPNonGet(This,HTTPNonGet) ) 

#define IWebHistoryItemPrivate_setLastVisitWasHTTPNonGet(This,wasHTTPNonGet)	\
    ( (This)->lpVtbl -> setLastVisitWasHTTPNonGet(This,wasHTTPNonGet) ) 

#define IWebHistoryItemPrivate_redirectURLs(This,result)	\
    ( (This)->lpVtbl -> redirectURLs(This,result) ) 

#define IWebHistoryItemPrivate_visitedWithTitle(This,title,increaseVisitCount)	\
    ( (This)->lpVtbl -> visitedWithTitle(This,title,increaseVisitCount) ) 

#define IWebHistoryItemPrivate_getDailyVisitCounts(This,number,counts)	\
    ( (This)->lpVtbl -> getDailyVisitCounts(This,number,counts) ) 

#define IWebHistoryItemPrivate_getWeeklyVisitCounts(This,number,counts)	\
    ( (This)->lpVtbl -> getWeeklyVisitCounts(This,number,counts) ) 

#define IWebHistoryItemPrivate_recordInitialVisit(This)	\
    ( (This)->lpVtbl -> recordInitialVisit(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebHistoryItemPrivate_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0094 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0094_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0094_v0_0_s_ifspec;

#ifndef __IWebHistoryPrivate_INTERFACE_DEFINED__
#define __IWebHistoryPrivate_INTERFACE_DEFINED__

/* interface IWebHistoryPrivate */
/* [unique][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IWebHistoryPrivate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B811003B-3475-46ad-9697-91D0D181CC05")
    IWebHistoryPrivate : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE allItems( 
            /* [out][in] */ int *count,
            /* [retval][out] */ IWebHistoryItem **items) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE data( 
            /* [retval][out] */ IStream **__MIDL__IWebHistoryPrivate0000) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setVisitedLinkTrackingEnabled( 
            /* [in] */ BOOL visitedLinkTrackingEnable) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE removeAllVisitedLinks( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebHistoryPrivateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebHistoryPrivate * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebHistoryPrivate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebHistoryPrivate * This);
        
        HRESULT ( STDMETHODCALLTYPE *allItems )( 
            IWebHistoryPrivate * This,
            /* [out][in] */ int *count,
            /* [retval][out] */ IWebHistoryItem **items);
        
        HRESULT ( STDMETHODCALLTYPE *data )( 
            IWebHistoryPrivate * This,
            /* [retval][out] */ IStream **__MIDL__IWebHistoryPrivate0000);
        
        HRESULT ( STDMETHODCALLTYPE *setVisitedLinkTrackingEnabled )( 
            IWebHistoryPrivate * This,
            /* [in] */ BOOL visitedLinkTrackingEnable);
        
        HRESULT ( STDMETHODCALLTYPE *removeAllVisitedLinks )( 
            IWebHistoryPrivate * This);
        
        END_INTERFACE
    } IWebHistoryPrivateVtbl;

    interface IWebHistoryPrivate
    {
        CONST_VTBL struct IWebHistoryPrivateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebHistoryPrivate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebHistoryPrivate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebHistoryPrivate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebHistoryPrivate_allItems(This,count,items)	\
    ( (This)->lpVtbl -> allItems(This,count,items) ) 

#define IWebHistoryPrivate_data(This,__MIDL__IWebHistoryPrivate0000)	\
    ( (This)->lpVtbl -> data(This,__MIDL__IWebHistoryPrivate0000) ) 

#define IWebHistoryPrivate_setVisitedLinkTrackingEnabled(This,visitedLinkTrackingEnable)	\
    ( (This)->lpVtbl -> setVisitedLinkTrackingEnabled(This,visitedLinkTrackingEnable) ) 

#define IWebHistoryPrivate_removeAllVisitedLinks(This)	\
    ( (This)->lpVtbl -> removeAllVisitedLinks(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebHistoryPrivate_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0095 */
/* [local] */ 

#define WebIconDatabaseDidAddIconNotification TEXT("WebIconDatabaseDidAddIconNotification")
#define WebIconNotificationUserInfoURLKey TEXT("WebIconNotificationUserInfoURLKey")
#define WebIconDatabaseDidRemoveAllIconsNotification TEXT("WebIconDatabaseDidRemoveAllIconsNotification")


extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0095_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0095_v0_0_s_ifspec;

#ifndef __IWebIconDatabase_INTERFACE_DEFINED__
#define __IWebIconDatabase_INTERFACE_DEFINED__

/* interface IWebIconDatabase */
/* [unique][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IWebIconDatabase;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("E93F2616-2560-47d9-BD4D-6E2F1E1D3174")
    IWebIconDatabase : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE sharedIconDatabase( 
            /* [retval][out] */ IWebIconDatabase **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE iconForURL( 
            /* [in] */ BSTR url,
            /* [in] */ LPSIZE size,
            /* [in] */ BOOL cache,
            /* [retval][out] */ OLE_HANDLE *hBitmap) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE defaultIconWithSize( 
            /* [in] */ LPSIZE size,
            /* [retval][out] */ OLE_HANDLE *hBitmap) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE retainIconForURL( 
            /* [in] */ BSTR url) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE releaseIconForURL( 
            /* [in] */ BSTR url) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE removeAllIcons( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE delayDatabaseCleanup( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE allowDatabaseCleanup( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE iconURLForURL( 
            /* [in] */ BSTR url,
            /* [retval][out] */ BSTR *iconURL) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isEnabled( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setEnabled( 
            /* [in] */ BOOL flag) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebIconDatabaseVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebIconDatabase * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebIconDatabase * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebIconDatabase * This);
        
        HRESULT ( STDMETHODCALLTYPE *sharedIconDatabase )( 
            IWebIconDatabase * This,
            /* [retval][out] */ IWebIconDatabase **result);
        
        HRESULT ( STDMETHODCALLTYPE *iconForURL )( 
            IWebIconDatabase * This,
            /* [in] */ BSTR url,
            /* [in] */ LPSIZE size,
            /* [in] */ BOOL cache,
            /* [retval][out] */ OLE_HANDLE *hBitmap);
        
        HRESULT ( STDMETHODCALLTYPE *defaultIconWithSize )( 
            IWebIconDatabase * This,
            /* [in] */ LPSIZE size,
            /* [retval][out] */ OLE_HANDLE *hBitmap);
        
        HRESULT ( STDMETHODCALLTYPE *retainIconForURL )( 
            IWebIconDatabase * This,
            /* [in] */ BSTR url);
        
        HRESULT ( STDMETHODCALLTYPE *releaseIconForURL )( 
            IWebIconDatabase * This,
            /* [in] */ BSTR url);
        
        HRESULT ( STDMETHODCALLTYPE *removeAllIcons )( 
            IWebIconDatabase * This);
        
        HRESULT ( STDMETHODCALLTYPE *delayDatabaseCleanup )( 
            IWebIconDatabase * This);
        
        HRESULT ( STDMETHODCALLTYPE *allowDatabaseCleanup )( 
            IWebIconDatabase * This);
        
        HRESULT ( STDMETHODCALLTYPE *iconURLForURL )( 
            IWebIconDatabase * This,
            /* [in] */ BSTR url,
            /* [retval][out] */ BSTR *iconURL);
        
        HRESULT ( STDMETHODCALLTYPE *isEnabled )( 
            IWebIconDatabase * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *setEnabled )( 
            IWebIconDatabase * This,
            /* [in] */ BOOL flag);
        
        END_INTERFACE
    } IWebIconDatabaseVtbl;

    interface IWebIconDatabase
    {
        CONST_VTBL struct IWebIconDatabaseVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebIconDatabase_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebIconDatabase_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebIconDatabase_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebIconDatabase_sharedIconDatabase(This,result)	\
    ( (This)->lpVtbl -> sharedIconDatabase(This,result) ) 

#define IWebIconDatabase_iconForURL(This,url,size,cache,hBitmap)	\
    ( (This)->lpVtbl -> iconForURL(This,url,size,cache,hBitmap) ) 

#define IWebIconDatabase_defaultIconWithSize(This,size,hBitmap)	\
    ( (This)->lpVtbl -> defaultIconWithSize(This,size,hBitmap) ) 

#define IWebIconDatabase_retainIconForURL(This,url)	\
    ( (This)->lpVtbl -> retainIconForURL(This,url) ) 

#define IWebIconDatabase_releaseIconForURL(This,url)	\
    ( (This)->lpVtbl -> releaseIconForURL(This,url) ) 

#define IWebIconDatabase_removeAllIcons(This)	\
    ( (This)->lpVtbl -> removeAllIcons(This) ) 

#define IWebIconDatabase_delayDatabaseCleanup(This)	\
    ( (This)->lpVtbl -> delayDatabaseCleanup(This) ) 

#define IWebIconDatabase_allowDatabaseCleanup(This)	\
    ( (This)->lpVtbl -> allowDatabaseCleanup(This) ) 

#define IWebIconDatabase_iconURLForURL(This,url,iconURL)	\
    ( (This)->lpVtbl -> iconURLForURL(This,url,iconURL) ) 

#define IWebIconDatabase_isEnabled(This,result)	\
    ( (This)->lpVtbl -> isEnabled(This,result) ) 

#define IWebIconDatabase_setEnabled(This,flag)	\
    ( (This)->lpVtbl -> setEnabled(This,flag) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebIconDatabase_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0096 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0096_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0096_v0_0_s_ifspec;

#ifndef __IWebIconFetcherDelegate_INTERFACE_DEFINED__
#define __IWebIconFetcherDelegate_INTERFACE_DEFINED__

/* interface IWebIconFetcherDelegate */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebIconFetcherDelegate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9d27e503-1e0e-458e-bc66-ffa9fa64600e")
    IWebIconFetcherDelegate : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE finishedLoadingIcon( 
            /* [in] */ IWebIconFetcher *fetcher,
            /* [in] */ IStream *data) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebIconFetcherDelegateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebIconFetcherDelegate * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebIconFetcherDelegate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebIconFetcherDelegate * This);
        
        HRESULT ( STDMETHODCALLTYPE *finishedLoadingIcon )( 
            IWebIconFetcherDelegate * This,
            /* [in] */ IWebIconFetcher *fetcher,
            /* [in] */ IStream *data);
        
        END_INTERFACE
    } IWebIconFetcherDelegateVtbl;

    interface IWebIconFetcherDelegate
    {
        CONST_VTBL struct IWebIconFetcherDelegateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebIconFetcherDelegate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebIconFetcherDelegate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebIconFetcherDelegate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebIconFetcherDelegate_finishedLoadingIcon(This,fetcher,data)	\
    ( (This)->lpVtbl -> finishedLoadingIcon(This,fetcher,data) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebIconFetcherDelegate_INTERFACE_DEFINED__ */


#ifndef __IWebIconFetcher_INTERFACE_DEFINED__
#define __IWebIconFetcher_INTERFACE_DEFINED__

/* interface IWebIconFetcher */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebIconFetcher;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("54f50460-8ffa-442c-b5Ab-5422e1fcc973")
    IWebIconFetcher : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE cancel( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebIconFetcherVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebIconFetcher * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebIconFetcher * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebIconFetcher * This);
        
        HRESULT ( STDMETHODCALLTYPE *cancel )( 
            IWebIconFetcher * This);
        
        END_INTERFACE
    } IWebIconFetcherVtbl;

    interface IWebIconFetcher
    {
        CONST_VTBL struct IWebIconFetcherVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebIconFetcher_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebIconFetcher_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebIconFetcher_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebIconFetcher_cancel(This)	\
    ( (This)->lpVtbl -> cancel(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebIconFetcher_INTERFACE_DEFINED__ */


#ifndef __IWebInspector_INTERFACE_DEFINED__
#define __IWebInspector_INTERFACE_DEFINED__

/* interface IWebInspector */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebInspector;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("68159FF1-9037-45ec-9992-B2E455CF39F3")
    IWebInspector : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE show( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE showConsole( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE unused1( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE close( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE attach( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE detach( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isDebuggingJavaScript( 
            BOOL *isDebugging) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE toggleDebuggingJavaScript( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isProfilingJavaScript( 
            BOOL *isProfiling) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE toggleProfilingJavaScript( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isJavaScriptProfilingEnabled( 
            BOOL *isProfilingEnabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setJavaScriptProfilingEnabled( 
            BOOL enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isTimelineProfilingEnabled( 
            BOOL *isEnabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setTimelineProfilingEnabled( 
            BOOL enabled) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebInspectorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebInspector * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebInspector * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebInspector * This);
        
        HRESULT ( STDMETHODCALLTYPE *show )( 
            IWebInspector * This);
        
        HRESULT ( STDMETHODCALLTYPE *showConsole )( 
            IWebInspector * This);
        
        HRESULT ( STDMETHODCALLTYPE *unused1 )( 
            IWebInspector * This);
        
        HRESULT ( STDMETHODCALLTYPE *close )( 
            IWebInspector * This);
        
        HRESULT ( STDMETHODCALLTYPE *attach )( 
            IWebInspector * This);
        
        HRESULT ( STDMETHODCALLTYPE *detach )( 
            IWebInspector * This);
        
        HRESULT ( STDMETHODCALLTYPE *isDebuggingJavaScript )( 
            IWebInspector * This,
            BOOL *isDebugging);
        
        HRESULT ( STDMETHODCALLTYPE *toggleDebuggingJavaScript )( 
            IWebInspector * This);
        
        HRESULT ( STDMETHODCALLTYPE *isProfilingJavaScript )( 
            IWebInspector * This,
            BOOL *isProfiling);
        
        HRESULT ( STDMETHODCALLTYPE *toggleProfilingJavaScript )( 
            IWebInspector * This);
        
        HRESULT ( STDMETHODCALLTYPE *isJavaScriptProfilingEnabled )( 
            IWebInspector * This,
            BOOL *isProfilingEnabled);
        
        HRESULT ( STDMETHODCALLTYPE *setJavaScriptProfilingEnabled )( 
            IWebInspector * This,
            BOOL enabled);
        
        HRESULT ( STDMETHODCALLTYPE *isTimelineProfilingEnabled )( 
            IWebInspector * This,
            BOOL *isEnabled);
        
        HRESULT ( STDMETHODCALLTYPE *setTimelineProfilingEnabled )( 
            IWebInspector * This,
            BOOL enabled);
        
        END_INTERFACE
    } IWebInspectorVtbl;

    interface IWebInspector
    {
        CONST_VTBL struct IWebInspectorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebInspector_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebInspector_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebInspector_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebInspector_show(This)	\
    ( (This)->lpVtbl -> show(This) ) 

#define IWebInspector_showConsole(This)	\
    ( (This)->lpVtbl -> showConsole(This) ) 

#define IWebInspector_unused1(This)	\
    ( (This)->lpVtbl -> unused1(This) ) 

#define IWebInspector_close(This)	\
    ( (This)->lpVtbl -> close(This) ) 

#define IWebInspector_attach(This)	\
    ( (This)->lpVtbl -> attach(This) ) 

#define IWebInspector_detach(This)	\
    ( (This)->lpVtbl -> detach(This) ) 

#define IWebInspector_isDebuggingJavaScript(This,isDebugging)	\
    ( (This)->lpVtbl -> isDebuggingJavaScript(This,isDebugging) ) 

#define IWebInspector_toggleDebuggingJavaScript(This)	\
    ( (This)->lpVtbl -> toggleDebuggingJavaScript(This) ) 

#define IWebInspector_isProfilingJavaScript(This,isProfiling)	\
    ( (This)->lpVtbl -> isProfilingJavaScript(This,isProfiling) ) 

#define IWebInspector_toggleProfilingJavaScript(This)	\
    ( (This)->lpVtbl -> toggleProfilingJavaScript(This) ) 

#define IWebInspector_isJavaScriptProfilingEnabled(This,isProfilingEnabled)	\
    ( (This)->lpVtbl -> isJavaScriptProfilingEnabled(This,isProfilingEnabled) ) 

#define IWebInspector_setJavaScriptProfilingEnabled(This,enabled)	\
    ( (This)->lpVtbl -> setJavaScriptProfilingEnabled(This,enabled) ) 

#define IWebInspector_isTimelineProfilingEnabled(This,isEnabled)	\
    ( (This)->lpVtbl -> isTimelineProfilingEnabled(This,isEnabled) ) 

#define IWebInspector_setTimelineProfilingEnabled(This,enabled)	\
    ( (This)->lpVtbl -> setTimelineProfilingEnabled(This,enabled) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebInspector_INTERFACE_DEFINED__ */


#ifndef __IWebInspectorPrivate_INTERFACE_DEFINED__
#define __IWebInspectorPrivate_INTERFACE_DEFINED__

/* interface IWebInspectorPrivate */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebInspectorPrivate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A5A31CD0-AEA9-11de-8A39-0800200C9A66")
    IWebInspectorPrivate : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE evaluateInFrontend( 
            /* [in] */ ULONG callId,
            /* [in] */ BSTR script) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebInspectorPrivateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebInspectorPrivate * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebInspectorPrivate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebInspectorPrivate * This);
        
        HRESULT ( STDMETHODCALLTYPE *evaluateInFrontend )( 
            IWebInspectorPrivate * This,
            /* [in] */ ULONG callId,
            /* [in] */ BSTR script);
        
        END_INTERFACE
    } IWebInspectorPrivateVtbl;

    interface IWebInspectorPrivate
    {
        CONST_VTBL struct IWebInspectorPrivateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebInspectorPrivate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebInspectorPrivate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebInspectorPrivate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebInspectorPrivate_evaluateInFrontend(This,callId,script)	\
    ( (This)->lpVtbl -> evaluateInFrontend(This,callId,script) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebInspectorPrivate_INTERFACE_DEFINED__ */


#ifndef __IWebJavaScriptCollector_INTERFACE_DEFINED__
#define __IWebJavaScriptCollector_INTERFACE_DEFINED__

/* interface IWebJavaScriptCollector */
/* [unique][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IWebJavaScriptCollector;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("E6A1D169-F44A-4d11-B55B-F0A406F47612")
    IWebJavaScriptCollector : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE collect( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE collectOnAlternateThread( 
            /* [in] */ BOOL waitUntilDone) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE objectCount( 
            /* [retval][out] */ UINT *count) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebJavaScriptCollectorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebJavaScriptCollector * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebJavaScriptCollector * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebJavaScriptCollector * This);
        
        HRESULT ( STDMETHODCALLTYPE *collect )( 
            IWebJavaScriptCollector * This);
        
        HRESULT ( STDMETHODCALLTYPE *collectOnAlternateThread )( 
            IWebJavaScriptCollector * This,
            /* [in] */ BOOL waitUntilDone);
        
        HRESULT ( STDMETHODCALLTYPE *objectCount )( 
            IWebJavaScriptCollector * This,
            /* [retval][out] */ UINT *count);
        
        END_INTERFACE
    } IWebJavaScriptCollectorVtbl;

    interface IWebJavaScriptCollector
    {
        CONST_VTBL struct IWebJavaScriptCollectorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebJavaScriptCollector_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebJavaScriptCollector_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebJavaScriptCollector_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebJavaScriptCollector_collect(This)	\
    ( (This)->lpVtbl -> collect(This) ) 

#define IWebJavaScriptCollector_collectOnAlternateThread(This,waitUntilDone)	\
    ( (This)->lpVtbl -> collectOnAlternateThread(This,waitUntilDone) ) 

#define IWebJavaScriptCollector_objectCount(This,count)	\
    ( (This)->lpVtbl -> objectCount(This,count) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebJavaScriptCollector_INTERFACE_DEFINED__ */


#ifndef __IWebKitStatistics_INTERFACE_DEFINED__
#define __IWebKitStatistics_INTERFACE_DEFINED__

/* interface IWebKitStatistics */
/* [unique][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IWebKitStatistics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("955C1042-BCF7-4f51-8AE7-66C2D0D47C44")
    IWebKitStatistics : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE webViewCount( 
            /* [retval][out] */ int *count) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE frameCount( 
            /* [retval][out] */ int *count) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE dataSourceCount( 
            /* [retval][out] */ int *count) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE viewCount( 
            /* [retval][out] */ int *count) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HTMLRepresentationCount( 
            /* [retval][out] */ int *count) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE comClassCount( 
            /* [retval][out] */ int *classCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE comClassNameCounts( 
            /* [retval][out] */ BSTR *output) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebKitStatisticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebKitStatistics * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebKitStatistics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebKitStatistics * This);
        
        HRESULT ( STDMETHODCALLTYPE *webViewCount )( 
            IWebKitStatistics * This,
            /* [retval][out] */ int *count);
        
        HRESULT ( STDMETHODCALLTYPE *frameCount )( 
            IWebKitStatistics * This,
            /* [retval][out] */ int *count);
        
        HRESULT ( STDMETHODCALLTYPE *dataSourceCount )( 
            IWebKitStatistics * This,
            /* [retval][out] */ int *count);
        
        HRESULT ( STDMETHODCALLTYPE *viewCount )( 
            IWebKitStatistics * This,
            /* [retval][out] */ int *count);
        
        HRESULT ( STDMETHODCALLTYPE *HTMLRepresentationCount )( 
            IWebKitStatistics * This,
            /* [retval][out] */ int *count);
        
        HRESULT ( STDMETHODCALLTYPE *comClassCount )( 
            IWebKitStatistics * This,
            /* [retval][out] */ int *classCount);
        
        HRESULT ( STDMETHODCALLTYPE *comClassNameCounts )( 
            IWebKitStatistics * This,
            /* [retval][out] */ BSTR *output);
        
        END_INTERFACE
    } IWebKitStatisticsVtbl;

    interface IWebKitStatistics
    {
        CONST_VTBL struct IWebKitStatisticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebKitStatistics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebKitStatistics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebKitStatistics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebKitStatistics_webViewCount(This,count)	\
    ( (This)->lpVtbl -> webViewCount(This,count) ) 

#define IWebKitStatistics_frameCount(This,count)	\
    ( (This)->lpVtbl -> frameCount(This,count) ) 

#define IWebKitStatistics_dataSourceCount(This,count)	\
    ( (This)->lpVtbl -> dataSourceCount(This,count) ) 

#define IWebKitStatistics_viewCount(This,count)	\
    ( (This)->lpVtbl -> viewCount(This,count) ) 

#define IWebKitStatistics_HTMLRepresentationCount(This,count)	\
    ( (This)->lpVtbl -> HTMLRepresentationCount(This,count) ) 

#define IWebKitStatistics_comClassCount(This,classCount)	\
    ( (This)->lpVtbl -> comClassCount(This,classCount) ) 

#define IWebKitStatistics_comClassNameCounts(This,output)	\
    ( (This)->lpVtbl -> comClassNameCounts(This,output) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebKitStatistics_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0102 */
/* [local] */ 

// this is done to get midl to treat the CFURLRequestRef as pointer types
#if 0
typedef void *CFURLRequestRef;

#else
typedef const struct _CFURLRequest* CFURLRequestRef;
#endif


extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0102_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0102_v0_0_s_ifspec;

#ifndef __IWebMutableURLRequestPrivate_INTERFACE_DEFINED__
#define __IWebMutableURLRequestPrivate_INTERFACE_DEFINED__

/* interface IWebMutableURLRequestPrivate */
/* [unique][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IWebMutableURLRequestPrivate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("AD675B60-2CE9-478c-B2AA-CAD643FF18AC")
    IWebMutableURLRequestPrivate : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE setClientCertificate( 
            /* [in] */ OLE_HANDLE cert) = 0;
        
        virtual /* [local] */ CFURLRequestRef STDMETHODCALLTYPE cfRequest( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebMutableURLRequestPrivateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebMutableURLRequestPrivate * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebMutableURLRequestPrivate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebMutableURLRequestPrivate * This);
        
        HRESULT ( STDMETHODCALLTYPE *setClientCertificate )( 
            IWebMutableURLRequestPrivate * This,
            /* [in] */ OLE_HANDLE cert);
        
        /* [local] */ CFURLRequestRef ( STDMETHODCALLTYPE *cfRequest )( 
            IWebMutableURLRequestPrivate * This);
        
        END_INTERFACE
    } IWebMutableURLRequestPrivateVtbl;

    interface IWebMutableURLRequestPrivate
    {
        CONST_VTBL struct IWebMutableURLRequestPrivateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebMutableURLRequestPrivate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebMutableURLRequestPrivate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebMutableURLRequestPrivate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebMutableURLRequestPrivate_setClientCertificate(This,cert)	\
    ( (This)->lpVtbl -> setClientCertificate(This,cert) ) 

#define IWebMutableURLRequestPrivate_cfRequest(This)	\
    ( (This)->lpVtbl -> cfRequest(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebMutableURLRequestPrivate_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0103 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0103_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0103_v0_0_s_ifspec;

#ifndef __IWebNavigationData_INTERFACE_DEFINED__
#define __IWebNavigationData_INTERFACE_DEFINED__

/* interface IWebNavigationData */
/* [unique][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IWebNavigationData;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1F162644-73D1-4de1-A20C-295FB68BF048")
    IWebNavigationData : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE url( 
            /* [retval][out] */ BSTR *__MIDL__IWebNavigationData0000) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE title( 
            /* [retval][out] */ BSTR *__MIDL__IWebNavigationData0001) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE originalRequest( 
            /* [retval][out] */ IWebURLRequest **__MIDL__IWebNavigationData0002) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE response( 
            /* [retval][out] */ IWebURLResponse **__MIDL__IWebNavigationData0003) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE hasSubstituteData( 
            /* [retval][out] */ BOOL *__MIDL__IWebNavigationData0004) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE clientRedirectSource( 
            /* [retval][out] */ BSTR *__MIDL__IWebNavigationData0005) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebNavigationDataVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebNavigationData * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebNavigationData * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebNavigationData * This);
        
        HRESULT ( STDMETHODCALLTYPE *url )( 
            IWebNavigationData * This,
            /* [retval][out] */ BSTR *__MIDL__IWebNavigationData0000);
        
        HRESULT ( STDMETHODCALLTYPE *title )( 
            IWebNavigationData * This,
            /* [retval][out] */ BSTR *__MIDL__IWebNavigationData0001);
        
        HRESULT ( STDMETHODCALLTYPE *originalRequest )( 
            IWebNavigationData * This,
            /* [retval][out] */ IWebURLRequest **__MIDL__IWebNavigationData0002);
        
        HRESULT ( STDMETHODCALLTYPE *response )( 
            IWebNavigationData * This,
            /* [retval][out] */ IWebURLResponse **__MIDL__IWebNavigationData0003);
        
        HRESULT ( STDMETHODCALLTYPE *hasSubstituteData )( 
            IWebNavigationData * This,
            /* [retval][out] */ BOOL *__MIDL__IWebNavigationData0004);
        
        HRESULT ( STDMETHODCALLTYPE *clientRedirectSource )( 
            IWebNavigationData * This,
            /* [retval][out] */ BSTR *__MIDL__IWebNavigationData0005);
        
        END_INTERFACE
    } IWebNavigationDataVtbl;

    interface IWebNavigationData
    {
        CONST_VTBL struct IWebNavigationDataVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebNavigationData_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebNavigationData_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebNavigationData_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebNavigationData_url(This,__MIDL__IWebNavigationData0000)	\
    ( (This)->lpVtbl -> url(This,__MIDL__IWebNavigationData0000) ) 

#define IWebNavigationData_title(This,__MIDL__IWebNavigationData0001)	\
    ( (This)->lpVtbl -> title(This,__MIDL__IWebNavigationData0001) ) 

#define IWebNavigationData_originalRequest(This,__MIDL__IWebNavigationData0002)	\
    ( (This)->lpVtbl -> originalRequest(This,__MIDL__IWebNavigationData0002) ) 

#define IWebNavigationData_response(This,__MIDL__IWebNavigationData0003)	\
    ( (This)->lpVtbl -> response(This,__MIDL__IWebNavigationData0003) ) 

#define IWebNavigationData_hasSubstituteData(This,__MIDL__IWebNavigationData0004)	\
    ( (This)->lpVtbl -> hasSubstituteData(This,__MIDL__IWebNavigationData0004) ) 

#define IWebNavigationData_clientRedirectSource(This,__MIDL__IWebNavigationData0005)	\
    ( (This)->lpVtbl -> clientRedirectSource(This,__MIDL__IWebNavigationData0005) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebNavigationData_INTERFACE_DEFINED__ */


#ifndef __IWebNotification_INTERFACE_DEFINED__
#define __IWebNotification_INTERFACE_DEFINED__

/* interface IWebNotification */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebNotification;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("93598207-3E34-49ec-97EC-EFA9A1E16335")
    IWebNotification : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE notificationWithName( 
            /* [in] */ BSTR aName,
            /* [in] */ IUnknown *anObject,
            /* [in] */ IPropertyBag *userInfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE name( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getObject( 
            /* [retval][out] */ IUnknown **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE userInfo( 
            /* [retval][out] */ IPropertyBag **result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebNotificationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebNotification * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebNotification * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebNotification * This);
        
        HRESULT ( STDMETHODCALLTYPE *notificationWithName )( 
            IWebNotification * This,
            /* [in] */ BSTR aName,
            /* [in] */ IUnknown *anObject,
            /* [in] */ IPropertyBag *userInfo);
        
        HRESULT ( STDMETHODCALLTYPE *name )( 
            IWebNotification * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *getObject )( 
            IWebNotification * This,
            /* [retval][out] */ IUnknown **result);
        
        HRESULT ( STDMETHODCALLTYPE *userInfo )( 
            IWebNotification * This,
            /* [retval][out] */ IPropertyBag **result);
        
        END_INTERFACE
    } IWebNotificationVtbl;

    interface IWebNotification
    {
        CONST_VTBL struct IWebNotificationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebNotification_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebNotification_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebNotification_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebNotification_notificationWithName(This,aName,anObject,userInfo)	\
    ( (This)->lpVtbl -> notificationWithName(This,aName,anObject,userInfo) ) 

#define IWebNotification_name(This,result)	\
    ( (This)->lpVtbl -> name(This,result) ) 

#define IWebNotification_getObject(This,result)	\
    ( (This)->lpVtbl -> getObject(This,result) ) 

#define IWebNotification_userInfo(This,result)	\
    ( (This)->lpVtbl -> userInfo(This,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebNotification_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0105 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0105_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0105_v0_0_s_ifspec;

#ifndef __IWebNotificationCenter_INTERFACE_DEFINED__
#define __IWebNotificationCenter_INTERFACE_DEFINED__

/* interface IWebNotificationCenter */
/* [unique][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IWebNotificationCenter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1E411ABE-DAA0-4a83-BCCA-D94E0704F193")
    IWebNotificationCenter : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE defaultCenter( 
            /* [retval][out] */ IWebNotificationCenter **center) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE addObserver( 
            /* [in] */ IWebNotificationObserver *observer,
            /* [in] */ BSTR notificationName,
            /* [in] */ IUnknown *anObject) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE postNotification( 
            /* [in] */ IWebNotification *notification) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE postNotificationName( 
            /* [in] */ BSTR notificationName,
            /* [in] */ IUnknown *anObject,
            /* [in] */ IPropertyBag *userInfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE removeObserver( 
            /* [in] */ IWebNotificationObserver *anObserver,
            /* [in] */ BSTR notificationName,
            /* [in] */ IUnknown *anObject) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebNotificationCenterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebNotificationCenter * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebNotificationCenter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebNotificationCenter * This);
        
        HRESULT ( STDMETHODCALLTYPE *defaultCenter )( 
            IWebNotificationCenter * This,
            /* [retval][out] */ IWebNotificationCenter **center);
        
        HRESULT ( STDMETHODCALLTYPE *addObserver )( 
            IWebNotificationCenter * This,
            /* [in] */ IWebNotificationObserver *observer,
            /* [in] */ BSTR notificationName,
            /* [in] */ IUnknown *anObject);
        
        HRESULT ( STDMETHODCALLTYPE *postNotification )( 
            IWebNotificationCenter * This,
            /* [in] */ IWebNotification *notification);
        
        HRESULT ( STDMETHODCALLTYPE *postNotificationName )( 
            IWebNotificationCenter * This,
            /* [in] */ BSTR notificationName,
            /* [in] */ IUnknown *anObject,
            /* [in] */ IPropertyBag *userInfo);
        
        HRESULT ( STDMETHODCALLTYPE *removeObserver )( 
            IWebNotificationCenter * This,
            /* [in] */ IWebNotificationObserver *anObserver,
            /* [in] */ BSTR notificationName,
            /* [in] */ IUnknown *anObject);
        
        END_INTERFACE
    } IWebNotificationCenterVtbl;

    interface IWebNotificationCenter
    {
        CONST_VTBL struct IWebNotificationCenterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebNotificationCenter_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebNotificationCenter_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebNotificationCenter_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebNotificationCenter_defaultCenter(This,center)	\
    ( (This)->lpVtbl -> defaultCenter(This,center) ) 

#define IWebNotificationCenter_addObserver(This,observer,notificationName,anObject)	\
    ( (This)->lpVtbl -> addObserver(This,observer,notificationName,anObject) ) 

#define IWebNotificationCenter_postNotification(This,notification)	\
    ( (This)->lpVtbl -> postNotification(This,notification) ) 

#define IWebNotificationCenter_postNotificationName(This,notificationName,anObject,userInfo)	\
    ( (This)->lpVtbl -> postNotificationName(This,notificationName,anObject,userInfo) ) 

#define IWebNotificationCenter_removeObserver(This,anObserver,notificationName,anObject)	\
    ( (This)->lpVtbl -> removeObserver(This,anObserver,notificationName,anObject) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebNotificationCenter_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0106 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0106_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0106_v0_0_s_ifspec;

#ifndef __IWebNotificationObserver_INTERFACE_DEFINED__
#define __IWebNotificationObserver_INTERFACE_DEFINED__

/* interface IWebNotificationObserver */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebNotificationObserver;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1BA491C4-58A7-4091-9F56-9AED118DB4C1")
    IWebNotificationObserver : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE onNotify( 
            /* [in] */ IWebNotification *notification) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebNotificationObserverVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebNotificationObserver * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebNotificationObserver * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebNotificationObserver * This);
        
        HRESULT ( STDMETHODCALLTYPE *onNotify )( 
            IWebNotificationObserver * This,
            /* [in] */ IWebNotification *notification);
        
        END_INTERFACE
    } IWebNotificationObserverVtbl;

    interface IWebNotificationObserver
    {
        CONST_VTBL struct IWebNotificationObserverVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebNotificationObserver_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebNotificationObserver_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebNotificationObserver_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebNotificationObserver_onNotify(This,notification)	\
    ( (This)->lpVtbl -> onNotify(This,notification) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebNotificationObserver_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0107 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0107_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0107_v0_0_s_ifspec;

#ifndef __IWebPluginHalterDelegate_INTERFACE_DEFINED__
#define __IWebPluginHalterDelegate_INTERFACE_DEFINED__

/* interface IWebPluginHalterDelegate */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebPluginHalterDelegate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2e0e5d9e-ffc9-4185-aa15-e66868d548ee")
    IWebPluginHalterDelegate : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE shouldHaltPlugin( 
            /* [in] */ IWebView *webView,
            /* [in] */ IDOMNode *__MIDL__IWebPluginHalterDelegate0000,
            /* [in] */ BOOL isWindowed,
            /* [in] */ BSTR pluginName,
            /* [retval][out] */ BOOL *result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebPluginHalterDelegateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebPluginHalterDelegate * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebPluginHalterDelegate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebPluginHalterDelegate * This);
        
        HRESULT ( STDMETHODCALLTYPE *shouldHaltPlugin )( 
            IWebPluginHalterDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ IDOMNode *__MIDL__IWebPluginHalterDelegate0000,
            /* [in] */ BOOL isWindowed,
            /* [in] */ BSTR pluginName,
            /* [retval][out] */ BOOL *result);
        
        END_INTERFACE
    } IWebPluginHalterDelegateVtbl;

    interface IWebPluginHalterDelegate
    {
        CONST_VTBL struct IWebPluginHalterDelegateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebPluginHalterDelegate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebPluginHalterDelegate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebPluginHalterDelegate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebPluginHalterDelegate_shouldHaltPlugin(This,webView,__MIDL__IWebPluginHalterDelegate0000,isWindowed,pluginName,result)	\
    ( (This)->lpVtbl -> shouldHaltPlugin(This,webView,__MIDL__IWebPluginHalterDelegate0000,isWindowed,pluginName,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebPluginHalterDelegate_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0108 */
/* [local] */ 







typedef 
enum WebNavigationType
    {	WebNavigationTypeLinkClicked	= 0,
	WebNavigationTypeFormSubmitted	= ( WebNavigationTypeLinkClicked + 1 ) ,
	WebNavigationTypeBackForward	= ( WebNavigationTypeFormSubmitted + 1 ) ,
	WebNavigationTypeReload	= ( WebNavigationTypeBackForward + 1 ) ,
	WebNavigationTypeFormResubmitted	= ( WebNavigationTypeReload + 1 ) ,
	WebNavigationTypeOther	= ( WebNavigationTypeFormResubmitted + 1 ) 
    } 	WebNavigationType;

#define WebActionButtonKey TEXT("WebActionButtonKey")
#define WebActionElementKey TEXT("WebActionElementKey")
#define WebActionFormKey TEXT("WebActionFormKey")
#define WebActionModifierFlagsKey TEXT("WebActionModifierFlagsKey")
#define WebActionNavigationTypeKey TEXT("WebActionNavigationTypeKey")
#define WebActionOriginalURLKey TEXT("WebActionOriginalURLKey")


extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0108_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0108_v0_0_s_ifspec;

#ifndef __IWebPolicyDecisionListener_INTERFACE_DEFINED__
#define __IWebPolicyDecisionListener_INTERFACE_DEFINED__

/* interface IWebPolicyDecisionListener */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebPolicyDecisionListener;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("DFCDE523-FD96-4f95-958B-151540FE122A")
    IWebPolicyDecisionListener : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE use( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE download( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ignore( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebPolicyDecisionListenerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebPolicyDecisionListener * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebPolicyDecisionListener * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebPolicyDecisionListener * This);
        
        HRESULT ( STDMETHODCALLTYPE *use )( 
            IWebPolicyDecisionListener * This);
        
        HRESULT ( STDMETHODCALLTYPE *download )( 
            IWebPolicyDecisionListener * This);
        
        HRESULT ( STDMETHODCALLTYPE *ignore )( 
            IWebPolicyDecisionListener * This);
        
        END_INTERFACE
    } IWebPolicyDecisionListenerVtbl;

    interface IWebPolicyDecisionListener
    {
        CONST_VTBL struct IWebPolicyDecisionListenerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebPolicyDecisionListener_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebPolicyDecisionListener_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebPolicyDecisionListener_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebPolicyDecisionListener_use(This)	\
    ( (This)->lpVtbl -> use(This) ) 

#define IWebPolicyDecisionListener_download(This)	\
    ( (This)->lpVtbl -> download(This) ) 

#define IWebPolicyDecisionListener_ignore(This)	\
    ( (This)->lpVtbl -> ignore(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebPolicyDecisionListener_INTERFACE_DEFINED__ */


#ifndef __IWebPolicyDelegate_INTERFACE_DEFINED__
#define __IWebPolicyDelegate_INTERFACE_DEFINED__

/* interface IWebPolicyDelegate */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebPolicyDelegate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9B0BAE6C-A496-4000-9E22-2E89F0747401")
    IWebPolicyDelegate : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE decidePolicyForNavigationAction( 
            /* [in] */ IWebView *webView,
            /* [in] */ IPropertyBag *actionInformation,
            /* [in] */ IWebURLRequest *request,
            /* [in] */ IWebFrame *frame,
            /* [in] */ IWebPolicyDecisionListener *listener) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE decidePolicyForNewWindowAction( 
            /* [in] */ IWebView *webView,
            /* [in] */ IPropertyBag *actionInformation,
            /* [in] */ IWebURLRequest *request,
            /* [in] */ BSTR frameName,
            /* [in] */ IWebPolicyDecisionListener *listener) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE decidePolicyForMIMEType( 
            /* [in] */ IWebView *webView,
            /* [in] */ BSTR type,
            /* [in] */ IWebURLRequest *request,
            /* [in] */ IWebFrame *frame,
            /* [in] */ IWebPolicyDecisionListener *listener) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE unableToImplementPolicyWithError( 
            /* [in] */ IWebView *webView,
            /* [in] */ IWebError *error,
            /* [in] */ IWebFrame *frame) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebPolicyDelegateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebPolicyDelegate * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebPolicyDelegate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebPolicyDelegate * This);
        
        HRESULT ( STDMETHODCALLTYPE *decidePolicyForNavigationAction )( 
            IWebPolicyDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ IPropertyBag *actionInformation,
            /* [in] */ IWebURLRequest *request,
            /* [in] */ IWebFrame *frame,
            /* [in] */ IWebPolicyDecisionListener *listener);
        
        HRESULT ( STDMETHODCALLTYPE *decidePolicyForNewWindowAction )( 
            IWebPolicyDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ IPropertyBag *actionInformation,
            /* [in] */ IWebURLRequest *request,
            /* [in] */ BSTR frameName,
            /* [in] */ IWebPolicyDecisionListener *listener);
        
        HRESULT ( STDMETHODCALLTYPE *decidePolicyForMIMEType )( 
            IWebPolicyDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ BSTR type,
            /* [in] */ IWebURLRequest *request,
            /* [in] */ IWebFrame *frame,
            /* [in] */ IWebPolicyDecisionListener *listener);
        
        HRESULT ( STDMETHODCALLTYPE *unableToImplementPolicyWithError )( 
            IWebPolicyDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ IWebError *error,
            /* [in] */ IWebFrame *frame);
        
        END_INTERFACE
    } IWebPolicyDelegateVtbl;

    interface IWebPolicyDelegate
    {
        CONST_VTBL struct IWebPolicyDelegateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebPolicyDelegate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebPolicyDelegate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebPolicyDelegate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebPolicyDelegate_decidePolicyForNavigationAction(This,webView,actionInformation,request,frame,listener)	\
    ( (This)->lpVtbl -> decidePolicyForNavigationAction(This,webView,actionInformation,request,frame,listener) ) 

#define IWebPolicyDelegate_decidePolicyForNewWindowAction(This,webView,actionInformation,request,frameName,listener)	\
    ( (This)->lpVtbl -> decidePolicyForNewWindowAction(This,webView,actionInformation,request,frameName,listener) ) 

#define IWebPolicyDelegate_decidePolicyForMIMEType(This,webView,type,request,frame,listener)	\
    ( (This)->lpVtbl -> decidePolicyForMIMEType(This,webView,type,request,frame,listener) ) 

#define IWebPolicyDelegate_unableToImplementPolicyWithError(This,webView,error,frame)	\
    ( (This)->lpVtbl -> unableToImplementPolicyWithError(This,webView,error,frame) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebPolicyDelegate_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0110 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0110_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0110_v0_0_s_ifspec;

#ifndef __IWebPolicyDelegatePrivate_INTERFACE_DEFINED__
#define __IWebPolicyDelegatePrivate_INTERFACE_DEFINED__

/* interface IWebPolicyDelegatePrivate */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebPolicyDelegatePrivate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BA053E15-559F-46ee-A1D4-F8003EFFB658")
    IWebPolicyDelegatePrivate : public IUnknown
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IWebPolicyDelegatePrivateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebPolicyDelegatePrivate * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebPolicyDelegatePrivate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebPolicyDelegatePrivate * This);
        
        END_INTERFACE
    } IWebPolicyDelegatePrivateVtbl;

    interface IWebPolicyDelegatePrivate
    {
        CONST_VTBL struct IWebPolicyDelegatePrivateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebPolicyDelegatePrivate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebPolicyDelegatePrivate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebPolicyDelegatePrivate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebPolicyDelegatePrivate_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0111 */
/* [local] */ 

#define WebPreferencesChangedNotification TEXT("WebPreferencesChangedNotification")
#define WebPreferencesRemovedNotification TEXT("WebPreferencesRemovedNotification")
typedef 
enum FontSmoothingType
    {	FontSmoothingTypeStandard	= 0,
	FontSmoothingTypeLight	= ( FontSmoothingTypeStandard + 1 ) ,
	FontSmoothingTypeMedium	= ( FontSmoothingTypeLight + 1 ) ,
	FontSmoothingTypeStrong	= ( FontSmoothingTypeMedium + 1 ) ,
	FontSmoothingTypeWindows	= ( FontSmoothingTypeStrong + 1 ) 
    } 	FontSmoothingType;

typedef 
enum WebKitEditableLinkBehavior
    {	WebKitEditableLinkDefaultBehavior	= 0,
	WebKitEditableLinkAlwaysLive	= ( WebKitEditableLinkDefaultBehavior + 1 ) ,
	WebKitEditableLinkOnlyLiveWithShiftKey	= ( WebKitEditableLinkAlwaysLive + 1 ) ,
	WebKitEditableLinkLiveWhenNotFocused	= ( WebKitEditableLinkOnlyLiveWithShiftKey + 1 ) ,
	WebKitEditableLinkNeverLive	= ( WebKitEditableLinkLiveWhenNotFocused + 1 ) 
    } 	WebKitEditableLinkBehavior;

typedef 
enum WebKitEditingBehavior
    {	WebKitEditingMacBehavior	= 0,
	WebKitEditingWinBehavior	= ( WebKitEditingMacBehavior + 1 ) 
    } 	WebKitEditingBehavior;

typedef 
enum WebKitCookieStorageAcceptPolicy
    {	WebKitCookieStorageAcceptPolicyAlways	= 0,
	WebKitCookieStorageAcceptPolicyNever	= ( WebKitCookieStorageAcceptPolicyAlways + 1 ) ,
	WebKitCookieStorageAcceptPolicyOnlyFromMainDocumentDomain	= ( WebKitCookieStorageAcceptPolicyNever + 1 ) 
    } 	WebKitCookieStorageAcceptPolicy;

typedef 
enum WebCacheModel
    {	WebCacheModelDocumentViewer	= 0,
	WebCacheModelDocumentBrowser	= 1,
	WebCacheModelPrimaryWebBrowser	= 2
    } 	WebCacheModel;



extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0111_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0111_v0_0_s_ifspec;

#ifndef __IWebPreferences_INTERFACE_DEFINED__
#define __IWebPreferences_INTERFACE_DEFINED__

/* interface IWebPreferences */
/* [unique][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IWebPreferences;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0930D594-A5A3-46e1-858E-AB17A13CD28E")
    IWebPreferences : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE standardPreferences( 
            /* [retval][out] */ IWebPreferences **standardPreferences) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE initWithIdentifier( 
            /* [in] */ BSTR anIdentifier,
            /* [retval][out] */ IWebPreferences **preferences) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE identifier( 
            /* [retval][out] */ BSTR *ident) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE standardFontFamily( 
            /* [retval][out] */ BSTR *family) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setStandardFontFamily( 
            /* [in] */ BSTR family) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE fixedFontFamily( 
            /* [retval][out] */ BSTR *family) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setFixedFontFamily( 
            /* [in] */ BSTR family) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE serifFontFamily( 
            /* [retval][out] */ BSTR *fontFamily) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setSerifFontFamily( 
            /* [in] */ BSTR family) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE sansSerifFontFamily( 
            /* [retval][out] */ BSTR *family) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setSansSerifFontFamily( 
            /* [in] */ BSTR family) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE cursiveFontFamily( 
            /* [retval][out] */ BSTR *family) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setCursiveFontFamily( 
            /* [in] */ BSTR family) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE fantasyFontFamily( 
            /* [retval][out] */ BSTR *family) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setFantasyFontFamily( 
            /* [in] */ BSTR family) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE defaultFontSize( 
            /* [retval][out] */ int *fontSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setDefaultFontSize( 
            /* [in] */ int fontSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE defaultFixedFontSize( 
            /* [retval][out] */ int *fontSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setDefaultFixedFontSize( 
            /* [in] */ int fontSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE minimumFontSize( 
            /* [retval][out] */ int *fontSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setMinimumFontSize( 
            /* [in] */ int fontSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE minimumLogicalFontSize( 
            /* [retval][out] */ int *fontSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setMinimumLogicalFontSize( 
            /* [in] */ int fontSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE defaultTextEncodingName( 
            /* [retval][out] */ BSTR *name) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setDefaultTextEncodingName( 
            /* [in] */ BSTR name) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE userStyleSheetEnabled( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setUserStyleSheetEnabled( 
            /* [in] */ BOOL enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE userStyleSheetLocation( 
            /* [retval][out] */ BSTR *location) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setUserStyleSheetLocation( 
            /* [in] */ BSTR location) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isJavaEnabled( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setJavaEnabled( 
            /* [in] */ BOOL enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isJavaScriptEnabled( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setJavaScriptEnabled( 
            /* [in] */ BOOL enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE javaScriptCanOpenWindowsAutomatically( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setJavaScriptCanOpenWindowsAutomatically( 
            /* [in] */ BOOL enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE arePlugInsEnabled( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setPlugInsEnabled( 
            /* [in] */ BOOL enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE allowsAnimatedImages( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setAllowsAnimatedImages( 
            /* [in] */ BOOL enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE allowAnimatedImageLooping( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setAllowAnimatedImageLooping( 
            /* [in] */ BOOL enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setLoadsImagesAutomatically( 
            /* [in] */ BOOL enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE loadsImagesAutomatically( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setAutosaves( 
            /* [in] */ BOOL enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE autosaves( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setShouldPrintBackgrounds( 
            /* [in] */ BOOL enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE shouldPrintBackgrounds( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setPrivateBrowsingEnabled( 
            /* [in] */ BOOL enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE privateBrowsingEnabled( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setTabsToLinks( 
            /* [in] */ BOOL enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE tabsToLinks( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE textAreasAreResizable( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setTextAreasAreResizable( 
            /* [in] */ BOOL enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE unused1( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE unused2( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE iconDatabaseLocation( 
            /* [retval][out] */ BSTR *location) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setIconDatabaseLocation( 
            /* [in] */ BSTR location) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE iconDatabaseEnabled( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setIconDatabaseEnabled( 
            /* [in] */ BOOL enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE fontSmoothing( 
            /* [retval][out] */ FontSmoothingType *smoothingType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setFontSmoothing( 
            /* [in] */ FontSmoothingType smoothingType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE editableLinkBehavior( 
            /* [retval][out] */ WebKitEditableLinkBehavior *editableLinkBehavior) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setEditableLinkBehavior( 
            /* [in] */ WebKitEditableLinkBehavior behavior) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE cookieStorageAcceptPolicy( 
            /* [retval][out] */ WebKitCookieStorageAcceptPolicy *acceptPolicy) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setCookieStorageAcceptPolicy( 
            /* [in] */ WebKitCookieStorageAcceptPolicy acceptPolicy) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE continuousSpellCheckingEnabled( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setContinuousSpellCheckingEnabled( 
            /* [in] */ BOOL enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE grammarCheckingEnabled( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setGrammarCheckingEnabled( 
            /* [in] */ BOOL enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE allowContinuousSpellChecking( 
            /* [retval][out] */ BOOL *allowed) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setAllowContinuousSpellChecking( 
            /* [in] */ BOOL allowed) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isDOMPasteAllowed( 
            /* [retval][out] */ BOOL *allowed) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setDOMPasteAllowed( 
            /* [in] */ BOOL allowed) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE usesPageCache( 
            /* [retval][out] */ BOOL *usesPageCache) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setUsesPageCache( 
            /* [in] */ BOOL usesPageCache) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE cacheModel( 
            /* [retval][out] */ WebCacheModel *cacheModel) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setCacheModel( 
            /* [in] */ WebCacheModel cacheModel) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setShouldPaintCustomScrollbars( 
            BOOL shouldPaint) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE shouldPaintCustomScrollbars( 
            BOOL *shouldPaint) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setZoomsTextOnly( 
            BOOL zoomsTextOnly) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE zoomsTextOnly( 
            BOOL *zoomsTextOnly) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setAcceleratedCompositingEnabled( 
            BOOL acceleratedCompositingEnabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE acceleratedCompositingEnabled( 
            BOOL *acceleratedCompositingEnabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE editingBehavior( 
            /* [retval][out] */ WebKitEditingBehavior *editingBehavior) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setEditingBehavior( 
            /* [in] */ WebKitEditingBehavior behavior) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebPreferencesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebPreferences * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebPreferences * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebPreferences * This);
        
        HRESULT ( STDMETHODCALLTYPE *standardPreferences )( 
            IWebPreferences * This,
            /* [retval][out] */ IWebPreferences **standardPreferences);
        
        HRESULT ( STDMETHODCALLTYPE *initWithIdentifier )( 
            IWebPreferences * This,
            /* [in] */ BSTR anIdentifier,
            /* [retval][out] */ IWebPreferences **preferences);
        
        HRESULT ( STDMETHODCALLTYPE *identifier )( 
            IWebPreferences * This,
            /* [retval][out] */ BSTR *ident);
        
        HRESULT ( STDMETHODCALLTYPE *standardFontFamily )( 
            IWebPreferences * This,
            /* [retval][out] */ BSTR *family);
        
        HRESULT ( STDMETHODCALLTYPE *setStandardFontFamily )( 
            IWebPreferences * This,
            /* [in] */ BSTR family);
        
        HRESULT ( STDMETHODCALLTYPE *fixedFontFamily )( 
            IWebPreferences * This,
            /* [retval][out] */ BSTR *family);
        
        HRESULT ( STDMETHODCALLTYPE *setFixedFontFamily )( 
            IWebPreferences * This,
            /* [in] */ BSTR family);
        
        HRESULT ( STDMETHODCALLTYPE *serifFontFamily )( 
            IWebPreferences * This,
            /* [retval][out] */ BSTR *fontFamily);
        
        HRESULT ( STDMETHODCALLTYPE *setSerifFontFamily )( 
            IWebPreferences * This,
            /* [in] */ BSTR family);
        
        HRESULT ( STDMETHODCALLTYPE *sansSerifFontFamily )( 
            IWebPreferences * This,
            /* [retval][out] */ BSTR *family);
        
        HRESULT ( STDMETHODCALLTYPE *setSansSerifFontFamily )( 
            IWebPreferences * This,
            /* [in] */ BSTR family);
        
        HRESULT ( STDMETHODCALLTYPE *cursiveFontFamily )( 
            IWebPreferences * This,
            /* [retval][out] */ BSTR *family);
        
        HRESULT ( STDMETHODCALLTYPE *setCursiveFontFamily )( 
            IWebPreferences * This,
            /* [in] */ BSTR family);
        
        HRESULT ( STDMETHODCALLTYPE *fantasyFontFamily )( 
            IWebPreferences * This,
            /* [retval][out] */ BSTR *family);
        
        HRESULT ( STDMETHODCALLTYPE *setFantasyFontFamily )( 
            IWebPreferences * This,
            /* [in] */ BSTR family);
        
        HRESULT ( STDMETHODCALLTYPE *defaultFontSize )( 
            IWebPreferences * This,
            /* [retval][out] */ int *fontSize);
        
        HRESULT ( STDMETHODCALLTYPE *setDefaultFontSize )( 
            IWebPreferences * This,
            /* [in] */ int fontSize);
        
        HRESULT ( STDMETHODCALLTYPE *defaultFixedFontSize )( 
            IWebPreferences * This,
            /* [retval][out] */ int *fontSize);
        
        HRESULT ( STDMETHODCALLTYPE *setDefaultFixedFontSize )( 
            IWebPreferences * This,
            /* [in] */ int fontSize);
        
        HRESULT ( STDMETHODCALLTYPE *minimumFontSize )( 
            IWebPreferences * This,
            /* [retval][out] */ int *fontSize);
        
        HRESULT ( STDMETHODCALLTYPE *setMinimumFontSize )( 
            IWebPreferences * This,
            /* [in] */ int fontSize);
        
        HRESULT ( STDMETHODCALLTYPE *minimumLogicalFontSize )( 
            IWebPreferences * This,
            /* [retval][out] */ int *fontSize);
        
        HRESULT ( STDMETHODCALLTYPE *setMinimumLogicalFontSize )( 
            IWebPreferences * This,
            /* [in] */ int fontSize);
        
        HRESULT ( STDMETHODCALLTYPE *defaultTextEncodingName )( 
            IWebPreferences * This,
            /* [retval][out] */ BSTR *name);
        
        HRESULT ( STDMETHODCALLTYPE *setDefaultTextEncodingName )( 
            IWebPreferences * This,
            /* [in] */ BSTR name);
        
        HRESULT ( STDMETHODCALLTYPE *userStyleSheetEnabled )( 
            IWebPreferences * This,
            /* [retval][out] */ BOOL *enabled);
        
        HRESULT ( STDMETHODCALLTYPE *setUserStyleSheetEnabled )( 
            IWebPreferences * This,
            /* [in] */ BOOL enabled);
        
        HRESULT ( STDMETHODCALLTYPE *userStyleSheetLocation )( 
            IWebPreferences * This,
            /* [retval][out] */ BSTR *location);
        
        HRESULT ( STDMETHODCALLTYPE *setUserStyleSheetLocation )( 
            IWebPreferences * This,
            /* [in] */ BSTR location);
        
        HRESULT ( STDMETHODCALLTYPE *isJavaEnabled )( 
            IWebPreferences * This,
            /* [retval][out] */ BOOL *enabled);
        
        HRESULT ( STDMETHODCALLTYPE *setJavaEnabled )( 
            IWebPreferences * This,
            /* [in] */ BOOL enabled);
        
        HRESULT ( STDMETHODCALLTYPE *isJavaScriptEnabled )( 
            IWebPreferences * This,
            /* [retval][out] */ BOOL *enabled);
        
        HRESULT ( STDMETHODCALLTYPE *setJavaScriptEnabled )( 
            IWebPreferences * This,
            /* [in] */ BOOL enabled);
        
        HRESULT ( STDMETHODCALLTYPE *javaScriptCanOpenWindowsAutomatically )( 
            IWebPreferences * This,
            /* [retval][out] */ BOOL *enabled);
        
        HRESULT ( STDMETHODCALLTYPE *setJavaScriptCanOpenWindowsAutomatically )( 
            IWebPreferences * This,
            /* [in] */ BOOL enabled);
        
        HRESULT ( STDMETHODCALLTYPE *arePlugInsEnabled )( 
            IWebPreferences * This,
            /* [retval][out] */ BOOL *enabled);
        
        HRESULT ( STDMETHODCALLTYPE *setPlugInsEnabled )( 
            IWebPreferences * This,
            /* [in] */ BOOL enabled);
        
        HRESULT ( STDMETHODCALLTYPE *allowsAnimatedImages )( 
            IWebPreferences * This,
            /* [retval][out] */ BOOL *enabled);
        
        HRESULT ( STDMETHODCALLTYPE *setAllowsAnimatedImages )( 
            IWebPreferences * This,
            /* [in] */ BOOL enabled);
        
        HRESULT ( STDMETHODCALLTYPE *allowAnimatedImageLooping )( 
            IWebPreferences * This,
            /* [retval][out] */ BOOL *enabled);
        
        HRESULT ( STDMETHODCALLTYPE *setAllowAnimatedImageLooping )( 
            IWebPreferences * This,
            /* [in] */ BOOL enabled);
        
        HRESULT ( STDMETHODCALLTYPE *setLoadsImagesAutomatically )( 
            IWebPreferences * This,
            /* [in] */ BOOL enabled);
        
        HRESULT ( STDMETHODCALLTYPE *loadsImagesAutomatically )( 
            IWebPreferences * This,
            /* [retval][out] */ BOOL *enabled);
        
        HRESULT ( STDMETHODCALLTYPE *setAutosaves )( 
            IWebPreferences * This,
            /* [in] */ BOOL enabled);
        
        HRESULT ( STDMETHODCALLTYPE *autosaves )( 
            IWebPreferences * This,
            /* [retval][out] */ BOOL *enabled);
        
        HRESULT ( STDMETHODCALLTYPE *setShouldPrintBackgrounds )( 
            IWebPreferences * This,
            /* [in] */ BOOL enabled);
        
        HRESULT ( STDMETHODCALLTYPE *shouldPrintBackgrounds )( 
            IWebPreferences * This,
            /* [retval][out] */ BOOL *enabled);
        
        HRESULT ( STDMETHODCALLTYPE *setPrivateBrowsingEnabled )( 
            IWebPreferences * This,
            /* [in] */ BOOL enabled);
        
        HRESULT ( STDMETHODCALLTYPE *privateBrowsingEnabled )( 
            IWebPreferences * This,
            /* [retval][out] */ BOOL *enabled);
        
        HRESULT ( STDMETHODCALLTYPE *setTabsToLinks )( 
            IWebPreferences * This,
            /* [in] */ BOOL enabled);
        
        HRESULT ( STDMETHODCALLTYPE *tabsToLinks )( 
            IWebPreferences * This,
            /* [retval][out] */ BOOL *enabled);
        
        HRESULT ( STDMETHODCALLTYPE *textAreasAreResizable )( 
            IWebPreferences * This,
            /* [retval][out] */ BOOL *enabled);
        
        HRESULT ( STDMETHODCALLTYPE *setTextAreasAreResizable )( 
            IWebPreferences * This,
            /* [in] */ BOOL enabled);
        
        HRESULT ( STDMETHODCALLTYPE *unused1 )( 
            IWebPreferences * This);
        
        HRESULT ( STDMETHODCALLTYPE *unused2 )( 
            IWebPreferences * This);
        
        HRESULT ( STDMETHODCALLTYPE *iconDatabaseLocation )( 
            IWebPreferences * This,
            /* [retval][out] */ BSTR *location);
        
        HRESULT ( STDMETHODCALLTYPE *setIconDatabaseLocation )( 
            IWebPreferences * This,
            /* [in] */ BSTR location);
        
        HRESULT ( STDMETHODCALLTYPE *iconDatabaseEnabled )( 
            IWebPreferences * This,
            /* [retval][out] */ BOOL *enabled);
        
        HRESULT ( STDMETHODCALLTYPE *setIconDatabaseEnabled )( 
            IWebPreferences * This,
            /* [in] */ BOOL enabled);
        
        HRESULT ( STDMETHODCALLTYPE *fontSmoothing )( 
            IWebPreferences * This,
            /* [retval][out] */ FontSmoothingType *smoothingType);
        
        HRESULT ( STDMETHODCALLTYPE *setFontSmoothing )( 
            IWebPreferences * This,
            /* [in] */ FontSmoothingType smoothingType);
        
        HRESULT ( STDMETHODCALLTYPE *editableLinkBehavior )( 
            IWebPreferences * This,
            /* [retval][out] */ WebKitEditableLinkBehavior *editableLinkBehavior);
        
        HRESULT ( STDMETHODCALLTYPE *setEditableLinkBehavior )( 
            IWebPreferences * This,
            /* [in] */ WebKitEditableLinkBehavior behavior);
        
        HRESULT ( STDMETHODCALLTYPE *cookieStorageAcceptPolicy )( 
            IWebPreferences * This,
            /* [retval][out] */ WebKitCookieStorageAcceptPolicy *acceptPolicy);
        
        HRESULT ( STDMETHODCALLTYPE *setCookieStorageAcceptPolicy )( 
            IWebPreferences * This,
            /* [in] */ WebKitCookieStorageAcceptPolicy acceptPolicy);
        
        HRESULT ( STDMETHODCALLTYPE *continuousSpellCheckingEnabled )( 
            IWebPreferences * This,
            /* [retval][out] */ BOOL *enabled);
        
        HRESULT ( STDMETHODCALLTYPE *setContinuousSpellCheckingEnabled )( 
            IWebPreferences * This,
            /* [in] */ BOOL enabled);
        
        HRESULT ( STDMETHODCALLTYPE *grammarCheckingEnabled )( 
            IWebPreferences * This,
            /* [retval][out] */ BOOL *enabled);
        
        HRESULT ( STDMETHODCALLTYPE *setGrammarCheckingEnabled )( 
            IWebPreferences * This,
            /* [in] */ BOOL enabled);
        
        HRESULT ( STDMETHODCALLTYPE *allowContinuousSpellChecking )( 
            IWebPreferences * This,
            /* [retval][out] */ BOOL *allowed);
        
        HRESULT ( STDMETHODCALLTYPE *setAllowContinuousSpellChecking )( 
            IWebPreferences * This,
            /* [in] */ BOOL allowed);
        
        HRESULT ( STDMETHODCALLTYPE *isDOMPasteAllowed )( 
            IWebPreferences * This,
            /* [retval][out] */ BOOL *allowed);
        
        HRESULT ( STDMETHODCALLTYPE *setDOMPasteAllowed )( 
            IWebPreferences * This,
            /* [in] */ BOOL allowed);
        
        HRESULT ( STDMETHODCALLTYPE *usesPageCache )( 
            IWebPreferences * This,
            /* [retval][out] */ BOOL *usesPageCache);
        
        HRESULT ( STDMETHODCALLTYPE *setUsesPageCache )( 
            IWebPreferences * This,
            /* [in] */ BOOL usesPageCache);
        
        HRESULT ( STDMETHODCALLTYPE *cacheModel )( 
            IWebPreferences * This,
            /* [retval][out] */ WebCacheModel *cacheModel);
        
        HRESULT ( STDMETHODCALLTYPE *setCacheModel )( 
            IWebPreferences * This,
            /* [in] */ WebCacheModel cacheModel);
        
        HRESULT ( STDMETHODCALLTYPE *setShouldPaintCustomScrollbars )( 
            IWebPreferences * This,
            BOOL shouldPaint);
        
        HRESULT ( STDMETHODCALLTYPE *shouldPaintCustomScrollbars )( 
            IWebPreferences * This,
            BOOL *shouldPaint);
        
        HRESULT ( STDMETHODCALLTYPE *setZoomsTextOnly )( 
            IWebPreferences * This,
            BOOL zoomsTextOnly);
        
        HRESULT ( STDMETHODCALLTYPE *zoomsTextOnly )( 
            IWebPreferences * This,
            BOOL *zoomsTextOnly);
        
        HRESULT ( STDMETHODCALLTYPE *setAcceleratedCompositingEnabled )( 
            IWebPreferences * This,
            BOOL acceleratedCompositingEnabled);
        
        HRESULT ( STDMETHODCALLTYPE *acceleratedCompositingEnabled )( 
            IWebPreferences * This,
            BOOL *acceleratedCompositingEnabled);
        
        HRESULT ( STDMETHODCALLTYPE *editingBehavior )( 
            IWebPreferences * This,
            /* [retval][out] */ WebKitEditingBehavior *editingBehavior);
        
        HRESULT ( STDMETHODCALLTYPE *setEditingBehavior )( 
            IWebPreferences * This,
            /* [in] */ WebKitEditingBehavior behavior);
        
        END_INTERFACE
    } IWebPreferencesVtbl;

    interface IWebPreferences
    {
        CONST_VTBL struct IWebPreferencesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebPreferences_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebPreferences_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebPreferences_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebPreferences_standardPreferences(This,standardPreferences)	\
    ( (This)->lpVtbl -> standardPreferences(This,standardPreferences) ) 

#define IWebPreferences_initWithIdentifier(This,anIdentifier,preferences)	\
    ( (This)->lpVtbl -> initWithIdentifier(This,anIdentifier,preferences) ) 

#define IWebPreferences_identifier(This,ident)	\
    ( (This)->lpVtbl -> identifier(This,ident) ) 

#define IWebPreferences_standardFontFamily(This,family)	\
    ( (This)->lpVtbl -> standardFontFamily(This,family) ) 

#define IWebPreferences_setStandardFontFamily(This,family)	\
    ( (This)->lpVtbl -> setStandardFontFamily(This,family) ) 

#define IWebPreferences_fixedFontFamily(This,family)	\
    ( (This)->lpVtbl -> fixedFontFamily(This,family) ) 

#define IWebPreferences_setFixedFontFamily(This,family)	\
    ( (This)->lpVtbl -> setFixedFontFamily(This,family) ) 

#define IWebPreferences_serifFontFamily(This,fontFamily)	\
    ( (This)->lpVtbl -> serifFontFamily(This,fontFamily) ) 

#define IWebPreferences_setSerifFontFamily(This,family)	\
    ( (This)->lpVtbl -> setSerifFontFamily(This,family) ) 

#define IWebPreferences_sansSerifFontFamily(This,family)	\
    ( (This)->lpVtbl -> sansSerifFontFamily(This,family) ) 

#define IWebPreferences_setSansSerifFontFamily(This,family)	\
    ( (This)->lpVtbl -> setSansSerifFontFamily(This,family) ) 

#define IWebPreferences_cursiveFontFamily(This,family)	\
    ( (This)->lpVtbl -> cursiveFontFamily(This,family) ) 

#define IWebPreferences_setCursiveFontFamily(This,family)	\
    ( (This)->lpVtbl -> setCursiveFontFamily(This,family) ) 

#define IWebPreferences_fantasyFontFamily(This,family)	\
    ( (This)->lpVtbl -> fantasyFontFamily(This,family) ) 

#define IWebPreferences_setFantasyFontFamily(This,family)	\
    ( (This)->lpVtbl -> setFantasyFontFamily(This,family) ) 

#define IWebPreferences_defaultFontSize(This,fontSize)	\
    ( (This)->lpVtbl -> defaultFontSize(This,fontSize) ) 

#define IWebPreferences_setDefaultFontSize(This,fontSize)	\
    ( (This)->lpVtbl -> setDefaultFontSize(This,fontSize) ) 

#define IWebPreferences_defaultFixedFontSize(This,fontSize)	\
    ( (This)->lpVtbl -> defaultFixedFontSize(This,fontSize) ) 

#define IWebPreferences_setDefaultFixedFontSize(This,fontSize)	\
    ( (This)->lpVtbl -> setDefaultFixedFontSize(This,fontSize) ) 

#define IWebPreferences_minimumFontSize(This,fontSize)	\
    ( (This)->lpVtbl -> minimumFontSize(This,fontSize) ) 

#define IWebPreferences_setMinimumFontSize(This,fontSize)	\
    ( (This)->lpVtbl -> setMinimumFontSize(This,fontSize) ) 

#define IWebPreferences_minimumLogicalFontSize(This,fontSize)	\
    ( (This)->lpVtbl -> minimumLogicalFontSize(This,fontSize) ) 

#define IWebPreferences_setMinimumLogicalFontSize(This,fontSize)	\
    ( (This)->lpVtbl -> setMinimumLogicalFontSize(This,fontSize) ) 

#define IWebPreferences_defaultTextEncodingName(This,name)	\
    ( (This)->lpVtbl -> defaultTextEncodingName(This,name) ) 

#define IWebPreferences_setDefaultTextEncodingName(This,name)	\
    ( (This)->lpVtbl -> setDefaultTextEncodingName(This,name) ) 

#define IWebPreferences_userStyleSheetEnabled(This,enabled)	\
    ( (This)->lpVtbl -> userStyleSheetEnabled(This,enabled) ) 

#define IWebPreferences_setUserStyleSheetEnabled(This,enabled)	\
    ( (This)->lpVtbl -> setUserStyleSheetEnabled(This,enabled) ) 

#define IWebPreferences_userStyleSheetLocation(This,location)	\
    ( (This)->lpVtbl -> userStyleSheetLocation(This,location) ) 

#define IWebPreferences_setUserStyleSheetLocation(This,location)	\
    ( (This)->lpVtbl -> setUserStyleSheetLocation(This,location) ) 

#define IWebPreferences_isJavaEnabled(This,enabled)	\
    ( (This)->lpVtbl -> isJavaEnabled(This,enabled) ) 

#define IWebPreferences_setJavaEnabled(This,enabled)	\
    ( (This)->lpVtbl -> setJavaEnabled(This,enabled) ) 

#define IWebPreferences_isJavaScriptEnabled(This,enabled)	\
    ( (This)->lpVtbl -> isJavaScriptEnabled(This,enabled) ) 

#define IWebPreferences_setJavaScriptEnabled(This,enabled)	\
    ( (This)->lpVtbl -> setJavaScriptEnabled(This,enabled) ) 

#define IWebPreferences_javaScriptCanOpenWindowsAutomatically(This,enabled)	\
    ( (This)->lpVtbl -> javaScriptCanOpenWindowsAutomatically(This,enabled) ) 

#define IWebPreferences_setJavaScriptCanOpenWindowsAutomatically(This,enabled)	\
    ( (This)->lpVtbl -> setJavaScriptCanOpenWindowsAutomatically(This,enabled) ) 

#define IWebPreferences_arePlugInsEnabled(This,enabled)	\
    ( (This)->lpVtbl -> arePlugInsEnabled(This,enabled) ) 

#define IWebPreferences_setPlugInsEnabled(This,enabled)	\
    ( (This)->lpVtbl -> setPlugInsEnabled(This,enabled) ) 

#define IWebPreferences_allowsAnimatedImages(This,enabled)	\
    ( (This)->lpVtbl -> allowsAnimatedImages(This,enabled) ) 

#define IWebPreferences_setAllowsAnimatedImages(This,enabled)	\
    ( (This)->lpVtbl -> setAllowsAnimatedImages(This,enabled) ) 

#define IWebPreferences_allowAnimatedImageLooping(This,enabled)	\
    ( (This)->lpVtbl -> allowAnimatedImageLooping(This,enabled) ) 

#define IWebPreferences_setAllowAnimatedImageLooping(This,enabled)	\
    ( (This)->lpVtbl -> setAllowAnimatedImageLooping(This,enabled) ) 

#define IWebPreferences_setLoadsImagesAutomatically(This,enabled)	\
    ( (This)->lpVtbl -> setLoadsImagesAutomatically(This,enabled) ) 

#define IWebPreferences_loadsImagesAutomatically(This,enabled)	\
    ( (This)->lpVtbl -> loadsImagesAutomatically(This,enabled) ) 

#define IWebPreferences_setAutosaves(This,enabled)	\
    ( (This)->lpVtbl -> setAutosaves(This,enabled) ) 

#define IWebPreferences_autosaves(This,enabled)	\
    ( (This)->lpVtbl -> autosaves(This,enabled) ) 

#define IWebPreferences_setShouldPrintBackgrounds(This,enabled)	\
    ( (This)->lpVtbl -> setShouldPrintBackgrounds(This,enabled) ) 

#define IWebPreferences_shouldPrintBackgrounds(This,enabled)	\
    ( (This)->lpVtbl -> shouldPrintBackgrounds(This,enabled) ) 

#define IWebPreferences_setPrivateBrowsingEnabled(This,enabled)	\
    ( (This)->lpVtbl -> setPrivateBrowsingEnabled(This,enabled) ) 

#define IWebPreferences_privateBrowsingEnabled(This,enabled)	\
    ( (This)->lpVtbl -> privateBrowsingEnabled(This,enabled) ) 

#define IWebPreferences_setTabsToLinks(This,enabled)	\
    ( (This)->lpVtbl -> setTabsToLinks(This,enabled) ) 

#define IWebPreferences_tabsToLinks(This,enabled)	\
    ( (This)->lpVtbl -> tabsToLinks(This,enabled) ) 

#define IWebPreferences_textAreasAreResizable(This,enabled)	\
    ( (This)->lpVtbl -> textAreasAreResizable(This,enabled) ) 

#define IWebPreferences_setTextAreasAreResizable(This,enabled)	\
    ( (This)->lpVtbl -> setTextAreasAreResizable(This,enabled) ) 

#define IWebPreferences_unused1(This)	\
    ( (This)->lpVtbl -> unused1(This) ) 

#define IWebPreferences_unused2(This)	\
    ( (This)->lpVtbl -> unused2(This) ) 

#define IWebPreferences_iconDatabaseLocation(This,location)	\
    ( (This)->lpVtbl -> iconDatabaseLocation(This,location) ) 

#define IWebPreferences_setIconDatabaseLocation(This,location)	\
    ( (This)->lpVtbl -> setIconDatabaseLocation(This,location) ) 

#define IWebPreferences_iconDatabaseEnabled(This,enabled)	\
    ( (This)->lpVtbl -> iconDatabaseEnabled(This,enabled) ) 

#define IWebPreferences_setIconDatabaseEnabled(This,enabled)	\
    ( (This)->lpVtbl -> setIconDatabaseEnabled(This,enabled) ) 

#define IWebPreferences_fontSmoothing(This,smoothingType)	\
    ( (This)->lpVtbl -> fontSmoothing(This,smoothingType) ) 

#define IWebPreferences_setFontSmoothing(This,smoothingType)	\
    ( (This)->lpVtbl -> setFontSmoothing(This,smoothingType) ) 

#define IWebPreferences_editableLinkBehavior(This,editableLinkBehavior)	\
    ( (This)->lpVtbl -> editableLinkBehavior(This,editableLinkBehavior) ) 

#define IWebPreferences_setEditableLinkBehavior(This,behavior)	\
    ( (This)->lpVtbl -> setEditableLinkBehavior(This,behavior) ) 

#define IWebPreferences_cookieStorageAcceptPolicy(This,acceptPolicy)	\
    ( (This)->lpVtbl -> cookieStorageAcceptPolicy(This,acceptPolicy) ) 

#define IWebPreferences_setCookieStorageAcceptPolicy(This,acceptPolicy)	\
    ( (This)->lpVtbl -> setCookieStorageAcceptPolicy(This,acceptPolicy) ) 

#define IWebPreferences_continuousSpellCheckingEnabled(This,enabled)	\
    ( (This)->lpVtbl -> continuousSpellCheckingEnabled(This,enabled) ) 

#define IWebPreferences_setContinuousSpellCheckingEnabled(This,enabled)	\
    ( (This)->lpVtbl -> setContinuousSpellCheckingEnabled(This,enabled) ) 

#define IWebPreferences_grammarCheckingEnabled(This,enabled)	\
    ( (This)->lpVtbl -> grammarCheckingEnabled(This,enabled) ) 

#define IWebPreferences_setGrammarCheckingEnabled(This,enabled)	\
    ( (This)->lpVtbl -> setGrammarCheckingEnabled(This,enabled) ) 

#define IWebPreferences_allowContinuousSpellChecking(This,allowed)	\
    ( (This)->lpVtbl -> allowContinuousSpellChecking(This,allowed) ) 

#define IWebPreferences_setAllowContinuousSpellChecking(This,allowed)	\
    ( (This)->lpVtbl -> setAllowContinuousSpellChecking(This,allowed) ) 

#define IWebPreferences_isDOMPasteAllowed(This,allowed)	\
    ( (This)->lpVtbl -> isDOMPasteAllowed(This,allowed) ) 

#define IWebPreferences_setDOMPasteAllowed(This,allowed)	\
    ( (This)->lpVtbl -> setDOMPasteAllowed(This,allowed) ) 

#define IWebPreferences_usesPageCache(This,usesPageCache)	\
    ( (This)->lpVtbl -> usesPageCache(This,usesPageCache) ) 

#define IWebPreferences_setUsesPageCache(This,usesPageCache)	\
    ( (This)->lpVtbl -> setUsesPageCache(This,usesPageCache) ) 

#define IWebPreferences_cacheModel(This,cacheModel)	\
    ( (This)->lpVtbl -> cacheModel(This,cacheModel) ) 

#define IWebPreferences_setCacheModel(This,cacheModel)	\
    ( (This)->lpVtbl -> setCacheModel(This,cacheModel) ) 

#define IWebPreferences_setShouldPaintCustomScrollbars(This,shouldPaint)	\
    ( (This)->lpVtbl -> setShouldPaintCustomScrollbars(This,shouldPaint) ) 

#define IWebPreferences_shouldPaintCustomScrollbars(This,shouldPaint)	\
    ( (This)->lpVtbl -> shouldPaintCustomScrollbars(This,shouldPaint) ) 

#define IWebPreferences_setZoomsTextOnly(This,zoomsTextOnly)	\
    ( (This)->lpVtbl -> setZoomsTextOnly(This,zoomsTextOnly) ) 

#define IWebPreferences_zoomsTextOnly(This,zoomsTextOnly)	\
    ( (This)->lpVtbl -> zoomsTextOnly(This,zoomsTextOnly) ) 

#define IWebPreferences_setAcceleratedCompositingEnabled(This,acceleratedCompositingEnabled)	\
    ( (This)->lpVtbl -> setAcceleratedCompositingEnabled(This,acceleratedCompositingEnabled) ) 

#define IWebPreferences_acceleratedCompositingEnabled(This,acceleratedCompositingEnabled)	\
    ( (This)->lpVtbl -> acceleratedCompositingEnabled(This,acceleratedCompositingEnabled) ) 

#define IWebPreferences_editingBehavior(This,editingBehavior)	\
    ( (This)->lpVtbl -> editingBehavior(This,editingBehavior) ) 

#define IWebPreferences_setEditingBehavior(This,behavior)	\
    ( (This)->lpVtbl -> setEditingBehavior(This,behavior) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebPreferences_INTERFACE_DEFINED__ */


#ifndef __IWebPreferencesPrivate_INTERFACE_DEFINED__
#define __IWebPreferencesPrivate_INTERFACE_DEFINED__

/* interface IWebPreferencesPrivate */
/* [unique][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IWebPreferencesPrivate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1380DE41-42CF-4170-9D5D-7840EDE5B36C")
    IWebPreferencesPrivate : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE setDeveloperExtrasEnabled( 
            /* [in] */ BOOL enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE developerExtrasEnabled( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setAutomaticallyDetectsCacheModel( 
            /* [in] */ BOOL automaticallyDetectsCacheModel) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE automaticallyDetectsCacheModel( 
            /* [retval][out] */ BOOL *automaticallyDetectsCacheModel) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setAuthorAndUserStylesEnabled( 
            /* [in] */ BOOL enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE authorAndUserStylesEnabled( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE inApplicationChromeMode( 
            /* [retval][out] */ BOOL *allowed) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setApplicationChromeMode( 
            /* [in] */ BOOL allowed) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setOfflineWebApplicationCacheEnabled( 
            /* [in] */ BOOL enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE offlineWebApplicationCacheEnabled( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE localStorageDatabasePath( 
            /* [retval][out] */ BSTR *location) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setLocalStorageDatabasePath( 
            /* [in] */ BSTR location) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setShouldPaintNativeControls( 
            /* [in] */ BOOL shouldPaint) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE shouldPaintNativeControls( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setDatabasesEnabled( 
            /* [in] */ BOOL enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE databasesEnabled( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setLocalStorageEnabled( 
            /* [in] */ BOOL enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE localStorageEnabled( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setFontSmoothingContrast( 
            /* [in] */ float contrast) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE fontSmoothingContrast( 
            /* [retval][out] */ float *contrast) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isWebSecurityEnabled( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setWebSecurityEnabled( 
            /* [in] */ BOOL enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE allowUniversalAccessFromFileURLs( 
            /* [retval][out] */ BOOL *allowAccess) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setAllowUniversalAccessFromFileURLs( 
            /* [in] */ BOOL allowAccess) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isXSSAuditorEnabled( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setXSSAuditorEnabled( 
            /* [in] */ BOOL enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isFrameFlatteningEnabled( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setFrameFlatteningEnabled( 
            /* [in] */ BOOL enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE experimentalNotificationsEnabled( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setExperimentalNotificationsEnabled( 
            /* [in] */ BOOL enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setShouldUseHighResolutionTimers( 
            /* [in] */ BOOL useHighResolutionTimers) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE shouldUseHighResolutionTimers( 
            /* [retval][out] */ BOOL *useHighResolutionTimers) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setPreferenceForTest( 
            /* [in] */ BSTR key,
            /* [in] */ BSTR value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setPluginAllowedRunTime( 
            /* [in] */ UINT allowedRunTime) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE pluginAllowedRunTime( 
            /* [retval][out] */ UINT *allowedRunTime) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setAcceleratedCompositingEnabled( 
            /* [in] */ BOOL __MIDL__IWebPreferencesPrivate0000) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE acceleratedCompositingEnabled( 
            /* [retval][out] */ BOOL *__MIDL__IWebPreferencesPrivate0001) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setCustomDragCursorsEnabled( 
            /* [in] */ BOOL __MIDL__IWebPreferencesPrivate0002) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE customDragCursorsEnabled( 
            /* [retval][out] */ BOOL *__MIDL__IWebPreferencesPrivate0003) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE allowFileAccessFromFileURLs( 
            /* [retval][out] */ BOOL *allowAccess) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setAllowFileAccessFromFileURLs( 
            /* [in] */ BOOL allowAccess) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setShowDebugBorders( 
            /* [in] */ BOOL __MIDL__IWebPreferencesPrivate0004) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE showDebugBorders( 
            /* [retval][out] */ BOOL *__MIDL__IWebPreferencesPrivate0005) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setShowRepaintCounter( 
            /* [in] */ BOOL __MIDL__IWebPreferencesPrivate0006) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE showRepaintCounter( 
            /* [retval][out] */ BOOL *__MIDL__IWebPreferencesPrivate0007) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE javaScriptCanAccessClipboard( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setJavaScriptCanAccessClipboard( 
            /* [in] */ BOOL enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isDNSPrefetchingEnabled( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setDNSPrefetchingEnabled( 
            /* [in] */ BOOL enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE memoryInfoEnabled( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setMemoryInfoEnabled( 
            /* [in] */ BOOL enabled) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebPreferencesPrivateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebPreferencesPrivate * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebPreferencesPrivate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebPreferencesPrivate * This);
        
        HRESULT ( STDMETHODCALLTYPE *setDeveloperExtrasEnabled )( 
            IWebPreferencesPrivate * This,
            /* [in] */ BOOL enabled);
        
        HRESULT ( STDMETHODCALLTYPE *developerExtrasEnabled )( 
            IWebPreferencesPrivate * This,
            /* [retval][out] */ BOOL *enabled);
        
        HRESULT ( STDMETHODCALLTYPE *setAutomaticallyDetectsCacheModel )( 
            IWebPreferencesPrivate * This,
            /* [in] */ BOOL automaticallyDetectsCacheModel);
        
        HRESULT ( STDMETHODCALLTYPE *automaticallyDetectsCacheModel )( 
            IWebPreferencesPrivate * This,
            /* [retval][out] */ BOOL *automaticallyDetectsCacheModel);
        
        HRESULT ( STDMETHODCALLTYPE *setAuthorAndUserStylesEnabled )( 
            IWebPreferencesPrivate * This,
            /* [in] */ BOOL enabled);
        
        HRESULT ( STDMETHODCALLTYPE *authorAndUserStylesEnabled )( 
            IWebPreferencesPrivate * This,
            /* [retval][out] */ BOOL *enabled);
        
        HRESULT ( STDMETHODCALLTYPE *inApplicationChromeMode )( 
            IWebPreferencesPrivate * This,
            /* [retval][out] */ BOOL *allowed);
        
        HRESULT ( STDMETHODCALLTYPE *setApplicationChromeMode )( 
            IWebPreferencesPrivate * This,
            /* [in] */ BOOL allowed);
        
        HRESULT ( STDMETHODCALLTYPE *setOfflineWebApplicationCacheEnabled )( 
            IWebPreferencesPrivate * This,
            /* [in] */ BOOL enabled);
        
        HRESULT ( STDMETHODCALLTYPE *offlineWebApplicationCacheEnabled )( 
            IWebPreferencesPrivate * This,
            /* [retval][out] */ BOOL *enabled);
        
        HRESULT ( STDMETHODCALLTYPE *localStorageDatabasePath )( 
            IWebPreferencesPrivate * This,
            /* [retval][out] */ BSTR *location);
        
        HRESULT ( STDMETHODCALLTYPE *setLocalStorageDatabasePath )( 
            IWebPreferencesPrivate * This,
            /* [in] */ BSTR location);
        
        HRESULT ( STDMETHODCALLTYPE *setShouldPaintNativeControls )( 
            IWebPreferencesPrivate * This,
            /* [in] */ BOOL shouldPaint);
        
        HRESULT ( STDMETHODCALLTYPE *shouldPaintNativeControls )( 
            IWebPreferencesPrivate * This,
            /* [retval][out] */ BOOL *enabled);
        
        HRESULT ( STDMETHODCALLTYPE *setDatabasesEnabled )( 
            IWebPreferencesPrivate * This,
            /* [in] */ BOOL enabled);
        
        HRESULT ( STDMETHODCALLTYPE *databasesEnabled )( 
            IWebPreferencesPrivate * This,
            /* [retval][out] */ BOOL *enabled);
        
        HRESULT ( STDMETHODCALLTYPE *setLocalStorageEnabled )( 
            IWebPreferencesPrivate * This,
            /* [in] */ BOOL enabled);
        
        HRESULT ( STDMETHODCALLTYPE *localStorageEnabled )( 
            IWebPreferencesPrivate * This,
            /* [retval][out] */ BOOL *enabled);
        
        HRESULT ( STDMETHODCALLTYPE *setFontSmoothingContrast )( 
            IWebPreferencesPrivate * This,
            /* [in] */ float contrast);
        
        HRESULT ( STDMETHODCALLTYPE *fontSmoothingContrast )( 
            IWebPreferencesPrivate * This,
            /* [retval][out] */ float *contrast);
        
        HRESULT ( STDMETHODCALLTYPE *isWebSecurityEnabled )( 
            IWebPreferencesPrivate * This,
            /* [retval][out] */ BOOL *enabled);
        
        HRESULT ( STDMETHODCALLTYPE *setWebSecurityEnabled )( 
            IWebPreferencesPrivate * This,
            /* [in] */ BOOL enabled);
        
        HRESULT ( STDMETHODCALLTYPE *allowUniversalAccessFromFileURLs )( 
            IWebPreferencesPrivate * This,
            /* [retval][out] */ BOOL *allowAccess);
        
        HRESULT ( STDMETHODCALLTYPE *setAllowUniversalAccessFromFileURLs )( 
            IWebPreferencesPrivate * This,
            /* [in] */ BOOL allowAccess);
        
        HRESULT ( STDMETHODCALLTYPE *isXSSAuditorEnabled )( 
            IWebPreferencesPrivate * This,
            /* [retval][out] */ BOOL *enabled);
        
        HRESULT ( STDMETHODCALLTYPE *setXSSAuditorEnabled )( 
            IWebPreferencesPrivate * This,
            /* [in] */ BOOL enabled);
        
        HRESULT ( STDMETHODCALLTYPE *isFrameFlatteningEnabled )( 
            IWebPreferencesPrivate * This,
            /* [retval][out] */ BOOL *enabled);
        
        HRESULT ( STDMETHODCALLTYPE *setFrameFlatteningEnabled )( 
            IWebPreferencesPrivate * This,
            /* [in] */ BOOL enabled);
        
        HRESULT ( STDMETHODCALLTYPE *experimentalNotificationsEnabled )( 
            IWebPreferencesPrivate * This,
            /* [retval][out] */ BOOL *enabled);
        
        HRESULT ( STDMETHODCALLTYPE *setExperimentalNotificationsEnabled )( 
            IWebPreferencesPrivate * This,
            /* [in] */ BOOL enabled);
        
        HRESULT ( STDMETHODCALLTYPE *setShouldUseHighResolutionTimers )( 
            IWebPreferencesPrivate * This,
            /* [in] */ BOOL useHighResolutionTimers);
        
        HRESULT ( STDMETHODCALLTYPE *shouldUseHighResolutionTimers )( 
            IWebPreferencesPrivate * This,
            /* [retval][out] */ BOOL *useHighResolutionTimers);
        
        HRESULT ( STDMETHODCALLTYPE *setPreferenceForTest )( 
            IWebPreferencesPrivate * This,
            /* [in] */ BSTR key,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *setPluginAllowedRunTime )( 
            IWebPreferencesPrivate * This,
            /* [in] */ UINT allowedRunTime);
        
        HRESULT ( STDMETHODCALLTYPE *pluginAllowedRunTime )( 
            IWebPreferencesPrivate * This,
            /* [retval][out] */ UINT *allowedRunTime);
        
        HRESULT ( STDMETHODCALLTYPE *setAcceleratedCompositingEnabled )( 
            IWebPreferencesPrivate * This,
            /* [in] */ BOOL __MIDL__IWebPreferencesPrivate0000);
        
        HRESULT ( STDMETHODCALLTYPE *acceleratedCompositingEnabled )( 
            IWebPreferencesPrivate * This,
            /* [retval][out] */ BOOL *__MIDL__IWebPreferencesPrivate0001);
        
        HRESULT ( STDMETHODCALLTYPE *setCustomDragCursorsEnabled )( 
            IWebPreferencesPrivate * This,
            /* [in] */ BOOL __MIDL__IWebPreferencesPrivate0002);
        
        HRESULT ( STDMETHODCALLTYPE *customDragCursorsEnabled )( 
            IWebPreferencesPrivate * This,
            /* [retval][out] */ BOOL *__MIDL__IWebPreferencesPrivate0003);
        
        HRESULT ( STDMETHODCALLTYPE *allowFileAccessFromFileURLs )( 
            IWebPreferencesPrivate * This,
            /* [retval][out] */ BOOL *allowAccess);
        
        HRESULT ( STDMETHODCALLTYPE *setAllowFileAccessFromFileURLs )( 
            IWebPreferencesPrivate * This,
            /* [in] */ BOOL allowAccess);
        
        HRESULT ( STDMETHODCALLTYPE *setShowDebugBorders )( 
            IWebPreferencesPrivate * This,
            /* [in] */ BOOL __MIDL__IWebPreferencesPrivate0004);
        
        HRESULT ( STDMETHODCALLTYPE *showDebugBorders )( 
            IWebPreferencesPrivate * This,
            /* [retval][out] */ BOOL *__MIDL__IWebPreferencesPrivate0005);
        
        HRESULT ( STDMETHODCALLTYPE *setShowRepaintCounter )( 
            IWebPreferencesPrivate * This,
            /* [in] */ BOOL __MIDL__IWebPreferencesPrivate0006);
        
        HRESULT ( STDMETHODCALLTYPE *showRepaintCounter )( 
            IWebPreferencesPrivate * This,
            /* [retval][out] */ BOOL *__MIDL__IWebPreferencesPrivate0007);
        
        HRESULT ( STDMETHODCALLTYPE *javaScriptCanAccessClipboard )( 
            IWebPreferencesPrivate * This,
            /* [retval][out] */ BOOL *enabled);
        
        HRESULT ( STDMETHODCALLTYPE *setJavaScriptCanAccessClipboard )( 
            IWebPreferencesPrivate * This,
            /* [in] */ BOOL enabled);
        
        HRESULT ( STDMETHODCALLTYPE *isDNSPrefetchingEnabled )( 
            IWebPreferencesPrivate * This,
            /* [retval][out] */ BOOL *enabled);
        
        HRESULT ( STDMETHODCALLTYPE *setDNSPrefetchingEnabled )( 
            IWebPreferencesPrivate * This,
            /* [in] */ BOOL enabled);
        
        HRESULT ( STDMETHODCALLTYPE *memoryInfoEnabled )( 
            IWebPreferencesPrivate * This,
            /* [retval][out] */ BOOL *enabled);
        
        HRESULT ( STDMETHODCALLTYPE *setMemoryInfoEnabled )( 
            IWebPreferencesPrivate * This,
            /* [in] */ BOOL enabled);
        
        END_INTERFACE
    } IWebPreferencesPrivateVtbl;

    interface IWebPreferencesPrivate
    {
        CONST_VTBL struct IWebPreferencesPrivateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebPreferencesPrivate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebPreferencesPrivate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebPreferencesPrivate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebPreferencesPrivate_setDeveloperExtrasEnabled(This,enabled)	\
    ( (This)->lpVtbl -> setDeveloperExtrasEnabled(This,enabled) ) 

#define IWebPreferencesPrivate_developerExtrasEnabled(This,enabled)	\
    ( (This)->lpVtbl -> developerExtrasEnabled(This,enabled) ) 

#define IWebPreferencesPrivate_setAutomaticallyDetectsCacheModel(This,automaticallyDetectsCacheModel)	\
    ( (This)->lpVtbl -> setAutomaticallyDetectsCacheModel(This,automaticallyDetectsCacheModel) ) 

#define IWebPreferencesPrivate_automaticallyDetectsCacheModel(This,automaticallyDetectsCacheModel)	\
    ( (This)->lpVtbl -> automaticallyDetectsCacheModel(This,automaticallyDetectsCacheModel) ) 

#define IWebPreferencesPrivate_setAuthorAndUserStylesEnabled(This,enabled)	\
    ( (This)->lpVtbl -> setAuthorAndUserStylesEnabled(This,enabled) ) 

#define IWebPreferencesPrivate_authorAndUserStylesEnabled(This,enabled)	\
    ( (This)->lpVtbl -> authorAndUserStylesEnabled(This,enabled) ) 

#define IWebPreferencesPrivate_inApplicationChromeMode(This,allowed)	\
    ( (This)->lpVtbl -> inApplicationChromeMode(This,allowed) ) 

#define IWebPreferencesPrivate_setApplicationChromeMode(This,allowed)	\
    ( (This)->lpVtbl -> setApplicationChromeMode(This,allowed) ) 

#define IWebPreferencesPrivate_setOfflineWebApplicationCacheEnabled(This,enabled)	\
    ( (This)->lpVtbl -> setOfflineWebApplicationCacheEnabled(This,enabled) ) 

#define IWebPreferencesPrivate_offlineWebApplicationCacheEnabled(This,enabled)	\
    ( (This)->lpVtbl -> offlineWebApplicationCacheEnabled(This,enabled) ) 

#define IWebPreferencesPrivate_localStorageDatabasePath(This,location)	\
    ( (This)->lpVtbl -> localStorageDatabasePath(This,location) ) 

#define IWebPreferencesPrivate_setLocalStorageDatabasePath(This,location)	\
    ( (This)->lpVtbl -> setLocalStorageDatabasePath(This,location) ) 

#define IWebPreferencesPrivate_setShouldPaintNativeControls(This,shouldPaint)	\
    ( (This)->lpVtbl -> setShouldPaintNativeControls(This,shouldPaint) ) 

#define IWebPreferencesPrivate_shouldPaintNativeControls(This,enabled)	\
    ( (This)->lpVtbl -> shouldPaintNativeControls(This,enabled) ) 

#define IWebPreferencesPrivate_setDatabasesEnabled(This,enabled)	\
    ( (This)->lpVtbl -> setDatabasesEnabled(This,enabled) ) 

#define IWebPreferencesPrivate_databasesEnabled(This,enabled)	\
    ( (This)->lpVtbl -> databasesEnabled(This,enabled) ) 

#define IWebPreferencesPrivate_setLocalStorageEnabled(This,enabled)	\
    ( (This)->lpVtbl -> setLocalStorageEnabled(This,enabled) ) 

#define IWebPreferencesPrivate_localStorageEnabled(This,enabled)	\
    ( (This)->lpVtbl -> localStorageEnabled(This,enabled) ) 

#define IWebPreferencesPrivate_setFontSmoothingContrast(This,contrast)	\
    ( (This)->lpVtbl -> setFontSmoothingContrast(This,contrast) ) 

#define IWebPreferencesPrivate_fontSmoothingContrast(This,contrast)	\
    ( (This)->lpVtbl -> fontSmoothingContrast(This,contrast) ) 

#define IWebPreferencesPrivate_isWebSecurityEnabled(This,enabled)	\
    ( (This)->lpVtbl -> isWebSecurityEnabled(This,enabled) ) 

#define IWebPreferencesPrivate_setWebSecurityEnabled(This,enabled)	\
    ( (This)->lpVtbl -> setWebSecurityEnabled(This,enabled) ) 

#define IWebPreferencesPrivate_allowUniversalAccessFromFileURLs(This,allowAccess)	\
    ( (This)->lpVtbl -> allowUniversalAccessFromFileURLs(This,allowAccess) ) 

#define IWebPreferencesPrivate_setAllowUniversalAccessFromFileURLs(This,allowAccess)	\
    ( (This)->lpVtbl -> setAllowUniversalAccessFromFileURLs(This,allowAccess) ) 

#define IWebPreferencesPrivate_isXSSAuditorEnabled(This,enabled)	\
    ( (This)->lpVtbl -> isXSSAuditorEnabled(This,enabled) ) 

#define IWebPreferencesPrivate_setXSSAuditorEnabled(This,enabled)	\
    ( (This)->lpVtbl -> setXSSAuditorEnabled(This,enabled) ) 

#define IWebPreferencesPrivate_isFrameFlatteningEnabled(This,enabled)	\
    ( (This)->lpVtbl -> isFrameFlatteningEnabled(This,enabled) ) 

#define IWebPreferencesPrivate_setFrameFlatteningEnabled(This,enabled)	\
    ( (This)->lpVtbl -> setFrameFlatteningEnabled(This,enabled) ) 

#define IWebPreferencesPrivate_experimentalNotificationsEnabled(This,enabled)	\
    ( (This)->lpVtbl -> experimentalNotificationsEnabled(This,enabled) ) 

#define IWebPreferencesPrivate_setExperimentalNotificationsEnabled(This,enabled)	\
    ( (This)->lpVtbl -> setExperimentalNotificationsEnabled(This,enabled) ) 

#define IWebPreferencesPrivate_setShouldUseHighResolutionTimers(This,useHighResolutionTimers)	\
    ( (This)->lpVtbl -> setShouldUseHighResolutionTimers(This,useHighResolutionTimers) ) 

#define IWebPreferencesPrivate_shouldUseHighResolutionTimers(This,useHighResolutionTimers)	\
    ( (This)->lpVtbl -> shouldUseHighResolutionTimers(This,useHighResolutionTimers) ) 

#define IWebPreferencesPrivate_setPreferenceForTest(This,key,value)	\
    ( (This)->lpVtbl -> setPreferenceForTest(This,key,value) ) 

#define IWebPreferencesPrivate_setPluginAllowedRunTime(This,allowedRunTime)	\
    ( (This)->lpVtbl -> setPluginAllowedRunTime(This,allowedRunTime) ) 

#define IWebPreferencesPrivate_pluginAllowedRunTime(This,allowedRunTime)	\
    ( (This)->lpVtbl -> pluginAllowedRunTime(This,allowedRunTime) ) 

#define IWebPreferencesPrivate_setAcceleratedCompositingEnabled(This,__MIDL__IWebPreferencesPrivate0000)	\
    ( (This)->lpVtbl -> setAcceleratedCompositingEnabled(This,__MIDL__IWebPreferencesPrivate0000) ) 

#define IWebPreferencesPrivate_acceleratedCompositingEnabled(This,__MIDL__IWebPreferencesPrivate0001)	\
    ( (This)->lpVtbl -> acceleratedCompositingEnabled(This,__MIDL__IWebPreferencesPrivate0001) ) 

#define IWebPreferencesPrivate_setCustomDragCursorsEnabled(This,__MIDL__IWebPreferencesPrivate0002)	\
    ( (This)->lpVtbl -> setCustomDragCursorsEnabled(This,__MIDL__IWebPreferencesPrivate0002) ) 

#define IWebPreferencesPrivate_customDragCursorsEnabled(This,__MIDL__IWebPreferencesPrivate0003)	\
    ( (This)->lpVtbl -> customDragCursorsEnabled(This,__MIDL__IWebPreferencesPrivate0003) ) 

#define IWebPreferencesPrivate_allowFileAccessFromFileURLs(This,allowAccess)	\
    ( (This)->lpVtbl -> allowFileAccessFromFileURLs(This,allowAccess) ) 

#define IWebPreferencesPrivate_setAllowFileAccessFromFileURLs(This,allowAccess)	\
    ( (This)->lpVtbl -> setAllowFileAccessFromFileURLs(This,allowAccess) ) 

#define IWebPreferencesPrivate_setShowDebugBorders(This,__MIDL__IWebPreferencesPrivate0004)	\
    ( (This)->lpVtbl -> setShowDebugBorders(This,__MIDL__IWebPreferencesPrivate0004) ) 

#define IWebPreferencesPrivate_showDebugBorders(This,__MIDL__IWebPreferencesPrivate0005)	\
    ( (This)->lpVtbl -> showDebugBorders(This,__MIDL__IWebPreferencesPrivate0005) ) 

#define IWebPreferencesPrivate_setShowRepaintCounter(This,__MIDL__IWebPreferencesPrivate0006)	\
    ( (This)->lpVtbl -> setShowRepaintCounter(This,__MIDL__IWebPreferencesPrivate0006) ) 

#define IWebPreferencesPrivate_showRepaintCounter(This,__MIDL__IWebPreferencesPrivate0007)	\
    ( (This)->lpVtbl -> showRepaintCounter(This,__MIDL__IWebPreferencesPrivate0007) ) 

#define IWebPreferencesPrivate_javaScriptCanAccessClipboard(This,enabled)	\
    ( (This)->lpVtbl -> javaScriptCanAccessClipboard(This,enabled) ) 

#define IWebPreferencesPrivate_setJavaScriptCanAccessClipboard(This,enabled)	\
    ( (This)->lpVtbl -> setJavaScriptCanAccessClipboard(This,enabled) ) 

#define IWebPreferencesPrivate_isDNSPrefetchingEnabled(This,enabled)	\
    ( (This)->lpVtbl -> isDNSPrefetchingEnabled(This,enabled) ) 

#define IWebPreferencesPrivate_setDNSPrefetchingEnabled(This,enabled)	\
    ( (This)->lpVtbl -> setDNSPrefetchingEnabled(This,enabled) ) 

#define IWebPreferencesPrivate_memoryInfoEnabled(This,enabled)	\
    ( (This)->lpVtbl -> memoryInfoEnabled(This,enabled) ) 

#define IWebPreferencesPrivate_setMemoryInfoEnabled(This,enabled)	\
    ( (This)->lpVtbl -> setMemoryInfoEnabled(This,enabled) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebPreferencesPrivate_INTERFACE_DEFINED__ */


#ifndef __IWebResource_INTERFACE_DEFINED__
#define __IWebResource_INTERFACE_DEFINED__

/* interface IWebResource */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebResource;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("09567E0E-7859-494a-B0E4-92C13CFE5574")
    IWebResource : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE initWithData( 
            /* [in] */ IStream *data,
            /* [in] */ BSTR url,
            /* [in] */ BSTR mimeType,
            /* [in] */ BSTR textEncodingName,
            /* [in] */ BSTR frameName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE data( 
            /* [retval][out] */ IStream **data) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE URL( 
            /* [retval][out] */ BSTR *url) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MIMEType( 
            /* [retval][out] */ BSTR *mime) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE textEncodingName( 
            /* [retval][out] */ BSTR *encodingName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE frameName( 
            /* [retval][out] */ BSTR *name) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebResourceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebResource * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebResource * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebResource * This);
        
        HRESULT ( STDMETHODCALLTYPE *initWithData )( 
            IWebResource * This,
            /* [in] */ IStream *data,
            /* [in] */ BSTR url,
            /* [in] */ BSTR mimeType,
            /* [in] */ BSTR textEncodingName,
            /* [in] */ BSTR frameName);
        
        HRESULT ( STDMETHODCALLTYPE *data )( 
            IWebResource * This,
            /* [retval][out] */ IStream **data);
        
        HRESULT ( STDMETHODCALLTYPE *URL )( 
            IWebResource * This,
            /* [retval][out] */ BSTR *url);
        
        HRESULT ( STDMETHODCALLTYPE *MIMEType )( 
            IWebResource * This,
            /* [retval][out] */ BSTR *mime);
        
        HRESULT ( STDMETHODCALLTYPE *textEncodingName )( 
            IWebResource * This,
            /* [retval][out] */ BSTR *encodingName);
        
        HRESULT ( STDMETHODCALLTYPE *frameName )( 
            IWebResource * This,
            /* [retval][out] */ BSTR *name);
        
        END_INTERFACE
    } IWebResourceVtbl;

    interface IWebResource
    {
        CONST_VTBL struct IWebResourceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebResource_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebResource_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebResource_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebResource_initWithData(This,data,url,mimeType,textEncodingName,frameName)	\
    ( (This)->lpVtbl -> initWithData(This,data,url,mimeType,textEncodingName,frameName) ) 

#define IWebResource_data(This,data)	\
    ( (This)->lpVtbl -> data(This,data) ) 

#define IWebResource_URL(This,url)	\
    ( (This)->lpVtbl -> URL(This,url) ) 

#define IWebResource_MIMEType(This,mime)	\
    ( (This)->lpVtbl -> MIMEType(This,mime) ) 

#define IWebResource_textEncodingName(This,encodingName)	\
    ( (This)->lpVtbl -> textEncodingName(This,encodingName) ) 

#define IWebResource_frameName(This,name)	\
    ( (This)->lpVtbl -> frameName(This,name) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebResource_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0114 */
/* [local] */ 









extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0114_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0114_v0_0_s_ifspec;

#ifndef __IWebResourceLoadDelegate_INTERFACE_DEFINED__
#define __IWebResourceLoadDelegate_INTERFACE_DEFINED__

/* interface IWebResourceLoadDelegate */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebResourceLoadDelegate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("AF3289AA-90DB-4ca4-A112-A1E5F0517953")
    IWebResourceLoadDelegate : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE identifierForInitialRequest( 
            /* [in] */ IWebView *webView,
            /* [in] */ IWebURLRequest *request,
            /* [in] */ IWebDataSource *dataSource,
            /* [in] */ unsigned long identifier) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE willSendRequest( 
            /* [in] */ IWebView *webView,
            /* [in] */ unsigned long identifier,
            /* [in] */ IWebURLRequest *request,
            /* [in] */ IWebURLResponse *redirectResponse,
            /* [in] */ IWebDataSource *dataSource,
            /* [retval][out] */ IWebURLRequest **newRequest) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE didReceiveAuthenticationChallenge( 
            /* [in] */ IWebView *webView,
            /* [in] */ unsigned long identifier,
            /* [in] */ IWebURLAuthenticationChallenge *challenge,
            /* [in] */ IWebDataSource *dataSource) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE didCancelAuthenticationChallenge( 
            /* [in] */ IWebView *webView,
            /* [in] */ unsigned long identifier,
            /* [in] */ IWebURLAuthenticationChallenge *challenge,
            /* [in] */ IWebDataSource *dataSource) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE didReceiveResponse( 
            /* [in] */ IWebView *webView,
            /* [in] */ unsigned long identifier,
            /* [in] */ IWebURLResponse *response,
            /* [in] */ IWebDataSource *dataSource) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE didReceiveContentLength( 
            /* [in] */ IWebView *webView,
            /* [in] */ unsigned long identifier,
            /* [in] */ UINT length,
            /* [in] */ IWebDataSource *dataSource) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE didFinishLoadingFromDataSource( 
            /* [in] */ IWebView *webView,
            /* [in] */ unsigned long identifier,
            /* [in] */ IWebDataSource *dataSource) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE didFailLoadingWithError( 
            /* [in] */ IWebView *webView,
            /* [in] */ unsigned long identifier,
            /* [in] */ IWebError *error,
            /* [in] */ IWebDataSource *dataSource) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE plugInFailedWithError( 
            /* [in] */ IWebView *webView,
            /* [in] */ IWebError *error,
            /* [in] */ IWebDataSource *dataSource) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebResourceLoadDelegateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebResourceLoadDelegate * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebResourceLoadDelegate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebResourceLoadDelegate * This);
        
        HRESULT ( STDMETHODCALLTYPE *identifierForInitialRequest )( 
            IWebResourceLoadDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ IWebURLRequest *request,
            /* [in] */ IWebDataSource *dataSource,
            /* [in] */ unsigned long identifier);
        
        HRESULT ( STDMETHODCALLTYPE *willSendRequest )( 
            IWebResourceLoadDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ unsigned long identifier,
            /* [in] */ IWebURLRequest *request,
            /* [in] */ IWebURLResponse *redirectResponse,
            /* [in] */ IWebDataSource *dataSource,
            /* [retval][out] */ IWebURLRequest **newRequest);
        
        HRESULT ( STDMETHODCALLTYPE *didReceiveAuthenticationChallenge )( 
            IWebResourceLoadDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ unsigned long identifier,
            /* [in] */ IWebURLAuthenticationChallenge *challenge,
            /* [in] */ IWebDataSource *dataSource);
        
        HRESULT ( STDMETHODCALLTYPE *didCancelAuthenticationChallenge )( 
            IWebResourceLoadDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ unsigned long identifier,
            /* [in] */ IWebURLAuthenticationChallenge *challenge,
            /* [in] */ IWebDataSource *dataSource);
        
        HRESULT ( STDMETHODCALLTYPE *didReceiveResponse )( 
            IWebResourceLoadDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ unsigned long identifier,
            /* [in] */ IWebURLResponse *response,
            /* [in] */ IWebDataSource *dataSource);
        
        HRESULT ( STDMETHODCALLTYPE *didReceiveContentLength )( 
            IWebResourceLoadDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ unsigned long identifier,
            /* [in] */ UINT length,
            /* [in] */ IWebDataSource *dataSource);
        
        HRESULT ( STDMETHODCALLTYPE *didFinishLoadingFromDataSource )( 
            IWebResourceLoadDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ unsigned long identifier,
            /* [in] */ IWebDataSource *dataSource);
        
        HRESULT ( STDMETHODCALLTYPE *didFailLoadingWithError )( 
            IWebResourceLoadDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ unsigned long identifier,
            /* [in] */ IWebError *error,
            /* [in] */ IWebDataSource *dataSource);
        
        HRESULT ( STDMETHODCALLTYPE *plugInFailedWithError )( 
            IWebResourceLoadDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ IWebError *error,
            /* [in] */ IWebDataSource *dataSource);
        
        END_INTERFACE
    } IWebResourceLoadDelegateVtbl;

    interface IWebResourceLoadDelegate
    {
        CONST_VTBL struct IWebResourceLoadDelegateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebResourceLoadDelegate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebResourceLoadDelegate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebResourceLoadDelegate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebResourceLoadDelegate_identifierForInitialRequest(This,webView,request,dataSource,identifier)	\
    ( (This)->lpVtbl -> identifierForInitialRequest(This,webView,request,dataSource,identifier) ) 

#define IWebResourceLoadDelegate_willSendRequest(This,webView,identifier,request,redirectResponse,dataSource,newRequest)	\
    ( (This)->lpVtbl -> willSendRequest(This,webView,identifier,request,redirectResponse,dataSource,newRequest) ) 

#define IWebResourceLoadDelegate_didReceiveAuthenticationChallenge(This,webView,identifier,challenge,dataSource)	\
    ( (This)->lpVtbl -> didReceiveAuthenticationChallenge(This,webView,identifier,challenge,dataSource) ) 

#define IWebResourceLoadDelegate_didCancelAuthenticationChallenge(This,webView,identifier,challenge,dataSource)	\
    ( (This)->lpVtbl -> didCancelAuthenticationChallenge(This,webView,identifier,challenge,dataSource) ) 

#define IWebResourceLoadDelegate_didReceiveResponse(This,webView,identifier,response,dataSource)	\
    ( (This)->lpVtbl -> didReceiveResponse(This,webView,identifier,response,dataSource) ) 

#define IWebResourceLoadDelegate_didReceiveContentLength(This,webView,identifier,length,dataSource)	\
    ( (This)->lpVtbl -> didReceiveContentLength(This,webView,identifier,length,dataSource) ) 

#define IWebResourceLoadDelegate_didFinishLoadingFromDataSource(This,webView,identifier,dataSource)	\
    ( (This)->lpVtbl -> didFinishLoadingFromDataSource(This,webView,identifier,dataSource) ) 

#define IWebResourceLoadDelegate_didFailLoadingWithError(This,webView,identifier,error,dataSource)	\
    ( (This)->lpVtbl -> didFailLoadingWithError(This,webView,identifier,error,dataSource) ) 

#define IWebResourceLoadDelegate_plugInFailedWithError(This,webView,error,dataSource)	\
    ( (This)->lpVtbl -> plugInFailedWithError(This,webView,error,dataSource) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebResourceLoadDelegate_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0115 */
/* [local] */ 







extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0115_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0115_v0_0_s_ifspec;

#ifndef __IWebResourceLoadDelegatePrivate_INTERFACE_DEFINED__
#define __IWebResourceLoadDelegatePrivate_INTERFACE_DEFINED__

/* interface IWebResourceLoadDelegatePrivate */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebResourceLoadDelegatePrivate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("099DC3C1-34B5-4169-ABBF-0C63CBC25605")
    IWebResourceLoadDelegatePrivate : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE didLoadResourceFromMemoryCache( 
            /* [in] */ IWebView *webView,
            /* [in] */ IWebURLRequest *request,
            /* [in] */ IWebURLResponse *response,
            /* [in] */ UINT length,
            /* [in] */ IWebDataSource *dataSource) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE shouldUseCredentialStorage( 
            /* [in] */ IWebView *webView,
            /* [in] */ unsigned long identifier,
            /* [in] */ IWebDataSource *dataSource,
            /* [retval][out] */ BOOL *shouldUse) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE shouldCacheResponse( 
            /* [in] */ IWebView *webView,
            /* [in] */ unsigned long identifier,
            /* [in] */ IWebURLResponse *response,
            /* [in] */ const unsigned char *data,
            /* [in] */ unsigned long long length,
            /* [in] */ IWebDataSource *dataSource,
            /* [retval][out] */ BOOL *shouldCache) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebResourceLoadDelegatePrivateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebResourceLoadDelegatePrivate * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebResourceLoadDelegatePrivate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebResourceLoadDelegatePrivate * This);
        
        HRESULT ( STDMETHODCALLTYPE *didLoadResourceFromMemoryCache )( 
            IWebResourceLoadDelegatePrivate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ IWebURLRequest *request,
            /* [in] */ IWebURLResponse *response,
            /* [in] */ UINT length,
            /* [in] */ IWebDataSource *dataSource);
        
        HRESULT ( STDMETHODCALLTYPE *shouldUseCredentialStorage )( 
            IWebResourceLoadDelegatePrivate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ unsigned long identifier,
            /* [in] */ IWebDataSource *dataSource,
            /* [retval][out] */ BOOL *shouldUse);
        
        HRESULT ( STDMETHODCALLTYPE *shouldCacheResponse )( 
            IWebResourceLoadDelegatePrivate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ unsigned long identifier,
            /* [in] */ IWebURLResponse *response,
            /* [in] */ const unsigned char *data,
            /* [in] */ unsigned long long length,
            /* [in] */ IWebDataSource *dataSource,
            /* [retval][out] */ BOOL *shouldCache);
        
        END_INTERFACE
    } IWebResourceLoadDelegatePrivateVtbl;

    interface IWebResourceLoadDelegatePrivate
    {
        CONST_VTBL struct IWebResourceLoadDelegatePrivateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebResourceLoadDelegatePrivate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebResourceLoadDelegatePrivate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebResourceLoadDelegatePrivate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebResourceLoadDelegatePrivate_didLoadResourceFromMemoryCache(This,webView,request,response,length,dataSource)	\
    ( (This)->lpVtbl -> didLoadResourceFromMemoryCache(This,webView,request,response,length,dataSource) ) 

#define IWebResourceLoadDelegatePrivate_shouldUseCredentialStorage(This,webView,identifier,dataSource,shouldUse)	\
    ( (This)->lpVtbl -> shouldUseCredentialStorage(This,webView,identifier,dataSource,shouldUse) ) 

#define IWebResourceLoadDelegatePrivate_shouldCacheResponse(This,webView,identifier,response,data,length,dataSource,shouldCache)	\
    ( (This)->lpVtbl -> shouldCacheResponse(This,webView,identifier,response,data,length,dataSource,shouldCache) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebResourceLoadDelegatePrivate_INTERFACE_DEFINED__ */


#ifndef __IWebScriptWorld_INTERFACE_DEFINED__
#define __IWebScriptWorld_INTERFACE_DEFINED__

/* interface IWebScriptWorld */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebScriptWorld;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("EBD45575-8184-4f22-B849-A5FE88336055")
    IWebScriptWorld : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE standardWorld( 
            /* [retval][out] */ IWebScriptWorld **__MIDL__IWebScriptWorld0000) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE scriptWorldForGlobalContext( 
            /* [in] */ JSGlobalContextRef __MIDL__IWebScriptWorld0001,
            /* [retval][out] */ IWebScriptWorld **__MIDL__IWebScriptWorld0002) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE unregisterWorld( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebScriptWorldVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebScriptWorld * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebScriptWorld * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebScriptWorld * This);
        
        HRESULT ( STDMETHODCALLTYPE *standardWorld )( 
            IWebScriptWorld * This,
            /* [retval][out] */ IWebScriptWorld **__MIDL__IWebScriptWorld0000);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *scriptWorldForGlobalContext )( 
            IWebScriptWorld * This,
            /* [in] */ JSGlobalContextRef __MIDL__IWebScriptWorld0001,
            /* [retval][out] */ IWebScriptWorld **__MIDL__IWebScriptWorld0002);
        
        HRESULT ( STDMETHODCALLTYPE *unregisterWorld )( 
            IWebScriptWorld * This);
        
        END_INTERFACE
    } IWebScriptWorldVtbl;

    interface IWebScriptWorld
    {
        CONST_VTBL struct IWebScriptWorldVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebScriptWorld_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebScriptWorld_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebScriptWorld_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebScriptWorld_standardWorld(This,__MIDL__IWebScriptWorld0000)	\
    ( (This)->lpVtbl -> standardWorld(This,__MIDL__IWebScriptWorld0000) ) 

#define IWebScriptWorld_scriptWorldForGlobalContext(This,__MIDL__IWebScriptWorld0001,__MIDL__IWebScriptWorld0002)	\
    ( (This)->lpVtbl -> scriptWorldForGlobalContext(This,__MIDL__IWebScriptWorld0001,__MIDL__IWebScriptWorld0002) ) 

#define IWebScriptWorld_unregisterWorld(This)	\
    ( (This)->lpVtbl -> unregisterWorld(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebScriptWorld_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0117 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0117_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0117_v0_0_s_ifspec;

#ifndef __IWebScrollBarDelegatePrivate_INTERFACE_DEFINED__
#define __IWebScrollBarDelegatePrivate_INTERFACE_DEFINED__

/* interface IWebScrollBarDelegatePrivate */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebScrollBarDelegatePrivate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2E8D56AF-3BF5-4e17-BDA6-01692ACBE3D5")
    IWebScrollBarDelegatePrivate : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE valueChanged( 
            /* [in] */ IWebScrollBarPrivate *scrollBar) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebScrollBarDelegatePrivateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebScrollBarDelegatePrivate * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebScrollBarDelegatePrivate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebScrollBarDelegatePrivate * This);
        
        HRESULT ( STDMETHODCALLTYPE *valueChanged )( 
            IWebScrollBarDelegatePrivate * This,
            /* [in] */ IWebScrollBarPrivate *scrollBar);
        
        END_INTERFACE
    } IWebScrollBarDelegatePrivateVtbl;

    interface IWebScrollBarDelegatePrivate
    {
        CONST_VTBL struct IWebScrollBarDelegatePrivateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebScrollBarDelegatePrivate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebScrollBarDelegatePrivate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebScrollBarDelegatePrivate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebScrollBarDelegatePrivate_valueChanged(This,scrollBar)	\
    ( (This)->lpVtbl -> valueChanged(This,scrollBar) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebScrollBarDelegatePrivate_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0118 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0118_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0118_v0_0_s_ifspec;

#ifndef __IWebScrollBarPrivate_INTERFACE_DEFINED__
#define __IWebScrollBarPrivate_INTERFACE_DEFINED__

/* interface IWebScrollBarPrivate */
/* [unique][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IWebScrollBarPrivate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6C585B08-2E4F-4594-9B90-0425E3A33FD0")
    IWebScrollBarPrivate : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE init( 
            /* [in] */ IWebScrollBarDelegatePrivate *delegate,
            /* [in] */ OLE_HANDLE containingWindow,
            /* [in] */ WebScrollBarOrientation orientation,
            /* [in] */ WebScrollBarControlSize controlSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setEnabled( 
            /* [in] */ BOOL enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setSteps( 
            /* [in] */ int lineStep,
            /* [in] */ int pageStep) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setProportion( 
            /* [in] */ int visibleSize,
            /* [in] */ int totalSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setRect( 
            /* [in] */ RECT bounds) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setValue( 
            /* [in] */ int value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE value( 
            /* [retval][out] */ int *value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE paint( 
            /* [in] */ HDC dc,
            /* [in] */ RECT damageRect) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE frameRect( 
            /* [retval][out] */ RECT *bounds) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE width( 
            /* [retval][out] */ int *w) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE height( 
            /* [retval][out] */ int *h) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE requestedWidth( 
            /* [retval][out] */ int *w) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE requestedHeight( 
            /* [retval][out] */ int *h) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE handleMouseEvent( 
            /* [in] */ OLE_HANDLE hwnd,
            /* [in] */ UINT msg,
            /* [in] */ WPARAM wParam,
            /* [in] */ LPARAM lParam) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE scroll( 
            /* [in] */ WebScrollDirection direction,
            /* [in] */ WebScrollGranularity granularity,
            /* [in] */ float multiplier) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebScrollBarPrivateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebScrollBarPrivate * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebScrollBarPrivate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebScrollBarPrivate * This);
        
        HRESULT ( STDMETHODCALLTYPE *init )( 
            IWebScrollBarPrivate * This,
            /* [in] */ IWebScrollBarDelegatePrivate *delegate,
            /* [in] */ OLE_HANDLE containingWindow,
            /* [in] */ WebScrollBarOrientation orientation,
            /* [in] */ WebScrollBarControlSize controlSize);
        
        HRESULT ( STDMETHODCALLTYPE *setEnabled )( 
            IWebScrollBarPrivate * This,
            /* [in] */ BOOL enabled);
        
        HRESULT ( STDMETHODCALLTYPE *setSteps )( 
            IWebScrollBarPrivate * This,
            /* [in] */ int lineStep,
            /* [in] */ int pageStep);
        
        HRESULT ( STDMETHODCALLTYPE *setProportion )( 
            IWebScrollBarPrivate * This,
            /* [in] */ int visibleSize,
            /* [in] */ int totalSize);
        
        HRESULT ( STDMETHODCALLTYPE *setRect )( 
            IWebScrollBarPrivate * This,
            /* [in] */ RECT bounds);
        
        HRESULT ( STDMETHODCALLTYPE *setValue )( 
            IWebScrollBarPrivate * This,
            /* [in] */ int value);
        
        HRESULT ( STDMETHODCALLTYPE *value )( 
            IWebScrollBarPrivate * This,
            /* [retval][out] */ int *value);
        
        HRESULT ( STDMETHODCALLTYPE *paint )( 
            IWebScrollBarPrivate * This,
            /* [in] */ HDC dc,
            /* [in] */ RECT damageRect);
        
        HRESULT ( STDMETHODCALLTYPE *frameRect )( 
            IWebScrollBarPrivate * This,
            /* [retval][out] */ RECT *bounds);
        
        HRESULT ( STDMETHODCALLTYPE *width )( 
            IWebScrollBarPrivate * This,
            /* [retval][out] */ int *w);
        
        HRESULT ( STDMETHODCALLTYPE *height )( 
            IWebScrollBarPrivate * This,
            /* [retval][out] */ int *h);
        
        HRESULT ( STDMETHODCALLTYPE *requestedWidth )( 
            IWebScrollBarPrivate * This,
            /* [retval][out] */ int *w);
        
        HRESULT ( STDMETHODCALLTYPE *requestedHeight )( 
            IWebScrollBarPrivate * This,
            /* [retval][out] */ int *h);
        
        HRESULT ( STDMETHODCALLTYPE *handleMouseEvent )( 
            IWebScrollBarPrivate * This,
            /* [in] */ OLE_HANDLE hwnd,
            /* [in] */ UINT msg,
            /* [in] */ WPARAM wParam,
            /* [in] */ LPARAM lParam);
        
        HRESULT ( STDMETHODCALLTYPE *scroll )( 
            IWebScrollBarPrivate * This,
            /* [in] */ WebScrollDirection direction,
            /* [in] */ WebScrollGranularity granularity,
            /* [in] */ float multiplier);
        
        END_INTERFACE
    } IWebScrollBarPrivateVtbl;

    interface IWebScrollBarPrivate
    {
        CONST_VTBL struct IWebScrollBarPrivateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebScrollBarPrivate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebScrollBarPrivate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebScrollBarPrivate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebScrollBarPrivate_init(This,delegate,containingWindow,orientation,controlSize)	\
    ( (This)->lpVtbl -> init(This,delegate,containingWindow,orientation,controlSize) ) 

#define IWebScrollBarPrivate_setEnabled(This,enabled)	\
    ( (This)->lpVtbl -> setEnabled(This,enabled) ) 

#define IWebScrollBarPrivate_setSteps(This,lineStep,pageStep)	\
    ( (This)->lpVtbl -> setSteps(This,lineStep,pageStep) ) 

#define IWebScrollBarPrivate_setProportion(This,visibleSize,totalSize)	\
    ( (This)->lpVtbl -> setProportion(This,visibleSize,totalSize) ) 

#define IWebScrollBarPrivate_setRect(This,bounds)	\
    ( (This)->lpVtbl -> setRect(This,bounds) ) 

#define IWebScrollBarPrivate_setValue(This,value)	\
    ( (This)->lpVtbl -> setValue(This,value) ) 

#define IWebScrollBarPrivate_value(This,value)	\
    ( (This)->lpVtbl -> value(This,value) ) 

#define IWebScrollBarPrivate_paint(This,dc,damageRect)	\
    ( (This)->lpVtbl -> paint(This,dc,damageRect) ) 

#define IWebScrollBarPrivate_frameRect(This,bounds)	\
    ( (This)->lpVtbl -> frameRect(This,bounds) ) 

#define IWebScrollBarPrivate_width(This,w)	\
    ( (This)->lpVtbl -> width(This,w) ) 

#define IWebScrollBarPrivate_height(This,h)	\
    ( (This)->lpVtbl -> height(This,h) ) 

#define IWebScrollBarPrivate_requestedWidth(This,w)	\
    ( (This)->lpVtbl -> requestedWidth(This,w) ) 

#define IWebScrollBarPrivate_requestedHeight(This,h)	\
    ( (This)->lpVtbl -> requestedHeight(This,h) ) 

#define IWebScrollBarPrivate_handleMouseEvent(This,hwnd,msg,wParam,lParam)	\
    ( (This)->lpVtbl -> handleMouseEvent(This,hwnd,msg,wParam,lParam) ) 

#define IWebScrollBarPrivate_scroll(This,direction,granularity,multiplier)	\
    ( (This)->lpVtbl -> scroll(This,direction,granularity,multiplier) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebScrollBarPrivate_INTERFACE_DEFINED__ */


#ifndef __IWebSecurityOrigin_INTERFACE_DEFINED__
#define __IWebSecurityOrigin_INTERFACE_DEFINED__

/* interface IWebSecurityOrigin */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebSecurityOrigin;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("304d4462-a921-4e85-bc11-bce1462B159d")
    IWebSecurityOrigin : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE protocol( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE host( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE port( 
            /* [retval][out] */ unsigned short *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE usage( 
            /* [retval][out] */ unsigned long long *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE quota( 
            /* [retval][out] */ unsigned long long *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setQuota( 
            /* [in] */ unsigned long long quota) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebSecurityOriginVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebSecurityOrigin * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebSecurityOrigin * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebSecurityOrigin * This);
        
        HRESULT ( STDMETHODCALLTYPE *protocol )( 
            IWebSecurityOrigin * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *host )( 
            IWebSecurityOrigin * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *port )( 
            IWebSecurityOrigin * This,
            /* [retval][out] */ unsigned short *result);
        
        HRESULT ( STDMETHODCALLTYPE *usage )( 
            IWebSecurityOrigin * This,
            /* [retval][out] */ unsigned long long *result);
        
        HRESULT ( STDMETHODCALLTYPE *quota )( 
            IWebSecurityOrigin * This,
            /* [retval][out] */ unsigned long long *result);
        
        HRESULT ( STDMETHODCALLTYPE *setQuota )( 
            IWebSecurityOrigin * This,
            /* [in] */ unsigned long long quota);
        
        END_INTERFACE
    } IWebSecurityOriginVtbl;

    interface IWebSecurityOrigin
    {
        CONST_VTBL struct IWebSecurityOriginVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebSecurityOrigin_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebSecurityOrigin_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebSecurityOrigin_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebSecurityOrigin_protocol(This,result)	\
    ( (This)->lpVtbl -> protocol(This,result) ) 

#define IWebSecurityOrigin_host(This,result)	\
    ( (This)->lpVtbl -> host(This,result) ) 

#define IWebSecurityOrigin_port(This,result)	\
    ( (This)->lpVtbl -> port(This,result) ) 

#define IWebSecurityOrigin_usage(This,result)	\
    ( (This)->lpVtbl -> usage(This,result) ) 

#define IWebSecurityOrigin_quota(This,result)	\
    ( (This)->lpVtbl -> quota(This,result) ) 

#define IWebSecurityOrigin_setQuota(This,quota)	\
    ( (This)->lpVtbl -> setQuota(This,quota) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebSecurityOrigin_INTERFACE_DEFINED__ */


#ifndef __IWebSerializedJSValue_INTERFACE_DEFINED__
#define __IWebSerializedJSValue_INTERFACE_DEFINED__

/* interface IWebSerializedJSValue */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebSerializedJSValue;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("13B3F50A-C996-61A7-2247-3DCC88FB0B84")
    IWebSerializedJSValue : public IUnknown
    {
    public:
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE serialize( 
            /* [in] */ JSContextRef context,
            /* [in] */ JSValueRef value,
            /* [retval][out] */ JSValueRef *exception) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE deserialize( 
            /* [in] */ JSContextRef context,
            /* [retval][out] */ JSValueRef *value) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebSerializedJSValueVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebSerializedJSValue * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebSerializedJSValue * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebSerializedJSValue * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *serialize )( 
            IWebSerializedJSValue * This,
            /* [in] */ JSContextRef context,
            /* [in] */ JSValueRef value,
            /* [retval][out] */ JSValueRef *exception);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *deserialize )( 
            IWebSerializedJSValue * This,
            /* [in] */ JSContextRef context,
            /* [retval][out] */ JSValueRef *value);
        
        END_INTERFACE
    } IWebSerializedJSValueVtbl;

    interface IWebSerializedJSValue
    {
        CONST_VTBL struct IWebSerializedJSValueVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebSerializedJSValue_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebSerializedJSValue_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebSerializedJSValue_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebSerializedJSValue_serialize(This,context,value,exception)	\
    ( (This)->lpVtbl -> serialize(This,context,value,exception) ) 

#define IWebSerializedJSValue_deserialize(This,context,value)	\
    ( (This)->lpVtbl -> deserialize(This,context,value) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebSerializedJSValue_INTERFACE_DEFINED__ */


#ifndef __IWebTextRenderer_INTERFACE_DEFINED__
#define __IWebTextRenderer_INTERFACE_DEFINED__

/* interface IWebTextRenderer */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebTextRenderer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5b26abbb-c27a-4527-a313-cb733e2cd257")
    IWebTextRenderer : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE registerPrivateFont( 
            /* [in] */ LPCOLESTR fontFilePath) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebTextRendererVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebTextRenderer * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebTextRenderer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebTextRenderer * This);
        
        HRESULT ( STDMETHODCALLTYPE *registerPrivateFont )( 
            IWebTextRenderer * This,
            /* [in] */ LPCOLESTR fontFilePath);
        
        END_INTERFACE
    } IWebTextRendererVtbl;

    interface IWebTextRenderer
    {
        CONST_VTBL struct IWebTextRendererVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebTextRenderer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebTextRenderer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebTextRenderer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebTextRenderer_registerPrivateFont(This,fontFilePath)	\
    ( (This)->lpVtbl -> registerPrivateFont(This,fontFilePath) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebTextRenderer_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0122 */
/* [local] */ 





typedef 
enum WebMenuItemTag
    {	WebMenuItemTagOpenLinkInNewWindow	= 1,
	WebMenuItemTagDownloadLinkToDisk	= ( WebMenuItemTagOpenLinkInNewWindow + 1 ) ,
	WebMenuItemTagCopyLinkToClipboard	= ( WebMenuItemTagDownloadLinkToDisk + 1 ) ,
	WebMenuItemTagOpenImageInNewWindow	= ( WebMenuItemTagCopyLinkToClipboard + 1 ) ,
	WebMenuItemTagDownloadImageToDisk	= ( WebMenuItemTagOpenImageInNewWindow + 1 ) ,
	WebMenuItemTagCopyImageToClipboard	= ( WebMenuItemTagDownloadImageToDisk + 1 ) ,
	WebMenuItemTagOpenFrameInNewWindow	= ( WebMenuItemTagCopyImageToClipboard + 1 ) ,
	WebMenuItemTagCopy	= ( WebMenuItemTagOpenFrameInNewWindow + 1 ) ,
	WebMenuItemTagGoBack	= ( WebMenuItemTagCopy + 1 ) ,
	WebMenuItemTagGoForward	= ( WebMenuItemTagGoBack + 1 ) ,
	WebMenuItemTagStop	= ( WebMenuItemTagGoForward + 1 ) ,
	WebMenuItemTagReload	= ( WebMenuItemTagStop + 1 ) ,
	WebMenuItemTagCut	= ( WebMenuItemTagReload + 1 ) ,
	WebMenuItemTagPaste	= ( WebMenuItemTagCut + 1 ) ,
	WebMenuItemTagSpellingGuess	= ( WebMenuItemTagPaste + 1 ) ,
	WebMenuItemTagNoGuessesFound	= ( WebMenuItemTagSpellingGuess + 1 ) ,
	WebMenuItemTagIgnoreSpelling	= ( WebMenuItemTagNoGuessesFound + 1 ) ,
	WebMenuItemTagLearnSpelling	= ( WebMenuItemTagIgnoreSpelling + 1 ) ,
	WebMenuItemTagOther	= ( WebMenuItemTagLearnSpelling + 1 ) ,
	WebMenuItemTagSearchInSpotlight	= ( WebMenuItemTagOther + 1 ) ,
	WebMenuItemTagSearchWeb	= ( WebMenuItemTagSearchInSpotlight + 1 ) ,
	WebMenuItemTagLookUpInDictionary	= ( WebMenuItemTagSearchWeb + 1 ) ,
	WebMenuItemTagOpenWithDefaultApplication	= ( WebMenuItemTagLookUpInDictionary + 1 ) ,
	WebMenuItemPDFActualSize	= ( WebMenuItemTagOpenWithDefaultApplication + 1 ) ,
	WebMenuItemPDFZoomIn	= ( WebMenuItemPDFActualSize + 1 ) ,
	WebMenuItemPDFZoomOut	= ( WebMenuItemPDFZoomIn + 1 ) ,
	WebMenuItemPDFAutoSize	= ( WebMenuItemPDFZoomOut + 1 ) ,
	WebMenuItemPDFSinglePage	= ( WebMenuItemPDFAutoSize + 1 ) ,
	WebMenuItemPDFFacingPages	= ( WebMenuItemPDFSinglePage + 1 ) ,
	WebMenuItemPDFContinuous	= ( WebMenuItemPDFFacingPages + 1 ) ,
	WebMenuItemPDFNextPage	= ( WebMenuItemPDFContinuous + 1 ) ,
	WebMenuItemPDFPreviousPage	= ( WebMenuItemPDFNextPage + 1 ) ,
	WebMenuItemTagOpenLink	= 2000,
	WebMenuItemTagIgnoreGrammar	= ( WebMenuItemTagOpenLink + 1 ) ,
	WebtMenuItemTagSpellingMenu	= ( WebMenuItemTagIgnoreGrammar + 1 ) ,
	WebMenuItemTagShowSpellingPanel	= ( WebtMenuItemTagSpellingMenu + 1 ) ,
	WebMenuItemTagCheckSpelling	= ( WebMenuItemTagShowSpellingPanel + 1 ) ,
	WebMenuItemTagCheckSpellingWhileTyping	= ( WebMenuItemTagCheckSpelling + 1 ) ,
	WebMenuItemTagCheckGrammarWithSpelling	= ( WebMenuItemTagCheckSpellingWhileTyping + 1 ) ,
	WebMenuItemTagFontMenu	= ( WebMenuItemTagCheckGrammarWithSpelling + 1 ) ,
	WebMenuItemTagShowFonts	= ( WebMenuItemTagFontMenu + 1 ) ,
	WebMenuItemTagBold	= ( WebMenuItemTagShowFonts + 1 ) ,
	WebMenuItemTagItalic	= ( WebMenuItemTagBold + 1 ) ,
	WebMenuItemTagUnderline	= ( WebMenuItemTagItalic + 1 ) ,
	WebMenuItemTagOutline	= ( WebMenuItemTagUnderline + 1 ) ,
	WebMenuItemTagStyles	= ( WebMenuItemTagOutline + 1 ) ,
	WebMenuItemTagShowColors	= ( WebMenuItemTagStyles + 1 ) ,
	WebMenuItemTagSpeechMenu	= ( WebMenuItemTagShowColors + 1 ) ,
	WebMenuItemTagStartSpeaking	= ( WebMenuItemTagSpeechMenu + 1 ) ,
	WebMenuItemTagStopSpeaking	= ( WebMenuItemTagStartSpeaking + 1 ) ,
	WebMenuItemTagWritingDirectionMenu	= ( WebMenuItemTagStopSpeaking + 1 ) ,
	WebMenuItemTagDefaultDirection	= ( WebMenuItemTagWritingDirectionMenu + 1 ) ,
	WebMenuItemTagLeftToRight	= ( WebMenuItemTagDefaultDirection + 1 ) ,
	WebMenuItemTagRightToLeft	= ( WebMenuItemTagLeftToRight + 1 ) ,
	WebMenuItemTagPDFSinglePageScrolling	= ( WebMenuItemTagRightToLeft + 1 ) ,
	WebMenuItemTagPDFFacingPagesScrolling	= ( WebMenuItemTagPDFSinglePageScrolling + 1 ) ,
	WebMenuItemTagInspectElement	= ( WebMenuItemTagPDFFacingPagesScrolling + 1 ) ,
	WebMenuItemBaseApplicationTag	= 10000
    } 	WebMenuItemTag;

typedef 
enum WebDragDestinationAction
    {	WebDragDestinationActionNone	= 0,
	WebDragDestinationActionDHTML	= 1,
	WebDragDestinationActionEdit	= 2,
	WebDragDestinationActionLoad	= 4,
	WebDragDestinationActionAny	= ( unsigned long  )-1
    } 	WebDragDestinationAction;

typedef 
enum WebDragSourceAction
    {	WebDragSourceActionNone	= 0,
	WebDragSourceActionDHTML	= 1,
	WebDragSourceActionImage	= 2,
	WebDragSourceActionLink	= 4,
	WebDragSourceActionSelection	= 8,
	WebDragSourceActionAny	= ( unsigned long  )-1
    } 	WebDragSourceAction;



extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0122_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0122_v0_0_s_ifspec;

#ifndef __IWebOpenPanelResultListener_INTERFACE_DEFINED__
#define __IWebOpenPanelResultListener_INTERFACE_DEFINED__

/* interface IWebOpenPanelResultListener */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebOpenPanelResultListener;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("634198C7-9DFC-4aba-9E8C-90AEEA7A4144")
    IWebOpenPanelResultListener : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE chooseFilename( 
            /* [retval][out] */ BSTR *fileName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE cancel( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebOpenPanelResultListenerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebOpenPanelResultListener * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebOpenPanelResultListener * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebOpenPanelResultListener * This);
        
        HRESULT ( STDMETHODCALLTYPE *chooseFilename )( 
            IWebOpenPanelResultListener * This,
            /* [retval][out] */ BSTR *fileName);
        
        HRESULT ( STDMETHODCALLTYPE *cancel )( 
            IWebOpenPanelResultListener * This);
        
        END_INTERFACE
    } IWebOpenPanelResultListenerVtbl;

    interface IWebOpenPanelResultListener
    {
        CONST_VTBL struct IWebOpenPanelResultListenerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebOpenPanelResultListener_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebOpenPanelResultListener_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebOpenPanelResultListener_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebOpenPanelResultListener_chooseFilename(This,fileName)	\
    ( (This)->lpVtbl -> chooseFilename(This,fileName) ) 

#define IWebOpenPanelResultListener_cancel(This)	\
    ( (This)->lpVtbl -> cancel(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebOpenPanelResultListener_INTERFACE_DEFINED__ */


#ifndef __IWebUIDelegate_INTERFACE_DEFINED__
#define __IWebUIDelegate_INTERFACE_DEFINED__

/* interface IWebUIDelegate */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebUIDelegate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("042B7EE3-A5A4-4a8f-8C33-775CD9E89C7C")
    IWebUIDelegate : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE createWebViewWithRequest( 
            /* [in] */ IWebView *sender,
            /* [in] */ IWebURLRequest *request,
            /* [retval][out] */ IWebView **newWebView) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE webViewShow( 
            /* [in] */ IWebView *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE webViewClose( 
            /* [in] */ IWebView *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE webViewFocus( 
            /* [in] */ IWebView *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE webViewUnfocus( 
            /* [in] */ IWebView *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE webViewFirstResponder( 
            /* [in] */ IWebView *sender,
            /* [retval][out] */ OLE_HANDLE *responderHWnd) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE makeFirstResponder( 
            /* [in] */ IWebView *sender,
            /* [in] */ OLE_HANDLE responderHWnd) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setStatusText( 
            /* [in] */ IWebView *sender,
            /* [in] */ BSTR text) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE webViewStatusText( 
            /* [in] */ IWebView *sender,
            /* [retval][out] */ BSTR *text) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE webViewAreToolbarsVisible( 
            /* [in] */ IWebView *sender,
            /* [retval][out] */ BOOL *visible) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setToolbarsVisible( 
            /* [in] */ IWebView *sender,
            /* [in] */ BOOL visible) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE webViewIsStatusBarVisible( 
            /* [in] */ IWebView *sender,
            /* [retval][out] */ BOOL *visible) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setStatusBarVisible( 
            /* [in] */ IWebView *sender,
            /* [in] */ BOOL visible) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE webViewIsResizable( 
            /* [in] */ IWebView *sender,
            /* [retval][out] */ BOOL *resizable) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setResizable( 
            /* [in] */ IWebView *sender,
            /* [in] */ BOOL resizable) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setFrame( 
            /* [in] */ IWebView *sender,
            /* [in] */ RECT *frame) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE webViewFrame( 
            /* [in] */ IWebView *sender,
            /* [retval][out] */ RECT *frame) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setContentRect( 
            /* [in] */ IWebView *sender,
            /* [in] */ RECT *contentRect) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE webViewContentRect( 
            /* [in] */ IWebView *sender,
            /* [retval][out] */ RECT *contentRect) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE runJavaScriptAlertPanelWithMessage( 
            /* [in] */ IWebView *sender,
            /* [in] */ BSTR message) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE runJavaScriptConfirmPanelWithMessage( 
            /* [in] */ IWebView *sender,
            /* [in] */ BSTR message,
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE runJavaScriptTextInputPanelWithPrompt( 
            /* [in] */ IWebView *sender,
            /* [in] */ BSTR message,
            /* [in] */ BSTR defaultText,
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE runBeforeUnloadConfirmPanelWithMessage( 
            /* [in] */ IWebView *sender,
            /* [in] */ BSTR message,
            /* [in] */ IWebFrame *initiatedByFrame,
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE runOpenPanelForFileButtonWithResultListener( 
            /* [in] */ IWebView *sender,
            /* [in] */ IWebOpenPanelResultListener *resultListener) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE mouseDidMoveOverElement( 
            /* [in] */ IWebView *sender,
            /* [in] */ IPropertyBag *elementInformation,
            /* [in] */ UINT modifierFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE contextMenuItemsForElement( 
            /* [in] */ IWebView *sender,
            /* [in] */ IPropertyBag *element,
            /* [in] */ OLE_HANDLE defaultItemsHMenu,
            /* [retval][out] */ OLE_HANDLE *resultHMenu) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE validateUserInterfaceItem( 
            /* [in] */ IWebView *webView,
            /* [in] */ UINT itemCommandID,
            /* [in] */ BOOL defaultValidation,
            /* [retval][out] */ BOOL *isValid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE shouldPerformAction( 
            /* [in] */ IWebView *webView,
            /* [in] */ UINT itemCommandID,
            /* [in] */ UINT sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE dragDestinationActionMaskForDraggingInfo( 
            /* [in] */ IWebView *webView,
            /* [in] */ IDataObject *draggingInfo,
            /* [retval][out] */ WebDragDestinationAction *action) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE willPerformDragDestinationAction( 
            /* [in] */ IWebView *webView,
            /* [in] */ WebDragDestinationAction action,
            /* [in] */ IDataObject *draggingInfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE dragSourceActionMaskForPoint( 
            /* [in] */ IWebView *webView,
            /* [in] */ LPPOINT point,
            /* [retval][out] */ WebDragSourceAction *action) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE willPerformDragSourceAction( 
            /* [in] */ IWebView *webView,
            /* [in] */ WebDragSourceAction action,
            /* [in] */ LPPOINT point,
            /* [in] */ IDataObject *pasteboard,
            /* [retval][out] */ IDataObject **newPasteboard) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE contextMenuItemSelected( 
            /* [in] */ IWebView *sender,
            /* [in] */ void *item,
            /* [in] */ IPropertyBag *element) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE hasCustomMenuImplementation( 
            /* [retval][out] */ BOOL *hasCustomMenus) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE trackCustomPopupMenu( 
            /* [in] */ IWebView *sender,
            /* [in] */ OLE_HANDLE hMenu,
            /* [in] */ LPPOINT point) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE measureCustomMenuItem( 
            /* [in] */ IWebView *sender,
            /* [in] */ void *measureItem) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE drawCustomMenuItem( 
            /* [in] */ IWebView *sender,
            /* [in] */ void *drawItem) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE addCustomMenuDrawingData( 
            /* [in] */ IWebView *sender,
            /* [in] */ OLE_HANDLE hMenu) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE cleanUpCustomMenuDrawingData( 
            /* [in] */ IWebView *sender,
            /* [in] */ OLE_HANDLE hMenu) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE canTakeFocus( 
            /* [in] */ IWebView *sender,
            /* [in] */ BOOL forward,
            /* [out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE takeFocus( 
            /* [in] */ IWebView *sender,
            /* [in] */ BOOL forward) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE registerUndoWithTarget( 
            /* [in] */ IWebUndoTarget *target,
            /* [in] */ BSTR actionName,
            /* [in] */ IUnknown *actionArg) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE removeAllActionsWithTarget( 
            /* [in] */ IWebUndoTarget *target) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setActionTitle( 
            /* [in] */ BSTR actionTitle) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE undo( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE redo( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE canUndo( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE canRedo( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE printFrame( 
            /* [in] */ IWebView *webView,
            /* [in] */ IWebFrame *frame) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ftpDirectoryTemplatePath( 
            /* [in] */ IWebView *webView,
            /* [retval][out] */ BSTR *path) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE webViewHeaderHeight( 
            /* [in] */ IWebView *webView,
            /* [retval][out] */ float *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE webViewFooterHeight( 
            /* [in] */ IWebView *webView,
            /* [retval][out] */ float *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE drawHeaderInRect( 
            /* [in] */ IWebView *webView,
            /* [in] */ RECT *rect,
            /* [in] */ OLE_HANDLE drawingContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE drawFooterInRect( 
            /* [in] */ IWebView *webView,
            /* [in] */ RECT *rect,
            /* [in] */ OLE_HANDLE drawingContext,
            /* [in] */ UINT pageIndex,
            /* [in] */ UINT pageCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE webViewPrintingMarginRect( 
            /* [in] */ IWebView *webView,
            /* [retval][out] */ RECT *rect) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE canRunModal( 
            /* [in] */ IWebView *webView,
            /* [retval][out] */ BOOL *canRunBoolean) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE createModalDialog( 
            /* [in] */ IWebView *sender,
            /* [in] */ IWebURLRequest *request,
            /* [retval][out] */ IWebView **newWebView) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE runModal( 
            /* [in] */ IWebView *webView) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isMenuBarVisible( 
            /* [in] */ IWebView *webView,
            /* [retval][out] */ BOOL *visible) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setMenuBarVisible( 
            /* [in] */ IWebView *webView,
            /* [in] */ BOOL visible) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE runDatabaseSizeLimitPrompt( 
            /* [in] */ IWebView *webView,
            /* [in] */ BSTR displayName,
            /* [in] */ IWebFrame *initiatedByFrame,
            /* [retval][out] */ BOOL *allowed) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE paintCustomScrollbar( 
            /* [in] */ IWebView *webView,
            /* [in] */ HDC hDC,
            /* [in] */ RECT rect,
            /* [in] */ WebScrollBarControlSize size,
            /* [in] */ WebScrollbarControlState state,
            /* [in] */ WebScrollbarControlPart pressedPart,
            /* [in] */ BOOL vertical,
            /* [in] */ float value,
            /* [in] */ float proportion,
            /* [in] */ WebScrollbarControlPartMask parts) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE paintCustomScrollCorner( 
            /* [in] */ IWebView *webView,
            /* [in] */ HDC hDC,
            /* [in] */ RECT rect) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebUIDelegateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebUIDelegate * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebUIDelegate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebUIDelegate * This);
        
        HRESULT ( STDMETHODCALLTYPE *createWebViewWithRequest )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *sender,
            /* [in] */ IWebURLRequest *request,
            /* [retval][out] */ IWebView **newWebView);
        
        HRESULT ( STDMETHODCALLTYPE *webViewShow )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *sender);
        
        HRESULT ( STDMETHODCALLTYPE *webViewClose )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *sender);
        
        HRESULT ( STDMETHODCALLTYPE *webViewFocus )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *sender);
        
        HRESULT ( STDMETHODCALLTYPE *webViewUnfocus )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *sender);
        
        HRESULT ( STDMETHODCALLTYPE *webViewFirstResponder )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *sender,
            /* [retval][out] */ OLE_HANDLE *responderHWnd);
        
        HRESULT ( STDMETHODCALLTYPE *makeFirstResponder )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *sender,
            /* [in] */ OLE_HANDLE responderHWnd);
        
        HRESULT ( STDMETHODCALLTYPE *setStatusText )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *sender,
            /* [in] */ BSTR text);
        
        HRESULT ( STDMETHODCALLTYPE *webViewStatusText )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *sender,
            /* [retval][out] */ BSTR *text);
        
        HRESULT ( STDMETHODCALLTYPE *webViewAreToolbarsVisible )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *sender,
            /* [retval][out] */ BOOL *visible);
        
        HRESULT ( STDMETHODCALLTYPE *setToolbarsVisible )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *sender,
            /* [in] */ BOOL visible);
        
        HRESULT ( STDMETHODCALLTYPE *webViewIsStatusBarVisible )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *sender,
            /* [retval][out] */ BOOL *visible);
        
        HRESULT ( STDMETHODCALLTYPE *setStatusBarVisible )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *sender,
            /* [in] */ BOOL visible);
        
        HRESULT ( STDMETHODCALLTYPE *webViewIsResizable )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *sender,
            /* [retval][out] */ BOOL *resizable);
        
        HRESULT ( STDMETHODCALLTYPE *setResizable )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *sender,
            /* [in] */ BOOL resizable);
        
        HRESULT ( STDMETHODCALLTYPE *setFrame )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *sender,
            /* [in] */ RECT *frame);
        
        HRESULT ( STDMETHODCALLTYPE *webViewFrame )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *sender,
            /* [retval][out] */ RECT *frame);
        
        HRESULT ( STDMETHODCALLTYPE *setContentRect )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *sender,
            /* [in] */ RECT *contentRect);
        
        HRESULT ( STDMETHODCALLTYPE *webViewContentRect )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *sender,
            /* [retval][out] */ RECT *contentRect);
        
        HRESULT ( STDMETHODCALLTYPE *runJavaScriptAlertPanelWithMessage )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *sender,
            /* [in] */ BSTR message);
        
        HRESULT ( STDMETHODCALLTYPE *runJavaScriptConfirmPanelWithMessage )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *sender,
            /* [in] */ BSTR message,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *runJavaScriptTextInputPanelWithPrompt )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *sender,
            /* [in] */ BSTR message,
            /* [in] */ BSTR defaultText,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *runBeforeUnloadConfirmPanelWithMessage )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *sender,
            /* [in] */ BSTR message,
            /* [in] */ IWebFrame *initiatedByFrame,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *runOpenPanelForFileButtonWithResultListener )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *sender,
            /* [in] */ IWebOpenPanelResultListener *resultListener);
        
        HRESULT ( STDMETHODCALLTYPE *mouseDidMoveOverElement )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *sender,
            /* [in] */ IPropertyBag *elementInformation,
            /* [in] */ UINT modifierFlags);
        
        HRESULT ( STDMETHODCALLTYPE *contextMenuItemsForElement )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *sender,
            /* [in] */ IPropertyBag *element,
            /* [in] */ OLE_HANDLE defaultItemsHMenu,
            /* [retval][out] */ OLE_HANDLE *resultHMenu);
        
        HRESULT ( STDMETHODCALLTYPE *validateUserInterfaceItem )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ UINT itemCommandID,
            /* [in] */ BOOL defaultValidation,
            /* [retval][out] */ BOOL *isValid);
        
        HRESULT ( STDMETHODCALLTYPE *shouldPerformAction )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ UINT itemCommandID,
            /* [in] */ UINT sender);
        
        HRESULT ( STDMETHODCALLTYPE *dragDestinationActionMaskForDraggingInfo )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ IDataObject *draggingInfo,
            /* [retval][out] */ WebDragDestinationAction *action);
        
        HRESULT ( STDMETHODCALLTYPE *willPerformDragDestinationAction )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ WebDragDestinationAction action,
            /* [in] */ IDataObject *draggingInfo);
        
        HRESULT ( STDMETHODCALLTYPE *dragSourceActionMaskForPoint )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ LPPOINT point,
            /* [retval][out] */ WebDragSourceAction *action);
        
        HRESULT ( STDMETHODCALLTYPE *willPerformDragSourceAction )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ WebDragSourceAction action,
            /* [in] */ LPPOINT point,
            /* [in] */ IDataObject *pasteboard,
            /* [retval][out] */ IDataObject **newPasteboard);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *contextMenuItemSelected )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *sender,
            /* [in] */ void *item,
            /* [in] */ IPropertyBag *element);
        
        HRESULT ( STDMETHODCALLTYPE *hasCustomMenuImplementation )( 
            IWebUIDelegate * This,
            /* [retval][out] */ BOOL *hasCustomMenus);
        
        HRESULT ( STDMETHODCALLTYPE *trackCustomPopupMenu )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *sender,
            /* [in] */ OLE_HANDLE hMenu,
            /* [in] */ LPPOINT point);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *measureCustomMenuItem )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *sender,
            /* [in] */ void *measureItem);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *drawCustomMenuItem )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *sender,
            /* [in] */ void *drawItem);
        
        HRESULT ( STDMETHODCALLTYPE *addCustomMenuDrawingData )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *sender,
            /* [in] */ OLE_HANDLE hMenu);
        
        HRESULT ( STDMETHODCALLTYPE *cleanUpCustomMenuDrawingData )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *sender,
            /* [in] */ OLE_HANDLE hMenu);
        
        HRESULT ( STDMETHODCALLTYPE *canTakeFocus )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *sender,
            /* [in] */ BOOL forward,
            /* [out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *takeFocus )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *sender,
            /* [in] */ BOOL forward);
        
        HRESULT ( STDMETHODCALLTYPE *registerUndoWithTarget )( 
            IWebUIDelegate * This,
            /* [in] */ IWebUndoTarget *target,
            /* [in] */ BSTR actionName,
            /* [in] */ IUnknown *actionArg);
        
        HRESULT ( STDMETHODCALLTYPE *removeAllActionsWithTarget )( 
            IWebUIDelegate * This,
            /* [in] */ IWebUndoTarget *target);
        
        HRESULT ( STDMETHODCALLTYPE *setActionTitle )( 
            IWebUIDelegate * This,
            /* [in] */ BSTR actionTitle);
        
        HRESULT ( STDMETHODCALLTYPE *undo )( 
            IWebUIDelegate * This);
        
        HRESULT ( STDMETHODCALLTYPE *redo )( 
            IWebUIDelegate * This);
        
        HRESULT ( STDMETHODCALLTYPE *canUndo )( 
            IWebUIDelegate * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *canRedo )( 
            IWebUIDelegate * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *printFrame )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ IWebFrame *frame);
        
        HRESULT ( STDMETHODCALLTYPE *ftpDirectoryTemplatePath )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *webView,
            /* [retval][out] */ BSTR *path);
        
        HRESULT ( STDMETHODCALLTYPE *webViewHeaderHeight )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *webView,
            /* [retval][out] */ float *result);
        
        HRESULT ( STDMETHODCALLTYPE *webViewFooterHeight )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *webView,
            /* [retval][out] */ float *result);
        
        HRESULT ( STDMETHODCALLTYPE *drawHeaderInRect )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ RECT *rect,
            /* [in] */ OLE_HANDLE drawingContext);
        
        HRESULT ( STDMETHODCALLTYPE *drawFooterInRect )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ RECT *rect,
            /* [in] */ OLE_HANDLE drawingContext,
            /* [in] */ UINT pageIndex,
            /* [in] */ UINT pageCount);
        
        HRESULT ( STDMETHODCALLTYPE *webViewPrintingMarginRect )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *webView,
            /* [retval][out] */ RECT *rect);
        
        HRESULT ( STDMETHODCALLTYPE *canRunModal )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *webView,
            /* [retval][out] */ BOOL *canRunBoolean);
        
        HRESULT ( STDMETHODCALLTYPE *createModalDialog )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *sender,
            /* [in] */ IWebURLRequest *request,
            /* [retval][out] */ IWebView **newWebView);
        
        HRESULT ( STDMETHODCALLTYPE *runModal )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *webView);
        
        HRESULT ( STDMETHODCALLTYPE *isMenuBarVisible )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *webView,
            /* [retval][out] */ BOOL *visible);
        
        HRESULT ( STDMETHODCALLTYPE *setMenuBarVisible )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ BOOL visible);
        
        HRESULT ( STDMETHODCALLTYPE *runDatabaseSizeLimitPrompt )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ BSTR displayName,
            /* [in] */ IWebFrame *initiatedByFrame,
            /* [retval][out] */ BOOL *allowed);
        
        HRESULT ( STDMETHODCALLTYPE *paintCustomScrollbar )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ HDC hDC,
            /* [in] */ RECT rect,
            /* [in] */ WebScrollBarControlSize size,
            /* [in] */ WebScrollbarControlState state,
            /* [in] */ WebScrollbarControlPart pressedPart,
            /* [in] */ BOOL vertical,
            /* [in] */ float value,
            /* [in] */ float proportion,
            /* [in] */ WebScrollbarControlPartMask parts);
        
        HRESULT ( STDMETHODCALLTYPE *paintCustomScrollCorner )( 
            IWebUIDelegate * This,
            /* [in] */ IWebView *webView,
            /* [in] */ HDC hDC,
            /* [in] */ RECT rect);
        
        END_INTERFACE
    } IWebUIDelegateVtbl;

    interface IWebUIDelegate
    {
        CONST_VTBL struct IWebUIDelegateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebUIDelegate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebUIDelegate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebUIDelegate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebUIDelegate_createWebViewWithRequest(This,sender,request,newWebView)	\
    ( (This)->lpVtbl -> createWebViewWithRequest(This,sender,request,newWebView) ) 

#define IWebUIDelegate_webViewShow(This,sender)	\
    ( (This)->lpVtbl -> webViewShow(This,sender) ) 

#define IWebUIDelegate_webViewClose(This,sender)	\
    ( (This)->lpVtbl -> webViewClose(This,sender) ) 

#define IWebUIDelegate_webViewFocus(This,sender)	\
    ( (This)->lpVtbl -> webViewFocus(This,sender) ) 

#define IWebUIDelegate_webViewUnfocus(This,sender)	\
    ( (This)->lpVtbl -> webViewUnfocus(This,sender) ) 

#define IWebUIDelegate_webViewFirstResponder(This,sender,responderHWnd)	\
    ( (This)->lpVtbl -> webViewFirstResponder(This,sender,responderHWnd) ) 

#define IWebUIDelegate_makeFirstResponder(This,sender,responderHWnd)	\
    ( (This)->lpVtbl -> makeFirstResponder(This,sender,responderHWnd) ) 

#define IWebUIDelegate_setStatusText(This,sender,text)	\
    ( (This)->lpVtbl -> setStatusText(This,sender,text) ) 

#define IWebUIDelegate_webViewStatusText(This,sender,text)	\
    ( (This)->lpVtbl -> webViewStatusText(This,sender,text) ) 

#define IWebUIDelegate_webViewAreToolbarsVisible(This,sender,visible)	\
    ( (This)->lpVtbl -> webViewAreToolbarsVisible(This,sender,visible) ) 

#define IWebUIDelegate_setToolbarsVisible(This,sender,visible)	\
    ( (This)->lpVtbl -> setToolbarsVisible(This,sender,visible) ) 

#define IWebUIDelegate_webViewIsStatusBarVisible(This,sender,visible)	\
    ( (This)->lpVtbl -> webViewIsStatusBarVisible(This,sender,visible) ) 

#define IWebUIDelegate_setStatusBarVisible(This,sender,visible)	\
    ( (This)->lpVtbl -> setStatusBarVisible(This,sender,visible) ) 

#define IWebUIDelegate_webViewIsResizable(This,sender,resizable)	\
    ( (This)->lpVtbl -> webViewIsResizable(This,sender,resizable) ) 

#define IWebUIDelegate_setResizable(This,sender,resizable)	\
    ( (This)->lpVtbl -> setResizable(This,sender,resizable) ) 

#define IWebUIDelegate_setFrame(This,sender,frame)	\
    ( (This)->lpVtbl -> setFrame(This,sender,frame) ) 

#define IWebUIDelegate_webViewFrame(This,sender,frame)	\
    ( (This)->lpVtbl -> webViewFrame(This,sender,frame) ) 

#define IWebUIDelegate_setContentRect(This,sender,contentRect)	\
    ( (This)->lpVtbl -> setContentRect(This,sender,contentRect) ) 

#define IWebUIDelegate_webViewContentRect(This,sender,contentRect)	\
    ( (This)->lpVtbl -> webViewContentRect(This,sender,contentRect) ) 

#define IWebUIDelegate_runJavaScriptAlertPanelWithMessage(This,sender,message)	\
    ( (This)->lpVtbl -> runJavaScriptAlertPanelWithMessage(This,sender,message) ) 

#define IWebUIDelegate_runJavaScriptConfirmPanelWithMessage(This,sender,message,result)	\
    ( (This)->lpVtbl -> runJavaScriptConfirmPanelWithMessage(This,sender,message,result) ) 

#define IWebUIDelegate_runJavaScriptTextInputPanelWithPrompt(This,sender,message,defaultText,result)	\
    ( (This)->lpVtbl -> runJavaScriptTextInputPanelWithPrompt(This,sender,message,defaultText,result) ) 

#define IWebUIDelegate_runBeforeUnloadConfirmPanelWithMessage(This,sender,message,initiatedByFrame,result)	\
    ( (This)->lpVtbl -> runBeforeUnloadConfirmPanelWithMessage(This,sender,message,initiatedByFrame,result) ) 

#define IWebUIDelegate_runOpenPanelForFileButtonWithResultListener(This,sender,resultListener)	\
    ( (This)->lpVtbl -> runOpenPanelForFileButtonWithResultListener(This,sender,resultListener) ) 

#define IWebUIDelegate_mouseDidMoveOverElement(This,sender,elementInformation,modifierFlags)	\
    ( (This)->lpVtbl -> mouseDidMoveOverElement(This,sender,elementInformation,modifierFlags) ) 

#define IWebUIDelegate_contextMenuItemsForElement(This,sender,element,defaultItemsHMenu,resultHMenu)	\
    ( (This)->lpVtbl -> contextMenuItemsForElement(This,sender,element,defaultItemsHMenu,resultHMenu) ) 

#define IWebUIDelegate_validateUserInterfaceItem(This,webView,itemCommandID,defaultValidation,isValid)	\
    ( (This)->lpVtbl -> validateUserInterfaceItem(This,webView,itemCommandID,defaultValidation,isValid) ) 

#define IWebUIDelegate_shouldPerformAction(This,webView,itemCommandID,sender)	\
    ( (This)->lpVtbl -> shouldPerformAction(This,webView,itemCommandID,sender) ) 

#define IWebUIDelegate_dragDestinationActionMaskForDraggingInfo(This,webView,draggingInfo,action)	\
    ( (This)->lpVtbl -> dragDestinationActionMaskForDraggingInfo(This,webView,draggingInfo,action) ) 

#define IWebUIDelegate_willPerformDragDestinationAction(This,webView,action,draggingInfo)	\
    ( (This)->lpVtbl -> willPerformDragDestinationAction(This,webView,action,draggingInfo) ) 

#define IWebUIDelegate_dragSourceActionMaskForPoint(This,webView,point,action)	\
    ( (This)->lpVtbl -> dragSourceActionMaskForPoint(This,webView,point,action) ) 

#define IWebUIDelegate_willPerformDragSourceAction(This,webView,action,point,pasteboard,newPasteboard)	\
    ( (This)->lpVtbl -> willPerformDragSourceAction(This,webView,action,point,pasteboard,newPasteboard) ) 

#define IWebUIDelegate_contextMenuItemSelected(This,sender,item,element)	\
    ( (This)->lpVtbl -> contextMenuItemSelected(This,sender,item,element) ) 

#define IWebUIDelegate_hasCustomMenuImplementation(This,hasCustomMenus)	\
    ( (This)->lpVtbl -> hasCustomMenuImplementation(This,hasCustomMenus) ) 

#define IWebUIDelegate_trackCustomPopupMenu(This,sender,hMenu,point)	\
    ( (This)->lpVtbl -> trackCustomPopupMenu(This,sender,hMenu,point) ) 

#define IWebUIDelegate_measureCustomMenuItem(This,sender,measureItem)	\
    ( (This)->lpVtbl -> measureCustomMenuItem(This,sender,measureItem) ) 

#define IWebUIDelegate_drawCustomMenuItem(This,sender,drawItem)	\
    ( (This)->lpVtbl -> drawCustomMenuItem(This,sender,drawItem) ) 

#define IWebUIDelegate_addCustomMenuDrawingData(This,sender,hMenu)	\
    ( (This)->lpVtbl -> addCustomMenuDrawingData(This,sender,hMenu) ) 

#define IWebUIDelegate_cleanUpCustomMenuDrawingData(This,sender,hMenu)	\
    ( (This)->lpVtbl -> cleanUpCustomMenuDrawingData(This,sender,hMenu) ) 

#define IWebUIDelegate_canTakeFocus(This,sender,forward,result)	\
    ( (This)->lpVtbl -> canTakeFocus(This,sender,forward,result) ) 

#define IWebUIDelegate_takeFocus(This,sender,forward)	\
    ( (This)->lpVtbl -> takeFocus(This,sender,forward) ) 

#define IWebUIDelegate_registerUndoWithTarget(This,target,actionName,actionArg)	\
    ( (This)->lpVtbl -> registerUndoWithTarget(This,target,actionName,actionArg) ) 

#define IWebUIDelegate_removeAllActionsWithTarget(This,target)	\
    ( (This)->lpVtbl -> removeAllActionsWithTarget(This,target) ) 

#define IWebUIDelegate_setActionTitle(This,actionTitle)	\
    ( (This)->lpVtbl -> setActionTitle(This,actionTitle) ) 

#define IWebUIDelegate_undo(This)	\
    ( (This)->lpVtbl -> undo(This) ) 

#define IWebUIDelegate_redo(This)	\
    ( (This)->lpVtbl -> redo(This) ) 

#define IWebUIDelegate_canUndo(This,result)	\
    ( (This)->lpVtbl -> canUndo(This,result) ) 

#define IWebUIDelegate_canRedo(This,result)	\
    ( (This)->lpVtbl -> canRedo(This,result) ) 

#define IWebUIDelegate_printFrame(This,webView,frame)	\
    ( (This)->lpVtbl -> printFrame(This,webView,frame) ) 

#define IWebUIDelegate_ftpDirectoryTemplatePath(This,webView,path)	\
    ( (This)->lpVtbl -> ftpDirectoryTemplatePath(This,webView,path) ) 

#define IWebUIDelegate_webViewHeaderHeight(This,webView,result)	\
    ( (This)->lpVtbl -> webViewHeaderHeight(This,webView,result) ) 

#define IWebUIDelegate_webViewFooterHeight(This,webView,result)	\
    ( (This)->lpVtbl -> webViewFooterHeight(This,webView,result) ) 

#define IWebUIDelegate_drawHeaderInRect(This,webView,rect,drawingContext)	\
    ( (This)->lpVtbl -> drawHeaderInRect(This,webView,rect,drawingContext) ) 

#define IWebUIDelegate_drawFooterInRect(This,webView,rect,drawingContext,pageIndex,pageCount)	\
    ( (This)->lpVtbl -> drawFooterInRect(This,webView,rect,drawingContext,pageIndex,pageCount) ) 

#define IWebUIDelegate_webViewPrintingMarginRect(This,webView,rect)	\
    ( (This)->lpVtbl -> webViewPrintingMarginRect(This,webView,rect) ) 

#define IWebUIDelegate_canRunModal(This,webView,canRunBoolean)	\
    ( (This)->lpVtbl -> canRunModal(This,webView,canRunBoolean) ) 

#define IWebUIDelegate_createModalDialog(This,sender,request,newWebView)	\
    ( (This)->lpVtbl -> createModalDialog(This,sender,request,newWebView) ) 

#define IWebUIDelegate_runModal(This,webView)	\
    ( (This)->lpVtbl -> runModal(This,webView) ) 

#define IWebUIDelegate_isMenuBarVisible(This,webView,visible)	\
    ( (This)->lpVtbl -> isMenuBarVisible(This,webView,visible) ) 

#define IWebUIDelegate_setMenuBarVisible(This,webView,visible)	\
    ( (This)->lpVtbl -> setMenuBarVisible(This,webView,visible) ) 

#define IWebUIDelegate_runDatabaseSizeLimitPrompt(This,webView,displayName,initiatedByFrame,allowed)	\
    ( (This)->lpVtbl -> runDatabaseSizeLimitPrompt(This,webView,displayName,initiatedByFrame,allowed) ) 

#define IWebUIDelegate_paintCustomScrollbar(This,webView,hDC,rect,size,state,pressedPart,vertical,value,proportion,parts)	\
    ( (This)->lpVtbl -> paintCustomScrollbar(This,webView,hDC,rect,size,state,pressedPart,vertical,value,proportion,parts) ) 

#define IWebUIDelegate_paintCustomScrollCorner(This,webView,hDC,rect)	\
    ( (This)->lpVtbl -> paintCustomScrollCorner(This,webView,hDC,rect) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebUIDelegate_INTERFACE_DEFINED__ */


#ifndef __IWebUIDelegate2_INTERFACE_DEFINED__
#define __IWebUIDelegate2_INTERFACE_DEFINED__

/* interface IWebUIDelegate2 */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebUIDelegate2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C6DEF152-86CD-11de-8BF4-ADD456D89593")
    IWebUIDelegate2 : public IWebUIDelegate
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE desktopNotificationsDelegate( 
            /* [retval][out] */ IWebDesktopNotificationsDelegate **result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebUIDelegate2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebUIDelegate2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebUIDelegate2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebUIDelegate2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *createWebViewWithRequest )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ IWebURLRequest *request,
            /* [retval][out] */ IWebView **newWebView);
        
        HRESULT ( STDMETHODCALLTYPE *webViewShow )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *sender);
        
        HRESULT ( STDMETHODCALLTYPE *webViewClose )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *sender);
        
        HRESULT ( STDMETHODCALLTYPE *webViewFocus )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *sender);
        
        HRESULT ( STDMETHODCALLTYPE *webViewUnfocus )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *sender);
        
        HRESULT ( STDMETHODCALLTYPE *webViewFirstResponder )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *sender,
            /* [retval][out] */ OLE_HANDLE *responderHWnd);
        
        HRESULT ( STDMETHODCALLTYPE *makeFirstResponder )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ OLE_HANDLE responderHWnd);
        
        HRESULT ( STDMETHODCALLTYPE *setStatusText )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ BSTR text);
        
        HRESULT ( STDMETHODCALLTYPE *webViewStatusText )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *sender,
            /* [retval][out] */ BSTR *text);
        
        HRESULT ( STDMETHODCALLTYPE *webViewAreToolbarsVisible )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *sender,
            /* [retval][out] */ BOOL *visible);
        
        HRESULT ( STDMETHODCALLTYPE *setToolbarsVisible )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ BOOL visible);
        
        HRESULT ( STDMETHODCALLTYPE *webViewIsStatusBarVisible )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *sender,
            /* [retval][out] */ BOOL *visible);
        
        HRESULT ( STDMETHODCALLTYPE *setStatusBarVisible )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ BOOL visible);
        
        HRESULT ( STDMETHODCALLTYPE *webViewIsResizable )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *sender,
            /* [retval][out] */ BOOL *resizable);
        
        HRESULT ( STDMETHODCALLTYPE *setResizable )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ BOOL resizable);
        
        HRESULT ( STDMETHODCALLTYPE *setFrame )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ RECT *frame);
        
        HRESULT ( STDMETHODCALLTYPE *webViewFrame )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *sender,
            /* [retval][out] */ RECT *frame);
        
        HRESULT ( STDMETHODCALLTYPE *setContentRect )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ RECT *contentRect);
        
        HRESULT ( STDMETHODCALLTYPE *webViewContentRect )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *sender,
            /* [retval][out] */ RECT *contentRect);
        
        HRESULT ( STDMETHODCALLTYPE *runJavaScriptAlertPanelWithMessage )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ BSTR message);
        
        HRESULT ( STDMETHODCALLTYPE *runJavaScriptConfirmPanelWithMessage )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ BSTR message,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *runJavaScriptTextInputPanelWithPrompt )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ BSTR message,
            /* [in] */ BSTR defaultText,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *runBeforeUnloadConfirmPanelWithMessage )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ BSTR message,
            /* [in] */ IWebFrame *initiatedByFrame,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *runOpenPanelForFileButtonWithResultListener )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ IWebOpenPanelResultListener *resultListener);
        
        HRESULT ( STDMETHODCALLTYPE *mouseDidMoveOverElement )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ IPropertyBag *elementInformation,
            /* [in] */ UINT modifierFlags);
        
        HRESULT ( STDMETHODCALLTYPE *contextMenuItemsForElement )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ IPropertyBag *element,
            /* [in] */ OLE_HANDLE defaultItemsHMenu,
            /* [retval][out] */ OLE_HANDLE *resultHMenu);
        
        HRESULT ( STDMETHODCALLTYPE *validateUserInterfaceItem )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *webView,
            /* [in] */ UINT itemCommandID,
            /* [in] */ BOOL defaultValidation,
            /* [retval][out] */ BOOL *isValid);
        
        HRESULT ( STDMETHODCALLTYPE *shouldPerformAction )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *webView,
            /* [in] */ UINT itemCommandID,
            /* [in] */ UINT sender);
        
        HRESULT ( STDMETHODCALLTYPE *dragDestinationActionMaskForDraggingInfo )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *webView,
            /* [in] */ IDataObject *draggingInfo,
            /* [retval][out] */ WebDragDestinationAction *action);
        
        HRESULT ( STDMETHODCALLTYPE *willPerformDragDestinationAction )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *webView,
            /* [in] */ WebDragDestinationAction action,
            /* [in] */ IDataObject *draggingInfo);
        
        HRESULT ( STDMETHODCALLTYPE *dragSourceActionMaskForPoint )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *webView,
            /* [in] */ LPPOINT point,
            /* [retval][out] */ WebDragSourceAction *action);
        
        HRESULT ( STDMETHODCALLTYPE *willPerformDragSourceAction )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *webView,
            /* [in] */ WebDragSourceAction action,
            /* [in] */ LPPOINT point,
            /* [in] */ IDataObject *pasteboard,
            /* [retval][out] */ IDataObject **newPasteboard);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *contextMenuItemSelected )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ void *item,
            /* [in] */ IPropertyBag *element);
        
        HRESULT ( STDMETHODCALLTYPE *hasCustomMenuImplementation )( 
            IWebUIDelegate2 * This,
            /* [retval][out] */ BOOL *hasCustomMenus);
        
        HRESULT ( STDMETHODCALLTYPE *trackCustomPopupMenu )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ OLE_HANDLE hMenu,
            /* [in] */ LPPOINT point);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *measureCustomMenuItem )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ void *measureItem);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *drawCustomMenuItem )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ void *drawItem);
        
        HRESULT ( STDMETHODCALLTYPE *addCustomMenuDrawingData )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ OLE_HANDLE hMenu);
        
        HRESULT ( STDMETHODCALLTYPE *cleanUpCustomMenuDrawingData )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ OLE_HANDLE hMenu);
        
        HRESULT ( STDMETHODCALLTYPE *canTakeFocus )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ BOOL forward,
            /* [out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *takeFocus )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ BOOL forward);
        
        HRESULT ( STDMETHODCALLTYPE *registerUndoWithTarget )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebUndoTarget *target,
            /* [in] */ BSTR actionName,
            /* [in] */ IUnknown *actionArg);
        
        HRESULT ( STDMETHODCALLTYPE *removeAllActionsWithTarget )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebUndoTarget *target);
        
        HRESULT ( STDMETHODCALLTYPE *setActionTitle )( 
            IWebUIDelegate2 * This,
            /* [in] */ BSTR actionTitle);
        
        HRESULT ( STDMETHODCALLTYPE *undo )( 
            IWebUIDelegate2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *redo )( 
            IWebUIDelegate2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *canUndo )( 
            IWebUIDelegate2 * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *canRedo )( 
            IWebUIDelegate2 * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *printFrame )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *webView,
            /* [in] */ IWebFrame *frame);
        
        HRESULT ( STDMETHODCALLTYPE *ftpDirectoryTemplatePath )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *webView,
            /* [retval][out] */ BSTR *path);
        
        HRESULT ( STDMETHODCALLTYPE *webViewHeaderHeight )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *webView,
            /* [retval][out] */ float *result);
        
        HRESULT ( STDMETHODCALLTYPE *webViewFooterHeight )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *webView,
            /* [retval][out] */ float *result);
        
        HRESULT ( STDMETHODCALLTYPE *drawHeaderInRect )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *webView,
            /* [in] */ RECT *rect,
            /* [in] */ OLE_HANDLE drawingContext);
        
        HRESULT ( STDMETHODCALLTYPE *drawFooterInRect )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *webView,
            /* [in] */ RECT *rect,
            /* [in] */ OLE_HANDLE drawingContext,
            /* [in] */ UINT pageIndex,
            /* [in] */ UINT pageCount);
        
        HRESULT ( STDMETHODCALLTYPE *webViewPrintingMarginRect )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *webView,
            /* [retval][out] */ RECT *rect);
        
        HRESULT ( STDMETHODCALLTYPE *canRunModal )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *webView,
            /* [retval][out] */ BOOL *canRunBoolean);
        
        HRESULT ( STDMETHODCALLTYPE *createModalDialog )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ IWebURLRequest *request,
            /* [retval][out] */ IWebView **newWebView);
        
        HRESULT ( STDMETHODCALLTYPE *runModal )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *webView);
        
        HRESULT ( STDMETHODCALLTYPE *isMenuBarVisible )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *webView,
            /* [retval][out] */ BOOL *visible);
        
        HRESULT ( STDMETHODCALLTYPE *setMenuBarVisible )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *webView,
            /* [in] */ BOOL visible);
        
        HRESULT ( STDMETHODCALLTYPE *runDatabaseSizeLimitPrompt )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *webView,
            /* [in] */ BSTR displayName,
            /* [in] */ IWebFrame *initiatedByFrame,
            /* [retval][out] */ BOOL *allowed);
        
        HRESULT ( STDMETHODCALLTYPE *paintCustomScrollbar )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *webView,
            /* [in] */ HDC hDC,
            /* [in] */ RECT rect,
            /* [in] */ WebScrollBarControlSize size,
            /* [in] */ WebScrollbarControlState state,
            /* [in] */ WebScrollbarControlPart pressedPart,
            /* [in] */ BOOL vertical,
            /* [in] */ float value,
            /* [in] */ float proportion,
            /* [in] */ WebScrollbarControlPartMask parts);
        
        HRESULT ( STDMETHODCALLTYPE *paintCustomScrollCorner )( 
            IWebUIDelegate2 * This,
            /* [in] */ IWebView *webView,
            /* [in] */ HDC hDC,
            /* [in] */ RECT rect);
        
        HRESULT ( STDMETHODCALLTYPE *desktopNotificationsDelegate )( 
            IWebUIDelegate2 * This,
            /* [retval][out] */ IWebDesktopNotificationsDelegate **result);
        
        END_INTERFACE
    } IWebUIDelegate2Vtbl;

    interface IWebUIDelegate2
    {
        CONST_VTBL struct IWebUIDelegate2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebUIDelegate2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebUIDelegate2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebUIDelegate2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebUIDelegate2_createWebViewWithRequest(This,sender,request,newWebView)	\
    ( (This)->lpVtbl -> createWebViewWithRequest(This,sender,request,newWebView) ) 

#define IWebUIDelegate2_webViewShow(This,sender)	\
    ( (This)->lpVtbl -> webViewShow(This,sender) ) 

#define IWebUIDelegate2_webViewClose(This,sender)	\
    ( (This)->lpVtbl -> webViewClose(This,sender) ) 

#define IWebUIDelegate2_webViewFocus(This,sender)	\
    ( (This)->lpVtbl -> webViewFocus(This,sender) ) 

#define IWebUIDelegate2_webViewUnfocus(This,sender)	\
    ( (This)->lpVtbl -> webViewUnfocus(This,sender) ) 

#define IWebUIDelegate2_webViewFirstResponder(This,sender,responderHWnd)	\
    ( (This)->lpVtbl -> webViewFirstResponder(This,sender,responderHWnd) ) 

#define IWebUIDelegate2_makeFirstResponder(This,sender,responderHWnd)	\
    ( (This)->lpVtbl -> makeFirstResponder(This,sender,responderHWnd) ) 

#define IWebUIDelegate2_setStatusText(This,sender,text)	\
    ( (This)->lpVtbl -> setStatusText(This,sender,text) ) 

#define IWebUIDelegate2_webViewStatusText(This,sender,text)	\
    ( (This)->lpVtbl -> webViewStatusText(This,sender,text) ) 

#define IWebUIDelegate2_webViewAreToolbarsVisible(This,sender,visible)	\
    ( (This)->lpVtbl -> webViewAreToolbarsVisible(This,sender,visible) ) 

#define IWebUIDelegate2_setToolbarsVisible(This,sender,visible)	\
    ( (This)->lpVtbl -> setToolbarsVisible(This,sender,visible) ) 

#define IWebUIDelegate2_webViewIsStatusBarVisible(This,sender,visible)	\
    ( (This)->lpVtbl -> webViewIsStatusBarVisible(This,sender,visible) ) 

#define IWebUIDelegate2_setStatusBarVisible(This,sender,visible)	\
    ( (This)->lpVtbl -> setStatusBarVisible(This,sender,visible) ) 

#define IWebUIDelegate2_webViewIsResizable(This,sender,resizable)	\
    ( (This)->lpVtbl -> webViewIsResizable(This,sender,resizable) ) 

#define IWebUIDelegate2_setResizable(This,sender,resizable)	\
    ( (This)->lpVtbl -> setResizable(This,sender,resizable) ) 

#define IWebUIDelegate2_setFrame(This,sender,frame)	\
    ( (This)->lpVtbl -> setFrame(This,sender,frame) ) 

#define IWebUIDelegate2_webViewFrame(This,sender,frame)	\
    ( (This)->lpVtbl -> webViewFrame(This,sender,frame) ) 

#define IWebUIDelegate2_setContentRect(This,sender,contentRect)	\
    ( (This)->lpVtbl -> setContentRect(This,sender,contentRect) ) 

#define IWebUIDelegate2_webViewContentRect(This,sender,contentRect)	\
    ( (This)->lpVtbl -> webViewContentRect(This,sender,contentRect) ) 

#define IWebUIDelegate2_runJavaScriptAlertPanelWithMessage(This,sender,message)	\
    ( (This)->lpVtbl -> runJavaScriptAlertPanelWithMessage(This,sender,message) ) 

#define IWebUIDelegate2_runJavaScriptConfirmPanelWithMessage(This,sender,message,result)	\
    ( (This)->lpVtbl -> runJavaScriptConfirmPanelWithMessage(This,sender,message,result) ) 

#define IWebUIDelegate2_runJavaScriptTextInputPanelWithPrompt(This,sender,message,defaultText,result)	\
    ( (This)->lpVtbl -> runJavaScriptTextInputPanelWithPrompt(This,sender,message,defaultText,result) ) 

#define IWebUIDelegate2_runBeforeUnloadConfirmPanelWithMessage(This,sender,message,initiatedByFrame,result)	\
    ( (This)->lpVtbl -> runBeforeUnloadConfirmPanelWithMessage(This,sender,message,initiatedByFrame,result) ) 

#define IWebUIDelegate2_runOpenPanelForFileButtonWithResultListener(This,sender,resultListener)	\
    ( (This)->lpVtbl -> runOpenPanelForFileButtonWithResultListener(This,sender,resultListener) ) 

#define IWebUIDelegate2_mouseDidMoveOverElement(This,sender,elementInformation,modifierFlags)	\
    ( (This)->lpVtbl -> mouseDidMoveOverElement(This,sender,elementInformation,modifierFlags) ) 

#define IWebUIDelegate2_contextMenuItemsForElement(This,sender,element,defaultItemsHMenu,resultHMenu)	\
    ( (This)->lpVtbl -> contextMenuItemsForElement(This,sender,element,defaultItemsHMenu,resultHMenu) ) 

#define IWebUIDelegate2_validateUserInterfaceItem(This,webView,itemCommandID,defaultValidation,isValid)	\
    ( (This)->lpVtbl -> validateUserInterfaceItem(This,webView,itemCommandID,defaultValidation,isValid) ) 

#define IWebUIDelegate2_shouldPerformAction(This,webView,itemCommandID,sender)	\
    ( (This)->lpVtbl -> shouldPerformAction(This,webView,itemCommandID,sender) ) 

#define IWebUIDelegate2_dragDestinationActionMaskForDraggingInfo(This,webView,draggingInfo,action)	\
    ( (This)->lpVtbl -> dragDestinationActionMaskForDraggingInfo(This,webView,draggingInfo,action) ) 

#define IWebUIDelegate2_willPerformDragDestinationAction(This,webView,action,draggingInfo)	\
    ( (This)->lpVtbl -> willPerformDragDestinationAction(This,webView,action,draggingInfo) ) 

#define IWebUIDelegate2_dragSourceActionMaskForPoint(This,webView,point,action)	\
    ( (This)->lpVtbl -> dragSourceActionMaskForPoint(This,webView,point,action) ) 

#define IWebUIDelegate2_willPerformDragSourceAction(This,webView,action,point,pasteboard,newPasteboard)	\
    ( (This)->lpVtbl -> willPerformDragSourceAction(This,webView,action,point,pasteboard,newPasteboard) ) 

#define IWebUIDelegate2_contextMenuItemSelected(This,sender,item,element)	\
    ( (This)->lpVtbl -> contextMenuItemSelected(This,sender,item,element) ) 

#define IWebUIDelegate2_hasCustomMenuImplementation(This,hasCustomMenus)	\
    ( (This)->lpVtbl -> hasCustomMenuImplementation(This,hasCustomMenus) ) 

#define IWebUIDelegate2_trackCustomPopupMenu(This,sender,hMenu,point)	\
    ( (This)->lpVtbl -> trackCustomPopupMenu(This,sender,hMenu,point) ) 

#define IWebUIDelegate2_measureCustomMenuItem(This,sender,measureItem)	\
    ( (This)->lpVtbl -> measureCustomMenuItem(This,sender,measureItem) ) 

#define IWebUIDelegate2_drawCustomMenuItem(This,sender,drawItem)	\
    ( (This)->lpVtbl -> drawCustomMenuItem(This,sender,drawItem) ) 

#define IWebUIDelegate2_addCustomMenuDrawingData(This,sender,hMenu)	\
    ( (This)->lpVtbl -> addCustomMenuDrawingData(This,sender,hMenu) ) 

#define IWebUIDelegate2_cleanUpCustomMenuDrawingData(This,sender,hMenu)	\
    ( (This)->lpVtbl -> cleanUpCustomMenuDrawingData(This,sender,hMenu) ) 

#define IWebUIDelegate2_canTakeFocus(This,sender,forward,result)	\
    ( (This)->lpVtbl -> canTakeFocus(This,sender,forward,result) ) 

#define IWebUIDelegate2_takeFocus(This,sender,forward)	\
    ( (This)->lpVtbl -> takeFocus(This,sender,forward) ) 

#define IWebUIDelegate2_registerUndoWithTarget(This,target,actionName,actionArg)	\
    ( (This)->lpVtbl -> registerUndoWithTarget(This,target,actionName,actionArg) ) 

#define IWebUIDelegate2_removeAllActionsWithTarget(This,target)	\
    ( (This)->lpVtbl -> removeAllActionsWithTarget(This,target) ) 

#define IWebUIDelegate2_setActionTitle(This,actionTitle)	\
    ( (This)->lpVtbl -> setActionTitle(This,actionTitle) ) 

#define IWebUIDelegate2_undo(This)	\
    ( (This)->lpVtbl -> undo(This) ) 

#define IWebUIDelegate2_redo(This)	\
    ( (This)->lpVtbl -> redo(This) ) 

#define IWebUIDelegate2_canUndo(This,result)	\
    ( (This)->lpVtbl -> canUndo(This,result) ) 

#define IWebUIDelegate2_canRedo(This,result)	\
    ( (This)->lpVtbl -> canRedo(This,result) ) 

#define IWebUIDelegate2_printFrame(This,webView,frame)	\
    ( (This)->lpVtbl -> printFrame(This,webView,frame) ) 

#define IWebUIDelegate2_ftpDirectoryTemplatePath(This,webView,path)	\
    ( (This)->lpVtbl -> ftpDirectoryTemplatePath(This,webView,path) ) 

#define IWebUIDelegate2_webViewHeaderHeight(This,webView,result)	\
    ( (This)->lpVtbl -> webViewHeaderHeight(This,webView,result) ) 

#define IWebUIDelegate2_webViewFooterHeight(This,webView,result)	\
    ( (This)->lpVtbl -> webViewFooterHeight(This,webView,result) ) 

#define IWebUIDelegate2_drawHeaderInRect(This,webView,rect,drawingContext)	\
    ( (This)->lpVtbl -> drawHeaderInRect(This,webView,rect,drawingContext) ) 

#define IWebUIDelegate2_drawFooterInRect(This,webView,rect,drawingContext,pageIndex,pageCount)	\
    ( (This)->lpVtbl -> drawFooterInRect(This,webView,rect,drawingContext,pageIndex,pageCount) ) 

#define IWebUIDelegate2_webViewPrintingMarginRect(This,webView,rect)	\
    ( (This)->lpVtbl -> webViewPrintingMarginRect(This,webView,rect) ) 

#define IWebUIDelegate2_canRunModal(This,webView,canRunBoolean)	\
    ( (This)->lpVtbl -> canRunModal(This,webView,canRunBoolean) ) 

#define IWebUIDelegate2_createModalDialog(This,sender,request,newWebView)	\
    ( (This)->lpVtbl -> createModalDialog(This,sender,request,newWebView) ) 

#define IWebUIDelegate2_runModal(This,webView)	\
    ( (This)->lpVtbl -> runModal(This,webView) ) 

#define IWebUIDelegate2_isMenuBarVisible(This,webView,visible)	\
    ( (This)->lpVtbl -> isMenuBarVisible(This,webView,visible) ) 

#define IWebUIDelegate2_setMenuBarVisible(This,webView,visible)	\
    ( (This)->lpVtbl -> setMenuBarVisible(This,webView,visible) ) 

#define IWebUIDelegate2_runDatabaseSizeLimitPrompt(This,webView,displayName,initiatedByFrame,allowed)	\
    ( (This)->lpVtbl -> runDatabaseSizeLimitPrompt(This,webView,displayName,initiatedByFrame,allowed) ) 

#define IWebUIDelegate2_paintCustomScrollbar(This,webView,hDC,rect,size,state,pressedPart,vertical,value,proportion,parts)	\
    ( (This)->lpVtbl -> paintCustomScrollbar(This,webView,hDC,rect,size,state,pressedPart,vertical,value,proportion,parts) ) 

#define IWebUIDelegate2_paintCustomScrollCorner(This,webView,hDC,rect)	\
    ( (This)->lpVtbl -> paintCustomScrollCorner(This,webView,hDC,rect) ) 


#define IWebUIDelegate2_desktopNotificationsDelegate(This,result)	\
    ( (This)->lpVtbl -> desktopNotificationsDelegate(This,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebUIDelegate2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0125 */
/* [local] */ 

#define WebEmbeddedViewAttributesKey TEXT("WebEmbeddedViewAttributesKey")
#define WebEmbeddedViewBaseURLKey TEXT("WebEmbeddedViewBaseURLKey")
#define WebEmbeddedViewContainingElementKey TEXT("WebEmbeddedViewContainingElementKey")
#define WebEmbeddedViewMIMETypeKey TEXT("WebEmbeddedViewMIMETypeKey")







extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0125_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0125_v0_0_s_ifspec;

#ifndef __IWebUIDelegatePrivate_INTERFACE_DEFINED__
#define __IWebUIDelegatePrivate_INTERFACE_DEFINED__

/* interface IWebUIDelegatePrivate */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebUIDelegatePrivate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("df3b4283-6868-4a1f-97f6-baf0b33f239c")
    IWebUIDelegatePrivate : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE unused1( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE unused2( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE webViewScrolled( 
            /* [in] */ IWebView *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE webViewAddMessageToConsole( 
            /* [in] */ IWebView *sender,
            /* [in] */ BSTR message,
            /* [in] */ int lineNumber,
            /* [in] */ BSTR url,
            /* [in] */ BOOL isError) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE webViewShouldInterruptJavaScript( 
            /* [in] */ IWebView *sender,
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE webViewReceivedFocus( 
            /* [in] */ IWebView *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE webViewLostFocus( 
            /* [in] */ IWebView *sender,
            /* [in] */ OLE_HANDLE loseFocusToHWnd) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE doDragDrop( 
            /* [in] */ IWebView *sender,
            /* [in] */ IDataObject *dataObject,
            /* [in] */ IDropSource *dropSource,
            /* [in] */ DWORD okEffect,
            /* [retval][out] */ DWORD *performedEffect) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE webViewGetDlgCode( 
            /* [in] */ IWebView *sender,
            /* [in] */ UINT keyCode,
            /* [retval][out] */ LONG_PTR *code) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE webViewPainted( 
            /* [in] */ IWebView *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE exceededDatabaseQuota( 
            /* [in] */ IWebView *sender,
            /* [in] */ IWebFrame *frame,
            /* [in] */ IWebSecurityOrigin *origin,
            /* [in] */ BSTR databaseIdentifier) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE embeddedViewWithArguments( 
            /* [in] */ IWebView *sender,
            /* [in] */ IWebFrame *frame,
            /* [in] */ IPropertyBag *arguments,
            /* [retval][out] */ IWebEmbeddedView **view) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE unused3( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE webViewClosing( 
            /* [in] */ IWebView *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE webViewSetCursor( 
            /* [in] */ IWebView *sender,
            /* [in] */ OLE_HANDLE cursor) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE webViewDidInvalidate( 
            /* [in] */ IWebView *sender) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebUIDelegatePrivateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebUIDelegatePrivate * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebUIDelegatePrivate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebUIDelegatePrivate * This);
        
        HRESULT ( STDMETHODCALLTYPE *unused1 )( 
            IWebUIDelegatePrivate * This);
        
        HRESULT ( STDMETHODCALLTYPE *unused2 )( 
            IWebUIDelegatePrivate * This);
        
        HRESULT ( STDMETHODCALLTYPE *webViewScrolled )( 
            IWebUIDelegatePrivate * This,
            /* [in] */ IWebView *sender);
        
        HRESULT ( STDMETHODCALLTYPE *webViewAddMessageToConsole )( 
            IWebUIDelegatePrivate * This,
            /* [in] */ IWebView *sender,
            /* [in] */ BSTR message,
            /* [in] */ int lineNumber,
            /* [in] */ BSTR url,
            /* [in] */ BOOL isError);
        
        HRESULT ( STDMETHODCALLTYPE *webViewShouldInterruptJavaScript )( 
            IWebUIDelegatePrivate * This,
            /* [in] */ IWebView *sender,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *webViewReceivedFocus )( 
            IWebUIDelegatePrivate * This,
            /* [in] */ IWebView *sender);
        
        HRESULT ( STDMETHODCALLTYPE *webViewLostFocus )( 
            IWebUIDelegatePrivate * This,
            /* [in] */ IWebView *sender,
            /* [in] */ OLE_HANDLE loseFocusToHWnd);
        
        HRESULT ( STDMETHODCALLTYPE *doDragDrop )( 
            IWebUIDelegatePrivate * This,
            /* [in] */ IWebView *sender,
            /* [in] */ IDataObject *dataObject,
            /* [in] */ IDropSource *dropSource,
            /* [in] */ DWORD okEffect,
            /* [retval][out] */ DWORD *performedEffect);
        
        HRESULT ( STDMETHODCALLTYPE *webViewGetDlgCode )( 
            IWebUIDelegatePrivate * This,
            /* [in] */ IWebView *sender,
            /* [in] */ UINT keyCode,
            /* [retval][out] */ LONG_PTR *code);
        
        HRESULT ( STDMETHODCALLTYPE *webViewPainted )( 
            IWebUIDelegatePrivate * This,
            /* [in] */ IWebView *sender);
        
        HRESULT ( STDMETHODCALLTYPE *exceededDatabaseQuota )( 
            IWebUIDelegatePrivate * This,
            /* [in] */ IWebView *sender,
            /* [in] */ IWebFrame *frame,
            /* [in] */ IWebSecurityOrigin *origin,
            /* [in] */ BSTR databaseIdentifier);
        
        HRESULT ( STDMETHODCALLTYPE *embeddedViewWithArguments )( 
            IWebUIDelegatePrivate * This,
            /* [in] */ IWebView *sender,
            /* [in] */ IWebFrame *frame,
            /* [in] */ IPropertyBag *arguments,
            /* [retval][out] */ IWebEmbeddedView **view);
        
        HRESULT ( STDMETHODCALLTYPE *unused3 )( 
            IWebUIDelegatePrivate * This);
        
        HRESULT ( STDMETHODCALLTYPE *webViewClosing )( 
            IWebUIDelegatePrivate * This,
            /* [in] */ IWebView *sender);
        
        HRESULT ( STDMETHODCALLTYPE *webViewSetCursor )( 
            IWebUIDelegatePrivate * This,
            /* [in] */ IWebView *sender,
            /* [in] */ OLE_HANDLE cursor);
        
        HRESULT ( STDMETHODCALLTYPE *webViewDidInvalidate )( 
            IWebUIDelegatePrivate * This,
            /* [in] */ IWebView *sender);
        
        END_INTERFACE
    } IWebUIDelegatePrivateVtbl;

    interface IWebUIDelegatePrivate
    {
        CONST_VTBL struct IWebUIDelegatePrivateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebUIDelegatePrivate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebUIDelegatePrivate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebUIDelegatePrivate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebUIDelegatePrivate_unused1(This)	\
    ( (This)->lpVtbl -> unused1(This) ) 

#define IWebUIDelegatePrivate_unused2(This)	\
    ( (This)->lpVtbl -> unused2(This) ) 

#define IWebUIDelegatePrivate_webViewScrolled(This,sender)	\
    ( (This)->lpVtbl -> webViewScrolled(This,sender) ) 

#define IWebUIDelegatePrivate_webViewAddMessageToConsole(This,sender,message,lineNumber,url,isError)	\
    ( (This)->lpVtbl -> webViewAddMessageToConsole(This,sender,message,lineNumber,url,isError) ) 

#define IWebUIDelegatePrivate_webViewShouldInterruptJavaScript(This,sender,result)	\
    ( (This)->lpVtbl -> webViewShouldInterruptJavaScript(This,sender,result) ) 

#define IWebUIDelegatePrivate_webViewReceivedFocus(This,sender)	\
    ( (This)->lpVtbl -> webViewReceivedFocus(This,sender) ) 

#define IWebUIDelegatePrivate_webViewLostFocus(This,sender,loseFocusToHWnd)	\
    ( (This)->lpVtbl -> webViewLostFocus(This,sender,loseFocusToHWnd) ) 

#define IWebUIDelegatePrivate_doDragDrop(This,sender,dataObject,dropSource,okEffect,performedEffect)	\
    ( (This)->lpVtbl -> doDragDrop(This,sender,dataObject,dropSource,okEffect,performedEffect) ) 

#define IWebUIDelegatePrivate_webViewGetDlgCode(This,sender,keyCode,code)	\
    ( (This)->lpVtbl -> webViewGetDlgCode(This,sender,keyCode,code) ) 

#define IWebUIDelegatePrivate_webViewPainted(This,sender)	\
    ( (This)->lpVtbl -> webViewPainted(This,sender) ) 

#define IWebUIDelegatePrivate_exceededDatabaseQuota(This,sender,frame,origin,databaseIdentifier)	\
    ( (This)->lpVtbl -> exceededDatabaseQuota(This,sender,frame,origin,databaseIdentifier) ) 

#define IWebUIDelegatePrivate_embeddedViewWithArguments(This,sender,frame,arguments,view)	\
    ( (This)->lpVtbl -> embeddedViewWithArguments(This,sender,frame,arguments,view) ) 

#define IWebUIDelegatePrivate_unused3(This)	\
    ( (This)->lpVtbl -> unused3(This) ) 

#define IWebUIDelegatePrivate_webViewClosing(This,sender)	\
    ( (This)->lpVtbl -> webViewClosing(This,sender) ) 

#define IWebUIDelegatePrivate_webViewSetCursor(This,sender,cursor)	\
    ( (This)->lpVtbl -> webViewSetCursor(This,sender,cursor) ) 

#define IWebUIDelegatePrivate_webViewDidInvalidate(This,sender)	\
    ( (This)->lpVtbl -> webViewDidInvalidate(This,sender) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebUIDelegatePrivate_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0126 */
/* [local] */ 

#define WebWindowFeaturesXKey L"x"
#define WebWindowFeaturesYKey L"y"
#define WebWindowFeaturesWidthKey L"width"
#define WebWindowFeaturesHeightKey L"height"
#define WebWindowFeaturesMenuBarVisibleKey L"menuBarVisible"
#define WebWindowFeaturesStatusBarVisibleKey L"statusBarVisible"
#define WebWindowFeaturesToolBarVisibleKey L"toolBarVisible"
#define WebWindowFeaturesScrollbarsVisibleKey L"scrollbarsVisible"
#define WebWindowFeaturesResizableKey L"resizable"
#define WebWindowFeaturesFullscreenKey L"fullscreen"
#define WebWindowFeaturesDialogKey L"dialog"


extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0126_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0126_v0_0_s_ifspec;

#ifndef __IWebUIDelegatePrivate2_INTERFACE_DEFINED__
#define __IWebUIDelegatePrivate2_INTERFACE_DEFINED__

/* interface IWebUIDelegatePrivate2 */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebUIDelegatePrivate2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b7d6a98e-9c4f-43f2-b6a7-0975a0b18421")
    IWebUIDelegatePrivate2 : public IWebUIDelegatePrivate
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE createWebViewWithRequest( 
            /* [in] */ IWebView *sender,
            /* [in] */ IWebURLRequest *request,
            /* [in] */ IPropertyBag *windowFeatures,
            /* [retval][out] */ IWebView **newWebView) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE drawBackground( 
            /* [in] */ IWebView *sender,
            /* [in] */ OLE_HANDLE hdc,
            /* [in] */ const RECT *dirtyRect) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE decidePolicyForGeolocationRequest( 
            /* [in] */ IWebView *sender,
            /* [in] */ IWebFrame *frame,
            /* [in] */ IWebSecurityOrigin *origin,
            /* [in] */ IWebGeolocationPolicyListener *listener) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebUIDelegatePrivate2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebUIDelegatePrivate2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebUIDelegatePrivate2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebUIDelegatePrivate2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *unused1 )( 
            IWebUIDelegatePrivate2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *unused2 )( 
            IWebUIDelegatePrivate2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *webViewScrolled )( 
            IWebUIDelegatePrivate2 * This,
            /* [in] */ IWebView *sender);
        
        HRESULT ( STDMETHODCALLTYPE *webViewAddMessageToConsole )( 
            IWebUIDelegatePrivate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ BSTR message,
            /* [in] */ int lineNumber,
            /* [in] */ BSTR url,
            /* [in] */ BOOL isError);
        
        HRESULT ( STDMETHODCALLTYPE *webViewShouldInterruptJavaScript )( 
            IWebUIDelegatePrivate2 * This,
            /* [in] */ IWebView *sender,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *webViewReceivedFocus )( 
            IWebUIDelegatePrivate2 * This,
            /* [in] */ IWebView *sender);
        
        HRESULT ( STDMETHODCALLTYPE *webViewLostFocus )( 
            IWebUIDelegatePrivate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ OLE_HANDLE loseFocusToHWnd);
        
        HRESULT ( STDMETHODCALLTYPE *doDragDrop )( 
            IWebUIDelegatePrivate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ IDataObject *dataObject,
            /* [in] */ IDropSource *dropSource,
            /* [in] */ DWORD okEffect,
            /* [retval][out] */ DWORD *performedEffect);
        
        HRESULT ( STDMETHODCALLTYPE *webViewGetDlgCode )( 
            IWebUIDelegatePrivate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ UINT keyCode,
            /* [retval][out] */ LONG_PTR *code);
        
        HRESULT ( STDMETHODCALLTYPE *webViewPainted )( 
            IWebUIDelegatePrivate2 * This,
            /* [in] */ IWebView *sender);
        
        HRESULT ( STDMETHODCALLTYPE *exceededDatabaseQuota )( 
            IWebUIDelegatePrivate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ IWebFrame *frame,
            /* [in] */ IWebSecurityOrigin *origin,
            /* [in] */ BSTR databaseIdentifier);
        
        HRESULT ( STDMETHODCALLTYPE *embeddedViewWithArguments )( 
            IWebUIDelegatePrivate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ IWebFrame *frame,
            /* [in] */ IPropertyBag *arguments,
            /* [retval][out] */ IWebEmbeddedView **view);
        
        HRESULT ( STDMETHODCALLTYPE *unused3 )( 
            IWebUIDelegatePrivate2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *webViewClosing )( 
            IWebUIDelegatePrivate2 * This,
            /* [in] */ IWebView *sender);
        
        HRESULT ( STDMETHODCALLTYPE *webViewSetCursor )( 
            IWebUIDelegatePrivate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ OLE_HANDLE cursor);
        
        HRESULT ( STDMETHODCALLTYPE *webViewDidInvalidate )( 
            IWebUIDelegatePrivate2 * This,
            /* [in] */ IWebView *sender);
        
        HRESULT ( STDMETHODCALLTYPE *createWebViewWithRequest )( 
            IWebUIDelegatePrivate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ IWebURLRequest *request,
            /* [in] */ IPropertyBag *windowFeatures,
            /* [retval][out] */ IWebView **newWebView);
        
        HRESULT ( STDMETHODCALLTYPE *drawBackground )( 
            IWebUIDelegatePrivate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ OLE_HANDLE hdc,
            /* [in] */ const RECT *dirtyRect);
        
        HRESULT ( STDMETHODCALLTYPE *decidePolicyForGeolocationRequest )( 
            IWebUIDelegatePrivate2 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ IWebFrame *frame,
            /* [in] */ IWebSecurityOrigin *origin,
            /* [in] */ IWebGeolocationPolicyListener *listener);
        
        END_INTERFACE
    } IWebUIDelegatePrivate2Vtbl;

    interface IWebUIDelegatePrivate2
    {
        CONST_VTBL struct IWebUIDelegatePrivate2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebUIDelegatePrivate2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebUIDelegatePrivate2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebUIDelegatePrivate2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebUIDelegatePrivate2_unused1(This)	\
    ( (This)->lpVtbl -> unused1(This) ) 

#define IWebUIDelegatePrivate2_unused2(This)	\
    ( (This)->lpVtbl -> unused2(This) ) 

#define IWebUIDelegatePrivate2_webViewScrolled(This,sender)	\
    ( (This)->lpVtbl -> webViewScrolled(This,sender) ) 

#define IWebUIDelegatePrivate2_webViewAddMessageToConsole(This,sender,message,lineNumber,url,isError)	\
    ( (This)->lpVtbl -> webViewAddMessageToConsole(This,sender,message,lineNumber,url,isError) ) 

#define IWebUIDelegatePrivate2_webViewShouldInterruptJavaScript(This,sender,result)	\
    ( (This)->lpVtbl -> webViewShouldInterruptJavaScript(This,sender,result) ) 

#define IWebUIDelegatePrivate2_webViewReceivedFocus(This,sender)	\
    ( (This)->lpVtbl -> webViewReceivedFocus(This,sender) ) 

#define IWebUIDelegatePrivate2_webViewLostFocus(This,sender,loseFocusToHWnd)	\
    ( (This)->lpVtbl -> webViewLostFocus(This,sender,loseFocusToHWnd) ) 

#define IWebUIDelegatePrivate2_doDragDrop(This,sender,dataObject,dropSource,okEffect,performedEffect)	\
    ( (This)->lpVtbl -> doDragDrop(This,sender,dataObject,dropSource,okEffect,performedEffect) ) 

#define IWebUIDelegatePrivate2_webViewGetDlgCode(This,sender,keyCode,code)	\
    ( (This)->lpVtbl -> webViewGetDlgCode(This,sender,keyCode,code) ) 

#define IWebUIDelegatePrivate2_webViewPainted(This,sender)	\
    ( (This)->lpVtbl -> webViewPainted(This,sender) ) 

#define IWebUIDelegatePrivate2_exceededDatabaseQuota(This,sender,frame,origin,databaseIdentifier)	\
    ( (This)->lpVtbl -> exceededDatabaseQuota(This,sender,frame,origin,databaseIdentifier) ) 

#define IWebUIDelegatePrivate2_embeddedViewWithArguments(This,sender,frame,arguments,view)	\
    ( (This)->lpVtbl -> embeddedViewWithArguments(This,sender,frame,arguments,view) ) 

#define IWebUIDelegatePrivate2_unused3(This)	\
    ( (This)->lpVtbl -> unused3(This) ) 

#define IWebUIDelegatePrivate2_webViewClosing(This,sender)	\
    ( (This)->lpVtbl -> webViewClosing(This,sender) ) 

#define IWebUIDelegatePrivate2_webViewSetCursor(This,sender,cursor)	\
    ( (This)->lpVtbl -> webViewSetCursor(This,sender,cursor) ) 

#define IWebUIDelegatePrivate2_webViewDidInvalidate(This,sender)	\
    ( (This)->lpVtbl -> webViewDidInvalidate(This,sender) ) 


#define IWebUIDelegatePrivate2_createWebViewWithRequest(This,sender,request,windowFeatures,newWebView)	\
    ( (This)->lpVtbl -> createWebViewWithRequest(This,sender,request,windowFeatures,newWebView) ) 

#define IWebUIDelegatePrivate2_drawBackground(This,sender,hdc,dirtyRect)	\
    ( (This)->lpVtbl -> drawBackground(This,sender,hdc,dirtyRect) ) 

#define IWebUIDelegatePrivate2_decidePolicyForGeolocationRequest(This,sender,frame,origin,listener)	\
    ( (This)->lpVtbl -> decidePolicyForGeolocationRequest(This,sender,frame,origin,listener) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebUIDelegatePrivate2_INTERFACE_DEFINED__ */


#ifndef __IWebUIDelegatePrivate3_INTERFACE_DEFINED__
#define __IWebUIDelegatePrivate3_INTERFACE_DEFINED__

/* interface IWebUIDelegatePrivate3 */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebUIDelegatePrivate3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e9834891-233b-48a0-984b-8f8a19abdd0f")
    IWebUIDelegatePrivate3 : public IWebUIDelegatePrivate2
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE didPressMissingPluginButton( 
            /* [in] */ IDOMElement *__MIDL__IWebUIDelegatePrivate30000) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebUIDelegatePrivate3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebUIDelegatePrivate3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebUIDelegatePrivate3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebUIDelegatePrivate3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *unused1 )( 
            IWebUIDelegatePrivate3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *unused2 )( 
            IWebUIDelegatePrivate3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *webViewScrolled )( 
            IWebUIDelegatePrivate3 * This,
            /* [in] */ IWebView *sender);
        
        HRESULT ( STDMETHODCALLTYPE *webViewAddMessageToConsole )( 
            IWebUIDelegatePrivate3 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ BSTR message,
            /* [in] */ int lineNumber,
            /* [in] */ BSTR url,
            /* [in] */ BOOL isError);
        
        HRESULT ( STDMETHODCALLTYPE *webViewShouldInterruptJavaScript )( 
            IWebUIDelegatePrivate3 * This,
            /* [in] */ IWebView *sender,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *webViewReceivedFocus )( 
            IWebUIDelegatePrivate3 * This,
            /* [in] */ IWebView *sender);
        
        HRESULT ( STDMETHODCALLTYPE *webViewLostFocus )( 
            IWebUIDelegatePrivate3 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ OLE_HANDLE loseFocusToHWnd);
        
        HRESULT ( STDMETHODCALLTYPE *doDragDrop )( 
            IWebUIDelegatePrivate3 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ IDataObject *dataObject,
            /* [in] */ IDropSource *dropSource,
            /* [in] */ DWORD okEffect,
            /* [retval][out] */ DWORD *performedEffect);
        
        HRESULT ( STDMETHODCALLTYPE *webViewGetDlgCode )( 
            IWebUIDelegatePrivate3 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ UINT keyCode,
            /* [retval][out] */ LONG_PTR *code);
        
        HRESULT ( STDMETHODCALLTYPE *webViewPainted )( 
            IWebUIDelegatePrivate3 * This,
            /* [in] */ IWebView *sender);
        
        HRESULT ( STDMETHODCALLTYPE *exceededDatabaseQuota )( 
            IWebUIDelegatePrivate3 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ IWebFrame *frame,
            /* [in] */ IWebSecurityOrigin *origin,
            /* [in] */ BSTR databaseIdentifier);
        
        HRESULT ( STDMETHODCALLTYPE *embeddedViewWithArguments )( 
            IWebUIDelegatePrivate3 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ IWebFrame *frame,
            /* [in] */ IPropertyBag *arguments,
            /* [retval][out] */ IWebEmbeddedView **view);
        
        HRESULT ( STDMETHODCALLTYPE *unused3 )( 
            IWebUIDelegatePrivate3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *webViewClosing )( 
            IWebUIDelegatePrivate3 * This,
            /* [in] */ IWebView *sender);
        
        HRESULT ( STDMETHODCALLTYPE *webViewSetCursor )( 
            IWebUIDelegatePrivate3 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ OLE_HANDLE cursor);
        
        HRESULT ( STDMETHODCALLTYPE *webViewDidInvalidate )( 
            IWebUIDelegatePrivate3 * This,
            /* [in] */ IWebView *sender);
        
        HRESULT ( STDMETHODCALLTYPE *createWebViewWithRequest )( 
            IWebUIDelegatePrivate3 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ IWebURLRequest *request,
            /* [in] */ IPropertyBag *windowFeatures,
            /* [retval][out] */ IWebView **newWebView);
        
        HRESULT ( STDMETHODCALLTYPE *drawBackground )( 
            IWebUIDelegatePrivate3 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ OLE_HANDLE hdc,
            /* [in] */ const RECT *dirtyRect);
        
        HRESULT ( STDMETHODCALLTYPE *decidePolicyForGeolocationRequest )( 
            IWebUIDelegatePrivate3 * This,
            /* [in] */ IWebView *sender,
            /* [in] */ IWebFrame *frame,
            /* [in] */ IWebSecurityOrigin *origin,
            /* [in] */ IWebGeolocationPolicyListener *listener);
        
        HRESULT ( STDMETHODCALLTYPE *didPressMissingPluginButton )( 
            IWebUIDelegatePrivate3 * This,
            /* [in] */ IDOMElement *__MIDL__IWebUIDelegatePrivate30000);
        
        END_INTERFACE
    } IWebUIDelegatePrivate3Vtbl;

    interface IWebUIDelegatePrivate3
    {
        CONST_VTBL struct IWebUIDelegatePrivate3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebUIDelegatePrivate3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebUIDelegatePrivate3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebUIDelegatePrivate3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebUIDelegatePrivate3_unused1(This)	\
    ( (This)->lpVtbl -> unused1(This) ) 

#define IWebUIDelegatePrivate3_unused2(This)	\
    ( (This)->lpVtbl -> unused2(This) ) 

#define IWebUIDelegatePrivate3_webViewScrolled(This,sender)	\
    ( (This)->lpVtbl -> webViewScrolled(This,sender) ) 

#define IWebUIDelegatePrivate3_webViewAddMessageToConsole(This,sender,message,lineNumber,url,isError)	\
    ( (This)->lpVtbl -> webViewAddMessageToConsole(This,sender,message,lineNumber,url,isError) ) 

#define IWebUIDelegatePrivate3_webViewShouldInterruptJavaScript(This,sender,result)	\
    ( (This)->lpVtbl -> webViewShouldInterruptJavaScript(This,sender,result) ) 

#define IWebUIDelegatePrivate3_webViewReceivedFocus(This,sender)	\
    ( (This)->lpVtbl -> webViewReceivedFocus(This,sender) ) 

#define IWebUIDelegatePrivate3_webViewLostFocus(This,sender,loseFocusToHWnd)	\
    ( (This)->lpVtbl -> webViewLostFocus(This,sender,loseFocusToHWnd) ) 

#define IWebUIDelegatePrivate3_doDragDrop(This,sender,dataObject,dropSource,okEffect,performedEffect)	\
    ( (This)->lpVtbl -> doDragDrop(This,sender,dataObject,dropSource,okEffect,performedEffect) ) 

#define IWebUIDelegatePrivate3_webViewGetDlgCode(This,sender,keyCode,code)	\
    ( (This)->lpVtbl -> webViewGetDlgCode(This,sender,keyCode,code) ) 

#define IWebUIDelegatePrivate3_webViewPainted(This,sender)	\
    ( (This)->lpVtbl -> webViewPainted(This,sender) ) 

#define IWebUIDelegatePrivate3_exceededDatabaseQuota(This,sender,frame,origin,databaseIdentifier)	\
    ( (This)->lpVtbl -> exceededDatabaseQuota(This,sender,frame,origin,databaseIdentifier) ) 

#define IWebUIDelegatePrivate3_embeddedViewWithArguments(This,sender,frame,arguments,view)	\
    ( (This)->lpVtbl -> embeddedViewWithArguments(This,sender,frame,arguments,view) ) 

#define IWebUIDelegatePrivate3_unused3(This)	\
    ( (This)->lpVtbl -> unused3(This) ) 

#define IWebUIDelegatePrivate3_webViewClosing(This,sender)	\
    ( (This)->lpVtbl -> webViewClosing(This,sender) ) 

#define IWebUIDelegatePrivate3_webViewSetCursor(This,sender,cursor)	\
    ( (This)->lpVtbl -> webViewSetCursor(This,sender,cursor) ) 

#define IWebUIDelegatePrivate3_webViewDidInvalidate(This,sender)	\
    ( (This)->lpVtbl -> webViewDidInvalidate(This,sender) ) 


#define IWebUIDelegatePrivate3_createWebViewWithRequest(This,sender,request,windowFeatures,newWebView)	\
    ( (This)->lpVtbl -> createWebViewWithRequest(This,sender,request,windowFeatures,newWebView) ) 

#define IWebUIDelegatePrivate3_drawBackground(This,sender,hdc,dirtyRect)	\
    ( (This)->lpVtbl -> drawBackground(This,sender,hdc,dirtyRect) ) 

#define IWebUIDelegatePrivate3_decidePolicyForGeolocationRequest(This,sender,frame,origin,listener)	\
    ( (This)->lpVtbl -> decidePolicyForGeolocationRequest(This,sender,frame,origin,listener) ) 


#define IWebUIDelegatePrivate3_didPressMissingPluginButton(This,__MIDL__IWebUIDelegatePrivate30000)	\
    ( (This)->lpVtbl -> didPressMissingPluginButton(This,__MIDL__IWebUIDelegatePrivate30000) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebUIDelegatePrivate3_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0128 */
/* [local] */ 






typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_WebKit_0000_0128_0001
    {	WebURLCredentialPersistenceNone	= 0,
	WebURLCredentialPersistenceForSession	= ( WebURLCredentialPersistenceNone + 1 ) ,
	WebURLCredentialPersistencePermanent	= ( WebURLCredentialPersistenceForSession + 1 ) 
    } 	WebURLCredentialPersistence;



extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0128_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0128_v0_0_s_ifspec;

#ifndef __IWebURLAuthenticationChallenge_INTERFACE_DEFINED__
#define __IWebURLAuthenticationChallenge_INTERFACE_DEFINED__

/* interface IWebURLAuthenticationChallenge */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebURLAuthenticationChallenge;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5382DABA-C3C3-40c5-AA40-04079F11A844")
    IWebURLAuthenticationChallenge : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE error( 
            /* [retval][out] */ IWebError **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE failureResponse( 
            /* [retval][out] */ IWebURLResponse **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE initWithAuthenticationChallenge( 
            /* [in] */ IWebURLAuthenticationChallenge *challenge,
            /* [in] */ IWebURLAuthenticationChallengeSender *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE initWithProtectionSpace( 
            /* [in] */ IWebURLProtectionSpace *space,
            /* [in] */ IWebURLCredential *proposedCredential,
            /* [in] */ int previousFailureCount,
            /* [in] */ IWebURLResponse *failureResponse,
            /* [in] */ IWebError *error,
            /* [in] */ IWebURLAuthenticationChallengeSender *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE previousFailureCount( 
            /* [retval][out] */ UINT *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE proposedCredential( 
            /* [retval][out] */ IWebURLCredential **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE protectionSpace( 
            /* [retval][out] */ IWebURLProtectionSpace **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE sender( 
            /* [retval][out] */ IWebURLAuthenticationChallengeSender **sender) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebURLAuthenticationChallengeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebURLAuthenticationChallenge * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebURLAuthenticationChallenge * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebURLAuthenticationChallenge * This);
        
        HRESULT ( STDMETHODCALLTYPE *error )( 
            IWebURLAuthenticationChallenge * This,
            /* [retval][out] */ IWebError **result);
        
        HRESULT ( STDMETHODCALLTYPE *failureResponse )( 
            IWebURLAuthenticationChallenge * This,
            /* [retval][out] */ IWebURLResponse **result);
        
        HRESULT ( STDMETHODCALLTYPE *initWithAuthenticationChallenge )( 
            IWebURLAuthenticationChallenge * This,
            /* [in] */ IWebURLAuthenticationChallenge *challenge,
            /* [in] */ IWebURLAuthenticationChallengeSender *sender);
        
        HRESULT ( STDMETHODCALLTYPE *initWithProtectionSpace )( 
            IWebURLAuthenticationChallenge * This,
            /* [in] */ IWebURLProtectionSpace *space,
            /* [in] */ IWebURLCredential *proposedCredential,
            /* [in] */ int previousFailureCount,
            /* [in] */ IWebURLResponse *failureResponse,
            /* [in] */ IWebError *error,
            /* [in] */ IWebURLAuthenticationChallengeSender *sender);
        
        HRESULT ( STDMETHODCALLTYPE *previousFailureCount )( 
            IWebURLAuthenticationChallenge * This,
            /* [retval][out] */ UINT *result);
        
        HRESULT ( STDMETHODCALLTYPE *proposedCredential )( 
            IWebURLAuthenticationChallenge * This,
            /* [retval][out] */ IWebURLCredential **result);
        
        HRESULT ( STDMETHODCALLTYPE *protectionSpace )( 
            IWebURLAuthenticationChallenge * This,
            /* [retval][out] */ IWebURLProtectionSpace **result);
        
        HRESULT ( STDMETHODCALLTYPE *sender )( 
            IWebURLAuthenticationChallenge * This,
            /* [retval][out] */ IWebURLAuthenticationChallengeSender **sender);
        
        END_INTERFACE
    } IWebURLAuthenticationChallengeVtbl;

    interface IWebURLAuthenticationChallenge
    {
        CONST_VTBL struct IWebURLAuthenticationChallengeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebURLAuthenticationChallenge_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebURLAuthenticationChallenge_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebURLAuthenticationChallenge_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebURLAuthenticationChallenge_error(This,result)	\
    ( (This)->lpVtbl -> error(This,result) ) 

#define IWebURLAuthenticationChallenge_failureResponse(This,result)	\
    ( (This)->lpVtbl -> failureResponse(This,result) ) 

#define IWebURLAuthenticationChallenge_initWithAuthenticationChallenge(This,challenge,sender)	\
    ( (This)->lpVtbl -> initWithAuthenticationChallenge(This,challenge,sender) ) 

#define IWebURLAuthenticationChallenge_initWithProtectionSpace(This,space,proposedCredential,previousFailureCount,failureResponse,error,sender)	\
    ( (This)->lpVtbl -> initWithProtectionSpace(This,space,proposedCredential,previousFailureCount,failureResponse,error,sender) ) 

#define IWebURLAuthenticationChallenge_previousFailureCount(This,result)	\
    ( (This)->lpVtbl -> previousFailureCount(This,result) ) 

#define IWebURLAuthenticationChallenge_proposedCredential(This,result)	\
    ( (This)->lpVtbl -> proposedCredential(This,result) ) 

#define IWebURLAuthenticationChallenge_protectionSpace(This,result)	\
    ( (This)->lpVtbl -> protectionSpace(This,result) ) 

#define IWebURLAuthenticationChallenge_sender(This,sender)	\
    ( (This)->lpVtbl -> sender(This,sender) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebURLAuthenticationChallenge_INTERFACE_DEFINED__ */


#ifndef __IWebURLAuthenticationChallengeSender_INTERFACE_DEFINED__
#define __IWebURLAuthenticationChallengeSender_INTERFACE_DEFINED__

/* interface IWebURLAuthenticationChallengeSender */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebURLAuthenticationChallengeSender;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9360D6FB-186C-4ff7-AE57-D1B973DA0D1C")
    IWebURLAuthenticationChallengeSender : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE cancelAuthenticationChallenge( 
            /* [in] */ IWebURLAuthenticationChallenge *challenge) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE continueWithoutCredentialForAuthenticationChallenge( 
            /* [in] */ IWebURLAuthenticationChallenge *challenge) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE useCredential( 
            /* [in] */ IWebURLCredential *credential,
            /* [in] */ IWebURLAuthenticationChallenge *challenge) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebURLAuthenticationChallengeSenderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebURLAuthenticationChallengeSender * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebURLAuthenticationChallengeSender * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebURLAuthenticationChallengeSender * This);
        
        HRESULT ( STDMETHODCALLTYPE *cancelAuthenticationChallenge )( 
            IWebURLAuthenticationChallengeSender * This,
            /* [in] */ IWebURLAuthenticationChallenge *challenge);
        
        HRESULT ( STDMETHODCALLTYPE *continueWithoutCredentialForAuthenticationChallenge )( 
            IWebURLAuthenticationChallengeSender * This,
            /* [in] */ IWebURLAuthenticationChallenge *challenge);
        
        HRESULT ( STDMETHODCALLTYPE *useCredential )( 
            IWebURLAuthenticationChallengeSender * This,
            /* [in] */ IWebURLCredential *credential,
            /* [in] */ IWebURLAuthenticationChallenge *challenge);
        
        END_INTERFACE
    } IWebURLAuthenticationChallengeSenderVtbl;

    interface IWebURLAuthenticationChallengeSender
    {
        CONST_VTBL struct IWebURLAuthenticationChallengeSenderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebURLAuthenticationChallengeSender_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebURLAuthenticationChallengeSender_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebURLAuthenticationChallengeSender_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebURLAuthenticationChallengeSender_cancelAuthenticationChallenge(This,challenge)	\
    ( (This)->lpVtbl -> cancelAuthenticationChallenge(This,challenge) ) 

#define IWebURLAuthenticationChallengeSender_continueWithoutCredentialForAuthenticationChallenge(This,challenge)	\
    ( (This)->lpVtbl -> continueWithoutCredentialForAuthenticationChallenge(This,challenge) ) 

#define IWebURLAuthenticationChallengeSender_useCredential(This,credential,challenge)	\
    ( (This)->lpVtbl -> useCredential(This,credential,challenge) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebURLAuthenticationChallengeSender_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0130 */
/* [local] */ 

#define WebURLProtectionSpaceHTTP TEXT("http")
#define WebURLProtectionSpaceHTTPS TEXT("https")
#define WebURLProtectionSpaceFTP TEXT("ftp")
#define WebURLProtectionSpaceFTPS TEXT("ftps")
#define WebURLProtectionSpaceHTTPProxy TEXT("http")
#define WebURLProtectionSpaceHTTPSProxy TEXT("https")
#define WebURLProtectionSpaceFTPProxy TEXT("ftp")
#define WebURLProtectionSpaceSOCKSProxy TEXT("SOCKS")
#define WebURLAuthenticationMethodDefault TEXT("WebURLAuthenticationMethodDefault")
#define WebURLAuthenticationMethodHTTPBasic TEXT("WebURLAuthenticationMethodHTTPBasic")
#define WebURLAuthenticationMethodHTTPDigest TEXT("WebURLAuthenticationMethodHTTPDigest")
#define WebURLAuthenticationMethodHTMLForm TEXT("WebURLAuthenticationMethodHTMLForm")


extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0130_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0130_v0_0_s_ifspec;

#ifndef __IWebURLProtectionSpace_INTERFACE_DEFINED__
#define __IWebURLProtectionSpace_INTERFACE_DEFINED__

/* interface IWebURLProtectionSpace */
/* [unique][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IWebURLProtectionSpace;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("71D2622A-3FF2-404b-BD45-C60659C901AF")
    IWebURLProtectionSpace : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE authenticationMethod( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE host( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE initWithHost( 
            /* [in] */ BSTR host,
            /* [in] */ int port,
            /* [in] */ BSTR protocol,
            /* [in] */ BSTR realm,
            /* [in] */ BSTR authenticationMethod) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE initWithProxyHost( 
            /* [in] */ BSTR host,
            /* [in] */ int port,
            /* [in] */ BSTR proxyType,
            /* [in] */ BSTR realm,
            /* [in] */ BSTR authenticationMethod) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isProxy( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE port( 
            /* [retval][out] */ int *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE protocol( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE proxyType( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE realm( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE receivesCredentialSecurely( 
            /* [retval][out] */ BOOL *result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebURLProtectionSpaceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebURLProtectionSpace * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebURLProtectionSpace * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebURLProtectionSpace * This);
        
        HRESULT ( STDMETHODCALLTYPE *authenticationMethod )( 
            IWebURLProtectionSpace * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *host )( 
            IWebURLProtectionSpace * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *initWithHost )( 
            IWebURLProtectionSpace * This,
            /* [in] */ BSTR host,
            /* [in] */ int port,
            /* [in] */ BSTR protocol,
            /* [in] */ BSTR realm,
            /* [in] */ BSTR authenticationMethod);
        
        HRESULT ( STDMETHODCALLTYPE *initWithProxyHost )( 
            IWebURLProtectionSpace * This,
            /* [in] */ BSTR host,
            /* [in] */ int port,
            /* [in] */ BSTR proxyType,
            /* [in] */ BSTR realm,
            /* [in] */ BSTR authenticationMethod);
        
        HRESULT ( STDMETHODCALLTYPE *isProxy )( 
            IWebURLProtectionSpace * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *port )( 
            IWebURLProtectionSpace * This,
            /* [retval][out] */ int *result);
        
        HRESULT ( STDMETHODCALLTYPE *protocol )( 
            IWebURLProtectionSpace * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *proxyType )( 
            IWebURLProtectionSpace * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *realm )( 
            IWebURLProtectionSpace * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *receivesCredentialSecurely )( 
            IWebURLProtectionSpace * This,
            /* [retval][out] */ BOOL *result);
        
        END_INTERFACE
    } IWebURLProtectionSpaceVtbl;

    interface IWebURLProtectionSpace
    {
        CONST_VTBL struct IWebURLProtectionSpaceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebURLProtectionSpace_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebURLProtectionSpace_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebURLProtectionSpace_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebURLProtectionSpace_authenticationMethod(This,result)	\
    ( (This)->lpVtbl -> authenticationMethod(This,result) ) 

#define IWebURLProtectionSpace_host(This,result)	\
    ( (This)->lpVtbl -> host(This,result) ) 

#define IWebURLProtectionSpace_initWithHost(This,host,port,protocol,realm,authenticationMethod)	\
    ( (This)->lpVtbl -> initWithHost(This,host,port,protocol,realm,authenticationMethod) ) 

#define IWebURLProtectionSpace_initWithProxyHost(This,host,port,proxyType,realm,authenticationMethod)	\
    ( (This)->lpVtbl -> initWithProxyHost(This,host,port,proxyType,realm,authenticationMethod) ) 

#define IWebURLProtectionSpace_isProxy(This,result)	\
    ( (This)->lpVtbl -> isProxy(This,result) ) 

#define IWebURLProtectionSpace_port(This,result)	\
    ( (This)->lpVtbl -> port(This,result) ) 

#define IWebURLProtectionSpace_protocol(This,result)	\
    ( (This)->lpVtbl -> protocol(This,result) ) 

#define IWebURLProtectionSpace_proxyType(This,result)	\
    ( (This)->lpVtbl -> proxyType(This,result) ) 

#define IWebURLProtectionSpace_realm(This,result)	\
    ( (This)->lpVtbl -> realm(This,result) ) 

#define IWebURLProtectionSpace_receivesCredentialSecurely(This,result)	\
    ( (This)->lpVtbl -> receivesCredentialSecurely(This,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebURLProtectionSpace_INTERFACE_DEFINED__ */


#ifndef __IWebURLCredential_INTERFACE_DEFINED__
#define __IWebURLCredential_INTERFACE_DEFINED__

/* interface IWebURLCredential */
/* [unique][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IWebURLCredential;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A1E9D765-FACE-4189-BBE3-AED7EBF65EBD")
    IWebURLCredential : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE hasPassword( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE initWithUser( 
            /* [in] */ BSTR user,
            /* [in] */ BSTR password,
            /* [in] */ WebURLCredentialPersistence persistence) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE password( 
            /* [retval][out] */ BSTR *password) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE persistence( 
            /* [retval][out] */ WebURLCredentialPersistence *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE user( 
            /* [retval][out] */ BSTR *result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebURLCredentialVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebURLCredential * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebURLCredential * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebURLCredential * This);
        
        HRESULT ( STDMETHODCALLTYPE *hasPassword )( 
            IWebURLCredential * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *initWithUser )( 
            IWebURLCredential * This,
            /* [in] */ BSTR user,
            /* [in] */ BSTR password,
            /* [in] */ WebURLCredentialPersistence persistence);
        
        HRESULT ( STDMETHODCALLTYPE *password )( 
            IWebURLCredential * This,
            /* [retval][out] */ BSTR *password);
        
        HRESULT ( STDMETHODCALLTYPE *persistence )( 
            IWebURLCredential * This,
            /* [retval][out] */ WebURLCredentialPersistence *result);
        
        HRESULT ( STDMETHODCALLTYPE *user )( 
            IWebURLCredential * This,
            /* [retval][out] */ BSTR *result);
        
        END_INTERFACE
    } IWebURLCredentialVtbl;

    interface IWebURLCredential
    {
        CONST_VTBL struct IWebURLCredentialVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebURLCredential_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebURLCredential_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebURLCredential_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebURLCredential_hasPassword(This,result)	\
    ( (This)->lpVtbl -> hasPassword(This,result) ) 

#define IWebURLCredential_initWithUser(This,user,password,persistence)	\
    ( (This)->lpVtbl -> initWithUser(This,user,password,persistence) ) 

#define IWebURLCredential_password(This,password)	\
    ( (This)->lpVtbl -> password(This,password) ) 

#define IWebURLCredential_persistence(This,result)	\
    ( (This)->lpVtbl -> persistence(This,result) ) 

#define IWebURLCredential_user(This,result)	\
    ( (This)->lpVtbl -> user(This,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebURLCredential_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0132 */
/* [local] */ 

typedef 
enum _WebURLRequestCachePolicy
    {	WebURLRequestUseProtocolCachePolicy	= 0,
	WebURLRequestReloadIgnoringCacheData	= ( WebURLRequestUseProtocolCachePolicy + 1 ) ,
	WebURLRequestReturnCacheDataElseLoad	= ( WebURLRequestReloadIgnoringCacheData + 1 ) ,
	WebURLRequestReturnCacheDataDontLoad	= ( WebURLRequestReturnCacheDataElseLoad + 1 ) 
    } 	WebURLRequestCachePolicy;



extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0132_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0132_v0_0_s_ifspec;

#ifndef __IWebURLRequest_INTERFACE_DEFINED__
#define __IWebURLRequest_INTERFACE_DEFINED__

/* interface IWebURLRequest */
/* [unique][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IWebURLRequest;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F4B85F1D-F3B2-493d-B786-0930E804A3BA")
    IWebURLRequest : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE requestWithURL( 
            /* [in] */ BSTR theURL,
            /* [in] */ WebURLRequestCachePolicy cachePolicy,
            /* [in] */ double timeoutInterval) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE allHTTPHeaderFields( 
            /* [retval][out] */ IPropertyBag **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE cachePolicy( 
            /* [retval][out] */ WebURLRequestCachePolicy *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HTTPBody( 
            /* [retval][out] */ IStream **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HTTPBodyStream( 
            /* [retval][out] */ IStream **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HTTPMethod( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HTTPShouldHandleCookies( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE initWithURL( 
            /* [in] */ BSTR url,
            /* [in] */ WebURLRequestCachePolicy cachePolicy,
            /* [in] */ double timeoutInterval) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE mainDocumentURL( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE timeoutInterval( 
            /* [retval][out] */ double *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE URL( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE valueForHTTPHeaderField( 
            /* [in] */ BSTR field,
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isEmpty( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE mutableCopy( 
            /* [retval][out] */ IWebMutableURLRequest **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isEqual( 
            /* [in] */ IWebURLRequest *other,
            /* [retval][out] */ BOOL *result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebURLRequestVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebURLRequest * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebURLRequest * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebURLRequest * This);
        
        HRESULT ( STDMETHODCALLTYPE *requestWithURL )( 
            IWebURLRequest * This,
            /* [in] */ BSTR theURL,
            /* [in] */ WebURLRequestCachePolicy cachePolicy,
            /* [in] */ double timeoutInterval);
        
        HRESULT ( STDMETHODCALLTYPE *allHTTPHeaderFields )( 
            IWebURLRequest * This,
            /* [retval][out] */ IPropertyBag **result);
        
        HRESULT ( STDMETHODCALLTYPE *cachePolicy )( 
            IWebURLRequest * This,
            /* [retval][out] */ WebURLRequestCachePolicy *result);
        
        HRESULT ( STDMETHODCALLTYPE *HTTPBody )( 
            IWebURLRequest * This,
            /* [retval][out] */ IStream **result);
        
        HRESULT ( STDMETHODCALLTYPE *HTTPBodyStream )( 
            IWebURLRequest * This,
            /* [retval][out] */ IStream **result);
        
        HRESULT ( STDMETHODCALLTYPE *HTTPMethod )( 
            IWebURLRequest * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *HTTPShouldHandleCookies )( 
            IWebURLRequest * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *initWithURL )( 
            IWebURLRequest * This,
            /* [in] */ BSTR url,
            /* [in] */ WebURLRequestCachePolicy cachePolicy,
            /* [in] */ double timeoutInterval);
        
        HRESULT ( STDMETHODCALLTYPE *mainDocumentURL )( 
            IWebURLRequest * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *timeoutInterval )( 
            IWebURLRequest * This,
            /* [retval][out] */ double *result);
        
        HRESULT ( STDMETHODCALLTYPE *URL )( 
            IWebURLRequest * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *valueForHTTPHeaderField )( 
            IWebURLRequest * This,
            /* [in] */ BSTR field,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *isEmpty )( 
            IWebURLRequest * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *mutableCopy )( 
            IWebURLRequest * This,
            /* [retval][out] */ IWebMutableURLRequest **result);
        
        HRESULT ( STDMETHODCALLTYPE *isEqual )( 
            IWebURLRequest * This,
            /* [in] */ IWebURLRequest *other,
            /* [retval][out] */ BOOL *result);
        
        END_INTERFACE
    } IWebURLRequestVtbl;

    interface IWebURLRequest
    {
        CONST_VTBL struct IWebURLRequestVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebURLRequest_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebURLRequest_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebURLRequest_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebURLRequest_requestWithURL(This,theURL,cachePolicy,timeoutInterval)	\
    ( (This)->lpVtbl -> requestWithURL(This,theURL,cachePolicy,timeoutInterval) ) 

#define IWebURLRequest_allHTTPHeaderFields(This,result)	\
    ( (This)->lpVtbl -> allHTTPHeaderFields(This,result) ) 

#define IWebURLRequest_cachePolicy(This,result)	\
    ( (This)->lpVtbl -> cachePolicy(This,result) ) 

#define IWebURLRequest_HTTPBody(This,result)	\
    ( (This)->lpVtbl -> HTTPBody(This,result) ) 

#define IWebURLRequest_HTTPBodyStream(This,result)	\
    ( (This)->lpVtbl -> HTTPBodyStream(This,result) ) 

#define IWebURLRequest_HTTPMethod(This,result)	\
    ( (This)->lpVtbl -> HTTPMethod(This,result) ) 

#define IWebURLRequest_HTTPShouldHandleCookies(This,result)	\
    ( (This)->lpVtbl -> HTTPShouldHandleCookies(This,result) ) 

#define IWebURLRequest_initWithURL(This,url,cachePolicy,timeoutInterval)	\
    ( (This)->lpVtbl -> initWithURL(This,url,cachePolicy,timeoutInterval) ) 

#define IWebURLRequest_mainDocumentURL(This,result)	\
    ( (This)->lpVtbl -> mainDocumentURL(This,result) ) 

#define IWebURLRequest_timeoutInterval(This,result)	\
    ( (This)->lpVtbl -> timeoutInterval(This,result) ) 

#define IWebURLRequest_URL(This,result)	\
    ( (This)->lpVtbl -> URL(This,result) ) 

#define IWebURLRequest_valueForHTTPHeaderField(This,field,result)	\
    ( (This)->lpVtbl -> valueForHTTPHeaderField(This,field,result) ) 

#define IWebURLRequest_isEmpty(This,result)	\
    ( (This)->lpVtbl -> isEmpty(This,result) ) 

#define IWebURLRequest_mutableCopy(This,result)	\
    ( (This)->lpVtbl -> mutableCopy(This,result) ) 

#define IWebURLRequest_isEqual(This,other,result)	\
    ( (This)->lpVtbl -> isEqual(This,other,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebURLRequest_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0133 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0133_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0133_v0_0_s_ifspec;

#ifndef __IWebMutableURLRequest_INTERFACE_DEFINED__
#define __IWebMutableURLRequest_INTERFACE_DEFINED__

/* interface IWebMutableURLRequest */
/* [unique][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IWebMutableURLRequest;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C4042773-371F-427e-AFA9-9D4B358A0D93")
    IWebMutableURLRequest : public IWebURLRequest
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE addValue( 
            /* [in] */ BSTR value,
            /* [in] */ BSTR field) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setAllHTTPHeaderFields( 
            /* [in] */ IPropertyBag *headerFields) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setCachePolicy( 
            /* [in] */ WebURLRequestCachePolicy policy) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setHTTPBody( 
            /* [in] */ IStream *data) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setHTTPBodyStream( 
            /* [in] */ IStream *data) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setHTTPMethod( 
            /* [in] */ BSTR method) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setHTTPShouldHandleCookies( 
            /* [in] */ BOOL handleCookies) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setMainDocumentURL( 
            /* [in] */ BSTR theURL) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setTimeoutInterval( 
            /* [in] */ double timeoutInterval) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setURL( 
            /* [in] */ BSTR theURL) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setValue( 
            /* [in] */ BSTR value,
            /* [in] */ BSTR field) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setAllowsAnyHTTPSCertificate( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebMutableURLRequestVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebMutableURLRequest * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebMutableURLRequest * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebMutableURLRequest * This);
        
        HRESULT ( STDMETHODCALLTYPE *requestWithURL )( 
            IWebMutableURLRequest * This,
            /* [in] */ BSTR theURL,
            /* [in] */ WebURLRequestCachePolicy cachePolicy,
            /* [in] */ double timeoutInterval);
        
        HRESULT ( STDMETHODCALLTYPE *allHTTPHeaderFields )( 
            IWebMutableURLRequest * This,
            /* [retval][out] */ IPropertyBag **result);
        
        HRESULT ( STDMETHODCALLTYPE *cachePolicy )( 
            IWebMutableURLRequest * This,
            /* [retval][out] */ WebURLRequestCachePolicy *result);
        
        HRESULT ( STDMETHODCALLTYPE *HTTPBody )( 
            IWebMutableURLRequest * This,
            /* [retval][out] */ IStream **result);
        
        HRESULT ( STDMETHODCALLTYPE *HTTPBodyStream )( 
            IWebMutableURLRequest * This,
            /* [retval][out] */ IStream **result);
        
        HRESULT ( STDMETHODCALLTYPE *HTTPMethod )( 
            IWebMutableURLRequest * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *HTTPShouldHandleCookies )( 
            IWebMutableURLRequest * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *initWithURL )( 
            IWebMutableURLRequest * This,
            /* [in] */ BSTR url,
            /* [in] */ WebURLRequestCachePolicy cachePolicy,
            /* [in] */ double timeoutInterval);
        
        HRESULT ( STDMETHODCALLTYPE *mainDocumentURL )( 
            IWebMutableURLRequest * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *timeoutInterval )( 
            IWebMutableURLRequest * This,
            /* [retval][out] */ double *result);
        
        HRESULT ( STDMETHODCALLTYPE *URL )( 
            IWebMutableURLRequest * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *valueForHTTPHeaderField )( 
            IWebMutableURLRequest * This,
            /* [in] */ BSTR field,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *isEmpty )( 
            IWebMutableURLRequest * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *mutableCopy )( 
            IWebMutableURLRequest * This,
            /* [retval][out] */ IWebMutableURLRequest **result);
        
        HRESULT ( STDMETHODCALLTYPE *isEqual )( 
            IWebMutableURLRequest * This,
            /* [in] */ IWebURLRequest *other,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *addValue )( 
            IWebMutableURLRequest * This,
            /* [in] */ BSTR value,
            /* [in] */ BSTR field);
        
        HRESULT ( STDMETHODCALLTYPE *setAllHTTPHeaderFields )( 
            IWebMutableURLRequest * This,
            /* [in] */ IPropertyBag *headerFields);
        
        HRESULT ( STDMETHODCALLTYPE *setCachePolicy )( 
            IWebMutableURLRequest * This,
            /* [in] */ WebURLRequestCachePolicy policy);
        
        HRESULT ( STDMETHODCALLTYPE *setHTTPBody )( 
            IWebMutableURLRequest * This,
            /* [in] */ IStream *data);
        
        HRESULT ( STDMETHODCALLTYPE *setHTTPBodyStream )( 
            IWebMutableURLRequest * This,
            /* [in] */ IStream *data);
        
        HRESULT ( STDMETHODCALLTYPE *setHTTPMethod )( 
            IWebMutableURLRequest * This,
            /* [in] */ BSTR method);
        
        HRESULT ( STDMETHODCALLTYPE *setHTTPShouldHandleCookies )( 
            IWebMutableURLRequest * This,
            /* [in] */ BOOL handleCookies);
        
        HRESULT ( STDMETHODCALLTYPE *setMainDocumentURL )( 
            IWebMutableURLRequest * This,
            /* [in] */ BSTR theURL);
        
        HRESULT ( STDMETHODCALLTYPE *setTimeoutInterval )( 
            IWebMutableURLRequest * This,
            /* [in] */ double timeoutInterval);
        
        HRESULT ( STDMETHODCALLTYPE *setURL )( 
            IWebMutableURLRequest * This,
            /* [in] */ BSTR theURL);
        
        HRESULT ( STDMETHODCALLTYPE *setValue )( 
            IWebMutableURLRequest * This,
            /* [in] */ BSTR value,
            /* [in] */ BSTR field);
        
        HRESULT ( STDMETHODCALLTYPE *setAllowsAnyHTTPSCertificate )( 
            IWebMutableURLRequest * This);
        
        END_INTERFACE
    } IWebMutableURLRequestVtbl;

    interface IWebMutableURLRequest
    {
        CONST_VTBL struct IWebMutableURLRequestVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebMutableURLRequest_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebMutableURLRequest_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebMutableURLRequest_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebMutableURLRequest_requestWithURL(This,theURL,cachePolicy,timeoutInterval)	\
    ( (This)->lpVtbl -> requestWithURL(This,theURL,cachePolicy,timeoutInterval) ) 

#define IWebMutableURLRequest_allHTTPHeaderFields(This,result)	\
    ( (This)->lpVtbl -> allHTTPHeaderFields(This,result) ) 

#define IWebMutableURLRequest_cachePolicy(This,result)	\
    ( (This)->lpVtbl -> cachePolicy(This,result) ) 

#define IWebMutableURLRequest_HTTPBody(This,result)	\
    ( (This)->lpVtbl -> HTTPBody(This,result) ) 

#define IWebMutableURLRequest_HTTPBodyStream(This,result)	\
    ( (This)->lpVtbl -> HTTPBodyStream(This,result) ) 

#define IWebMutableURLRequest_HTTPMethod(This,result)	\
    ( (This)->lpVtbl -> HTTPMethod(This,result) ) 

#define IWebMutableURLRequest_HTTPShouldHandleCookies(This,result)	\
    ( (This)->lpVtbl -> HTTPShouldHandleCookies(This,result) ) 

#define IWebMutableURLRequest_initWithURL(This,url,cachePolicy,timeoutInterval)	\
    ( (This)->lpVtbl -> initWithURL(This,url,cachePolicy,timeoutInterval) ) 

#define IWebMutableURLRequest_mainDocumentURL(This,result)	\
    ( (This)->lpVtbl -> mainDocumentURL(This,result) ) 

#define IWebMutableURLRequest_timeoutInterval(This,result)	\
    ( (This)->lpVtbl -> timeoutInterval(This,result) ) 

#define IWebMutableURLRequest_URL(This,result)	\
    ( (This)->lpVtbl -> URL(This,result) ) 

#define IWebMutableURLRequest_valueForHTTPHeaderField(This,field,result)	\
    ( (This)->lpVtbl -> valueForHTTPHeaderField(This,field,result) ) 

#define IWebMutableURLRequest_isEmpty(This,result)	\
    ( (This)->lpVtbl -> isEmpty(This,result) ) 

#define IWebMutableURLRequest_mutableCopy(This,result)	\
    ( (This)->lpVtbl -> mutableCopy(This,result) ) 

#define IWebMutableURLRequest_isEqual(This,other,result)	\
    ( (This)->lpVtbl -> isEqual(This,other,result) ) 


#define IWebMutableURLRequest_addValue(This,value,field)	\
    ( (This)->lpVtbl -> addValue(This,value,field) ) 

#define IWebMutableURLRequest_setAllHTTPHeaderFields(This,headerFields)	\
    ( (This)->lpVtbl -> setAllHTTPHeaderFields(This,headerFields) ) 

#define IWebMutableURLRequest_setCachePolicy(This,policy)	\
    ( (This)->lpVtbl -> setCachePolicy(This,policy) ) 

#define IWebMutableURLRequest_setHTTPBody(This,data)	\
    ( (This)->lpVtbl -> setHTTPBody(This,data) ) 

#define IWebMutableURLRequest_setHTTPBodyStream(This,data)	\
    ( (This)->lpVtbl -> setHTTPBodyStream(This,data) ) 

#define IWebMutableURLRequest_setHTTPMethod(This,method)	\
    ( (This)->lpVtbl -> setHTTPMethod(This,method) ) 

#define IWebMutableURLRequest_setHTTPShouldHandleCookies(This,handleCookies)	\
    ( (This)->lpVtbl -> setHTTPShouldHandleCookies(This,handleCookies) ) 

#define IWebMutableURLRequest_setMainDocumentURL(This,theURL)	\
    ( (This)->lpVtbl -> setMainDocumentURL(This,theURL) ) 

#define IWebMutableURLRequest_setTimeoutInterval(This,timeoutInterval)	\
    ( (This)->lpVtbl -> setTimeoutInterval(This,timeoutInterval) ) 

#define IWebMutableURLRequest_setURL(This,theURL)	\
    ( (This)->lpVtbl -> setURL(This,theURL) ) 

#define IWebMutableURLRequest_setValue(This,value,field)	\
    ( (This)->lpVtbl -> setValue(This,value,field) ) 

#define IWebMutableURLRequest_setAllowsAnyHTTPSCertificate(This)	\
    ( (This)->lpVtbl -> setAllowsAnyHTTPSCertificate(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebMutableURLRequest_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0134 */
/* [local] */ 

#define WebURLResponseUnknownLength -1


extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0134_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0134_v0_0_s_ifspec;

#ifndef __IWebURLResponsePrivate_INTERFACE_DEFINED__
#define __IWebURLResponsePrivate_INTERFACE_DEFINED__

/* interface IWebURLResponsePrivate */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebURLResponsePrivate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("18730CD8-864E-4898-B775-88905CC8E9DD")
    IWebURLResponsePrivate : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE sslPeerCertificate( 
            /* [retval][out] */ OLE_HANDLE *result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebURLResponsePrivateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebURLResponsePrivate * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebURLResponsePrivate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebURLResponsePrivate * This);
        
        HRESULT ( STDMETHODCALLTYPE *sslPeerCertificate )( 
            IWebURLResponsePrivate * This,
            /* [retval][out] */ OLE_HANDLE *result);
        
        END_INTERFACE
    } IWebURLResponsePrivateVtbl;

    interface IWebURLResponsePrivate
    {
        CONST_VTBL struct IWebURLResponsePrivateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebURLResponsePrivate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebURLResponsePrivate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebURLResponsePrivate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebURLResponsePrivate_sslPeerCertificate(This,result)	\
    ( (This)->lpVtbl -> sslPeerCertificate(This,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebURLResponsePrivate_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0136 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0136_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0136_v0_0_s_ifspec;

#ifndef __IWebUndoManager_INTERFACE_DEFINED__
#define __IWebUndoManager_INTERFACE_DEFINED__

/* interface IWebUndoManager */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebUndoManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D25D748C-6C1E-478d-9832-FDA26E8F7EE4")
    IWebUndoManager : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE beginUndoGrouping( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE canRedo( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE canUndo( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE disableUndoRegistration( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE enableUndoRegistration( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE endUndoGrouping( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE forwardInvocation( 
            /* [in] */ IWebInvocation *anInvocation) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE groupingLevel( 
            /* [retval][out] */ int *groupingLevel) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE groupsByEvent( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isRedoing( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isUndoing( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isUndoRegistrationEnabled( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE levelsOfUndo( 
            /* [retval][out] */ UINT *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE prepareWithInvocationTarget( 
            /* [in] */ IUnknown *target,
            /* [retval][out] */ IUnknown **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE redo( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE redoActionName( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE redoMenuItemTitle( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE redoMenuTitleForUndoActionName( 
            /* [in] */ BSTR actionName,
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE registerUndoWithTarget( 
            /* [in] */ IUnknown *target,
            /* [in] */ UINT aSelector,
            /* [in] */ IUnknown *anObject) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE removeAllActions( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE removeAllActionsWithTarget( 
            /* [in] */ IUnknown *target) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE runLoopModes( 
            /* [retval][out] */ IEnumVARIANT **enumModes) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setActionName( 
            /* [in] */ BSTR actionName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setGroupsByEvent( 
            /* [in] */ BOOL flag) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setLevelsOfUndo( 
            /* [in] */ UINT anInt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setRunLoopModes( 
            /* [in] */ int cModes,
            /* [size_is][in] */ BSTR *modes) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE undo( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE undoActionName( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE undoMenuItemTitle( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE undoMenuTitleForUndoActionName( 
            /* [in] */ BSTR actionName,
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE undoNestedGroup( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebUndoManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebUndoManager * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebUndoManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebUndoManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *beginUndoGrouping )( 
            IWebUndoManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *canRedo )( 
            IWebUndoManager * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *canUndo )( 
            IWebUndoManager * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *disableUndoRegistration )( 
            IWebUndoManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *enableUndoRegistration )( 
            IWebUndoManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *endUndoGrouping )( 
            IWebUndoManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *forwardInvocation )( 
            IWebUndoManager * This,
            /* [in] */ IWebInvocation *anInvocation);
        
        HRESULT ( STDMETHODCALLTYPE *groupingLevel )( 
            IWebUndoManager * This,
            /* [retval][out] */ int *groupingLevel);
        
        HRESULT ( STDMETHODCALLTYPE *groupsByEvent )( 
            IWebUndoManager * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isRedoing )( 
            IWebUndoManager * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isUndoing )( 
            IWebUndoManager * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *isUndoRegistrationEnabled )( 
            IWebUndoManager * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *levelsOfUndo )( 
            IWebUndoManager * This,
            /* [retval][out] */ UINT *result);
        
        HRESULT ( STDMETHODCALLTYPE *prepareWithInvocationTarget )( 
            IWebUndoManager * This,
            /* [in] */ IUnknown *target,
            /* [retval][out] */ IUnknown **result);
        
        HRESULT ( STDMETHODCALLTYPE *redo )( 
            IWebUndoManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *redoActionName )( 
            IWebUndoManager * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *redoMenuItemTitle )( 
            IWebUndoManager * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *redoMenuTitleForUndoActionName )( 
            IWebUndoManager * This,
            /* [in] */ BSTR actionName,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *registerUndoWithTarget )( 
            IWebUndoManager * This,
            /* [in] */ IUnknown *target,
            /* [in] */ UINT aSelector,
            /* [in] */ IUnknown *anObject);
        
        HRESULT ( STDMETHODCALLTYPE *removeAllActions )( 
            IWebUndoManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *removeAllActionsWithTarget )( 
            IWebUndoManager * This,
            /* [in] */ IUnknown *target);
        
        HRESULT ( STDMETHODCALLTYPE *runLoopModes )( 
            IWebUndoManager * This,
            /* [retval][out] */ IEnumVARIANT **enumModes);
        
        HRESULT ( STDMETHODCALLTYPE *setActionName )( 
            IWebUndoManager * This,
            /* [in] */ BSTR actionName);
        
        HRESULT ( STDMETHODCALLTYPE *setGroupsByEvent )( 
            IWebUndoManager * This,
            /* [in] */ BOOL flag);
        
        HRESULT ( STDMETHODCALLTYPE *setLevelsOfUndo )( 
            IWebUndoManager * This,
            /* [in] */ UINT anInt);
        
        HRESULT ( STDMETHODCALLTYPE *setRunLoopModes )( 
            IWebUndoManager * This,
            /* [in] */ int cModes,
            /* [size_is][in] */ BSTR *modes);
        
        HRESULT ( STDMETHODCALLTYPE *undo )( 
            IWebUndoManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *undoActionName )( 
            IWebUndoManager * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *undoMenuItemTitle )( 
            IWebUndoManager * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *undoMenuTitleForUndoActionName )( 
            IWebUndoManager * This,
            /* [in] */ BSTR actionName,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *undoNestedGroup )( 
            IWebUndoManager * This);
        
        END_INTERFACE
    } IWebUndoManagerVtbl;

    interface IWebUndoManager
    {
        CONST_VTBL struct IWebUndoManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebUndoManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebUndoManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebUndoManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebUndoManager_beginUndoGrouping(This)	\
    ( (This)->lpVtbl -> beginUndoGrouping(This) ) 

#define IWebUndoManager_canRedo(This,result)	\
    ( (This)->lpVtbl -> canRedo(This,result) ) 

#define IWebUndoManager_canUndo(This,result)	\
    ( (This)->lpVtbl -> canUndo(This,result) ) 

#define IWebUndoManager_disableUndoRegistration(This)	\
    ( (This)->lpVtbl -> disableUndoRegistration(This) ) 

#define IWebUndoManager_enableUndoRegistration(This)	\
    ( (This)->lpVtbl -> enableUndoRegistration(This) ) 

#define IWebUndoManager_endUndoGrouping(This)	\
    ( (This)->lpVtbl -> endUndoGrouping(This) ) 

#define IWebUndoManager_forwardInvocation(This,anInvocation)	\
    ( (This)->lpVtbl -> forwardInvocation(This,anInvocation) ) 

#define IWebUndoManager_groupingLevel(This,groupingLevel)	\
    ( (This)->lpVtbl -> groupingLevel(This,groupingLevel) ) 

#define IWebUndoManager_groupsByEvent(This,result)	\
    ( (This)->lpVtbl -> groupsByEvent(This,result) ) 

#define IWebUndoManager_isRedoing(This,result)	\
    ( (This)->lpVtbl -> isRedoing(This,result) ) 

#define IWebUndoManager_isUndoing(This,result)	\
    ( (This)->lpVtbl -> isUndoing(This,result) ) 

#define IWebUndoManager_isUndoRegistrationEnabled(This,result)	\
    ( (This)->lpVtbl -> isUndoRegistrationEnabled(This,result) ) 

#define IWebUndoManager_levelsOfUndo(This,result)	\
    ( (This)->lpVtbl -> levelsOfUndo(This,result) ) 

#define IWebUndoManager_prepareWithInvocationTarget(This,target,result)	\
    ( (This)->lpVtbl -> prepareWithInvocationTarget(This,target,result) ) 

#define IWebUndoManager_redo(This)	\
    ( (This)->lpVtbl -> redo(This) ) 

#define IWebUndoManager_redoActionName(This,result)	\
    ( (This)->lpVtbl -> redoActionName(This,result) ) 

#define IWebUndoManager_redoMenuItemTitle(This,result)	\
    ( (This)->lpVtbl -> redoMenuItemTitle(This,result) ) 

#define IWebUndoManager_redoMenuTitleForUndoActionName(This,actionName,result)	\
    ( (This)->lpVtbl -> redoMenuTitleForUndoActionName(This,actionName,result) ) 

#define IWebUndoManager_registerUndoWithTarget(This,target,aSelector,anObject)	\
    ( (This)->lpVtbl -> registerUndoWithTarget(This,target,aSelector,anObject) ) 

#define IWebUndoManager_removeAllActions(This)	\
    ( (This)->lpVtbl -> removeAllActions(This) ) 

#define IWebUndoManager_removeAllActionsWithTarget(This,target)	\
    ( (This)->lpVtbl -> removeAllActionsWithTarget(This,target) ) 

#define IWebUndoManager_runLoopModes(This,enumModes)	\
    ( (This)->lpVtbl -> runLoopModes(This,enumModes) ) 

#define IWebUndoManager_setActionName(This,actionName)	\
    ( (This)->lpVtbl -> setActionName(This,actionName) ) 

#define IWebUndoManager_setGroupsByEvent(This,flag)	\
    ( (This)->lpVtbl -> setGroupsByEvent(This,flag) ) 

#define IWebUndoManager_setLevelsOfUndo(This,anInt)	\
    ( (This)->lpVtbl -> setLevelsOfUndo(This,anInt) ) 

#define IWebUndoManager_setRunLoopModes(This,cModes,modes)	\
    ( (This)->lpVtbl -> setRunLoopModes(This,cModes,modes) ) 

#define IWebUndoManager_undo(This)	\
    ( (This)->lpVtbl -> undo(This) ) 

#define IWebUndoManager_undoActionName(This,result)	\
    ( (This)->lpVtbl -> undoActionName(This,result) ) 

#define IWebUndoManager_undoMenuItemTitle(This,result)	\
    ( (This)->lpVtbl -> undoMenuItemTitle(This,result) ) 

#define IWebUndoManager_undoMenuTitleForUndoActionName(This,actionName,result)	\
    ( (This)->lpVtbl -> undoMenuTitleForUndoActionName(This,actionName,result) ) 

#define IWebUndoManager_undoNestedGroup(This)	\
    ( (This)->lpVtbl -> undoNestedGroup(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebUndoManager_INTERFACE_DEFINED__ */


#ifndef __IWebInvocation_INTERFACE_DEFINED__
#define __IWebInvocation_INTERFACE_DEFINED__

/* interface IWebInvocation */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebInvocation;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("67B067BE-4DE6-45c2-AD39-A91DFA84FF4E")
    IWebInvocation : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE invocationWithMethodSignature( 
            /* [in] */ IWebMethodSignature *signature) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE argumentsRetained( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE getArgument( 
            /* [in] */ void *buffer,
            /* [in] */ int index) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE getReturnValue( 
            /* [in] */ void *buffer) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE invoke( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE invokeWithTarget( 
            /* [in] */ IUnknown *anObject) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE methodSignature( 
            /* [retval][out] */ IWebMethodSignature **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE retainArguments( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE selector( 
            /* [retval][out] */ UINT *result) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE setArgument( 
            /* [in] */ void *buffer,
            /* [in] */ int atIndex) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE setReturnValue( 
            /* [in] */ void *buffer) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setSelector( 
            /* [in] */ UINT selector) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setTarget( 
            /* [in] */ IUnknown *anObject) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE target( 
            /* [retval][out] */ IUnknown **result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebInvocationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebInvocation * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebInvocation * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebInvocation * This);
        
        HRESULT ( STDMETHODCALLTYPE *invocationWithMethodSignature )( 
            IWebInvocation * This,
            /* [in] */ IWebMethodSignature *signature);
        
        HRESULT ( STDMETHODCALLTYPE *argumentsRetained )( 
            IWebInvocation * This,
            /* [retval][out] */ BOOL *result);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *getArgument )( 
            IWebInvocation * This,
            /* [in] */ void *buffer,
            /* [in] */ int index);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *getReturnValue )( 
            IWebInvocation * This,
            /* [in] */ void *buffer);
        
        HRESULT ( STDMETHODCALLTYPE *invoke )( 
            IWebInvocation * This);
        
        HRESULT ( STDMETHODCALLTYPE *invokeWithTarget )( 
            IWebInvocation * This,
            /* [in] */ IUnknown *anObject);
        
        HRESULT ( STDMETHODCALLTYPE *methodSignature )( 
            IWebInvocation * This,
            /* [retval][out] */ IWebMethodSignature **result);
        
        HRESULT ( STDMETHODCALLTYPE *retainArguments )( 
            IWebInvocation * This);
        
        HRESULT ( STDMETHODCALLTYPE *selector )( 
            IWebInvocation * This,
            /* [retval][out] */ UINT *result);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *setArgument )( 
            IWebInvocation * This,
            /* [in] */ void *buffer,
            /* [in] */ int atIndex);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *setReturnValue )( 
            IWebInvocation * This,
            /* [in] */ void *buffer);
        
        HRESULT ( STDMETHODCALLTYPE *setSelector )( 
            IWebInvocation * This,
            /* [in] */ UINT selector);
        
        HRESULT ( STDMETHODCALLTYPE *setTarget )( 
            IWebInvocation * This,
            /* [in] */ IUnknown *anObject);
        
        HRESULT ( STDMETHODCALLTYPE *target )( 
            IWebInvocation * This,
            /* [retval][out] */ IUnknown **result);
        
        END_INTERFACE
    } IWebInvocationVtbl;

    interface IWebInvocation
    {
        CONST_VTBL struct IWebInvocationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebInvocation_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebInvocation_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebInvocation_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebInvocation_invocationWithMethodSignature(This,signature)	\
    ( (This)->lpVtbl -> invocationWithMethodSignature(This,signature) ) 

#define IWebInvocation_argumentsRetained(This,result)	\
    ( (This)->lpVtbl -> argumentsRetained(This,result) ) 

#define IWebInvocation_getArgument(This,buffer,index)	\
    ( (This)->lpVtbl -> getArgument(This,buffer,index) ) 

#define IWebInvocation_getReturnValue(This,buffer)	\
    ( (This)->lpVtbl -> getReturnValue(This,buffer) ) 

#define IWebInvocation_invoke(This)	\
    ( (This)->lpVtbl -> invoke(This) ) 

#define IWebInvocation_invokeWithTarget(This,anObject)	\
    ( (This)->lpVtbl -> invokeWithTarget(This,anObject) ) 

#define IWebInvocation_methodSignature(This,result)	\
    ( (This)->lpVtbl -> methodSignature(This,result) ) 

#define IWebInvocation_retainArguments(This)	\
    ( (This)->lpVtbl -> retainArguments(This) ) 

#define IWebInvocation_selector(This,result)	\
    ( (This)->lpVtbl -> selector(This,result) ) 

#define IWebInvocation_setArgument(This,buffer,atIndex)	\
    ( (This)->lpVtbl -> setArgument(This,buffer,atIndex) ) 

#define IWebInvocation_setReturnValue(This,buffer)	\
    ( (This)->lpVtbl -> setReturnValue(This,buffer) ) 

#define IWebInvocation_setSelector(This,selector)	\
    ( (This)->lpVtbl -> setSelector(This,selector) ) 

#define IWebInvocation_setTarget(This,anObject)	\
    ( (This)->lpVtbl -> setTarget(This,anObject) ) 

#define IWebInvocation_target(This,result)	\
    ( (This)->lpVtbl -> target(This,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebInvocation_INTERFACE_DEFINED__ */


#ifndef __IWebMethodSignature_INTERFACE_DEFINED__
#define __IWebMethodSignature_INTERFACE_DEFINED__

/* interface IWebMethodSignature */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebMethodSignature;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("431DD6B2-56BF-4f48-943B-78CCEAC418E4")
    IWebMethodSignature : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE frameLength( 
            /* [retval][out] */ UINT *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getArgumentTypeAtIndex( 
            /* [in] */ UINT index,
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isOneway( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE methodReturnLength( 
            /* [retval][out] */ UINT *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE methodReturnType( 
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE numberOfArguments( 
            /* [retval][out] */ UINT *result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebMethodSignatureVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebMethodSignature * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebMethodSignature * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebMethodSignature * This);
        
        HRESULT ( STDMETHODCALLTYPE *frameLength )( 
            IWebMethodSignature * This,
            /* [retval][out] */ UINT *result);
        
        HRESULT ( STDMETHODCALLTYPE *getArgumentTypeAtIndex )( 
            IWebMethodSignature * This,
            /* [in] */ UINT index,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *isOneway )( 
            IWebMethodSignature * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *methodReturnLength )( 
            IWebMethodSignature * This,
            /* [retval][out] */ UINT *result);
        
        HRESULT ( STDMETHODCALLTYPE *methodReturnType )( 
            IWebMethodSignature * This,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *numberOfArguments )( 
            IWebMethodSignature * This,
            /* [retval][out] */ UINT *result);
        
        END_INTERFACE
    } IWebMethodSignatureVtbl;

    interface IWebMethodSignature
    {
        CONST_VTBL struct IWebMethodSignatureVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebMethodSignature_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebMethodSignature_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebMethodSignature_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebMethodSignature_frameLength(This,result)	\
    ( (This)->lpVtbl -> frameLength(This,result) ) 

#define IWebMethodSignature_getArgumentTypeAtIndex(This,index,result)	\
    ( (This)->lpVtbl -> getArgumentTypeAtIndex(This,index,result) ) 

#define IWebMethodSignature_isOneway(This,result)	\
    ( (This)->lpVtbl -> isOneway(This,result) ) 

#define IWebMethodSignature_methodReturnLength(This,result)	\
    ( (This)->lpVtbl -> methodReturnLength(This,result) ) 

#define IWebMethodSignature_methodReturnType(This,result)	\
    ( (This)->lpVtbl -> methodReturnType(This,result) ) 

#define IWebMethodSignature_numberOfArguments(This,result)	\
    ( (This)->lpVtbl -> numberOfArguments(This,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebMethodSignature_INTERFACE_DEFINED__ */


#ifndef __IWebUndoTarget_INTERFACE_DEFINED__
#define __IWebUndoTarget_INTERFACE_DEFINED__

/* interface IWebUndoTarget */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebUndoTarget;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BF7F516E-E75D-4e3a-83E2-8F694D83C72D")
    IWebUndoTarget : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE invoke( 
            /* [in] */ BSTR actionName,
            /* [in] */ IUnknown *obj) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebUndoTargetVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebUndoTarget * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebUndoTarget * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebUndoTarget * This);
        
        HRESULT ( STDMETHODCALLTYPE *invoke )( 
            IWebUndoTarget * This,
            /* [in] */ BSTR actionName,
            /* [in] */ IUnknown *obj);
        
        END_INTERFACE
    } IWebUndoTargetVtbl;

    interface IWebUndoTarget
    {
        CONST_VTBL struct IWebUndoTargetVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebUndoTarget_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebUndoTarget_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebUndoTarget_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebUndoTarget_invoke(This,actionName,obj)	\
    ( (This)->lpVtbl -> invoke(This,actionName,obj) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebUndoTarget_INTERFACE_DEFINED__ */


#ifndef __IWebUserContentURLPattern_INTERFACE_DEFINED__
#define __IWebUserContentURLPattern_INTERFACE_DEFINED__

/* interface IWebUserContentURLPattern */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebUserContentURLPattern;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("DBF18E5A-701B-49ab-B490-BED40053B788")
    IWebUserContentURLPattern : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE parse( 
            /* [in] */ BSTR patternString) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isValid( 
            /* [retval][out] */ BOOL *isValid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE scheme( 
            /* [retval][out] */ BSTR *__MIDL__IWebUserContentURLPattern0000) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE host( 
            /* [retval][out] */ BSTR *__MIDL__IWebUserContentURLPattern0001) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE matchesSubdomains( 
            /* [retval][out] */ BOOL *matches) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE matchesURL( 
            /* [in] */ BSTR url,
            /* [retval][out] */ BOOL *matches) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebUserContentURLPatternVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebUserContentURLPattern * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebUserContentURLPattern * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebUserContentURLPattern * This);
        
        HRESULT ( STDMETHODCALLTYPE *parse )( 
            IWebUserContentURLPattern * This,
            /* [in] */ BSTR patternString);
        
        HRESULT ( STDMETHODCALLTYPE *isValid )( 
            IWebUserContentURLPattern * This,
            /* [retval][out] */ BOOL *isValid);
        
        HRESULT ( STDMETHODCALLTYPE *scheme )( 
            IWebUserContentURLPattern * This,
            /* [retval][out] */ BSTR *__MIDL__IWebUserContentURLPattern0000);
        
        HRESULT ( STDMETHODCALLTYPE *host )( 
            IWebUserContentURLPattern * This,
            /* [retval][out] */ BSTR *__MIDL__IWebUserContentURLPattern0001);
        
        HRESULT ( STDMETHODCALLTYPE *matchesSubdomains )( 
            IWebUserContentURLPattern * This,
            /* [retval][out] */ BOOL *matches);
        
        HRESULT ( STDMETHODCALLTYPE *matchesURL )( 
            IWebUserContentURLPattern * This,
            /* [in] */ BSTR url,
            /* [retval][out] */ BOOL *matches);
        
        END_INTERFACE
    } IWebUserContentURLPatternVtbl;

    interface IWebUserContentURLPattern
    {
        CONST_VTBL struct IWebUserContentURLPatternVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebUserContentURLPattern_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebUserContentURLPattern_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebUserContentURLPattern_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebUserContentURLPattern_parse(This,patternString)	\
    ( (This)->lpVtbl -> parse(This,patternString) ) 

#define IWebUserContentURLPattern_isValid(This,isValid)	\
    ( (This)->lpVtbl -> isValid(This,isValid) ) 

#define IWebUserContentURLPattern_scheme(This,__MIDL__IWebUserContentURLPattern0000)	\
    ( (This)->lpVtbl -> scheme(This,__MIDL__IWebUserContentURLPattern0000) ) 

#define IWebUserContentURLPattern_host(This,__MIDL__IWebUserContentURLPattern0001)	\
    ( (This)->lpVtbl -> host(This,__MIDL__IWebUserContentURLPattern0001) ) 

#define IWebUserContentURLPattern_matchesSubdomains(This,matches)	\
    ( (This)->lpVtbl -> matchesSubdomains(This,matches) ) 

#define IWebUserContentURLPattern_matchesURL(This,url,matches)	\
    ( (This)->lpVtbl -> matchesURL(This,url,matches) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebUserContentURLPattern_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0141 */
/* [local] */ 

/* identifiers for commands that can be called by the webview's frame */
enum WebViewCmd { Cut = 100, Copy, Paste, ForwardDelete, SelectAll, Undo, Redo };
#define WebViewProgressStartedNotification TEXT("WebProgressStartedNotification")
#define WebViewProgressEstimateChangedNotification TEXT("WebProgressEstimateChangedNotification")
#define WebViewProgressFinishedNotification TEXT("WebProgressFinishedNotification")
#define WebViewDidChangeSelectionNotification TEXT("WebViewDidChangeSelectionNotification")






















#define	WebElementDOMNodeKey	( L"WebElementDOMNodeKey" )

#define	WebElementFrameKey	( L"WebElementFrameKey" )

#define	WebElementImageAltStringKey	( L"WebElementImageAltStringKey" )

#define	WebElementImageKey	( L"WebElementImageKey" )

#define	WebElementImageRectKey	( L"WebElementImageRectKey" )

#define	WebElementImageURLKey	( L"WebElementImageURLKey" )

#define	WebElementIsSelectedKey	( L"WebElementIsSelectedKey" )

#define	WebElementSpellingToolTipKey	( L"WebElementSpellingToolTipKey" )

#define	WebElementTitleKey	( L"WebElementTitleKey" )

#define	WebElementLinkURLKey	( L"WebElementLinkURLKey" )

#define	WebElementLinkTargetFrameKey	( L"WebElementLinkTargetFrameKey" )

#define	WebElementLinkTitleKey	( L"WebElementLinkTitleKey" )

#define	WebElementLinkLabelKey	( L"WebElementLinkLabelKey" )

#define	WebElementIsContentEditableKey	( L"WebElementIsContentEditableKey" )



extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0141_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0141_v0_0_s_ifspec;

#ifndef __IEnumTextMatches_INTERFACE_DEFINED__
#define __IEnumTextMatches_INTERFACE_DEFINED__

/* interface IEnumTextMatches */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IEnumTextMatches;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C0CDE63A-5ED1-453f-B937-93B1A61AD3B3")
    IEnumTextMatches : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            ULONG celt,
            RECT *rect,
            ULONG *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            IEnumTextMatches **ppenum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumTextMatchesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumTextMatches * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumTextMatches * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumTextMatches * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumTextMatches * This,
            ULONG celt,
            RECT *rect,
            ULONG *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IEnumTextMatches * This,
            ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumTextMatches * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IEnumTextMatches * This,
            IEnumTextMatches **ppenum);
        
        END_INTERFACE
    } IEnumTextMatchesVtbl;

    interface IEnumTextMatches
    {
        CONST_VTBL struct IEnumTextMatchesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumTextMatches_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IEnumTextMatches_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IEnumTextMatches_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IEnumTextMatches_Next(This,celt,rect,pceltFetched)	\
    ( (This)->lpVtbl -> Next(This,celt,rect,pceltFetched) ) 

#define IEnumTextMatches_Skip(This,celt)	\
    ( (This)->lpVtbl -> Skip(This,celt) ) 

#define IEnumTextMatches_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IEnumTextMatches_Clone(This,ppenum)	\
    ( (This)->lpVtbl -> Clone(This,ppenum) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IEnumTextMatches_INTERFACE_DEFINED__ */


#ifndef __IWebView_INTERFACE_DEFINED__
#define __IWebView_INTERFACE_DEFINED__

/* interface IWebView */
/* [unique][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IWebView;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("174BBEFD-058E-49c7-91DF-6F110AA4AC28")
    IWebView : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE canShowMIMEType( 
            /* [in] */ BSTR mimeType,
            /* [retval][out] */ BOOL *canShow) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE canShowMIMETypeAsHTML( 
            /* [in] */ BSTR mimeType,
            /* [retval][out] */ BOOL *canShow) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MIMETypesShownAsHTML( 
            /* [retval][out] */ IEnumVARIANT **enumVariant) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setMIMETypesShownAsHTML( 
            /* [size_is][in] */ BSTR *mimeTypes,
            /* [in] */ int cMimeTypes) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE URLFromPasteboard( 
            /* [in] */ IDataObject *pasteboard,
            /* [retval][out] */ BSTR *url) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE URLTitleFromPasteboard( 
            /* [in] */ IDataObject *pasteboard,
            /* [retval][out] */ BSTR *urlTitle) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE initWithFrame( 
            /* [in] */ RECT frame,
            /* [in] */ BSTR frameName,
            /* [in] */ BSTR groupName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setUIDelegate( 
            /* [in] */ IWebUIDelegate *d) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE uiDelegate( 
            /* [out][retval] */ IWebUIDelegate **d) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setResourceLoadDelegate( 
            /* [in] */ IWebResourceLoadDelegate *d) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE resourceLoadDelegate( 
            /* [out][retval] */ IWebResourceLoadDelegate **d) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setDownloadDelegate( 
            /* [in] */ IWebDownloadDelegate *d) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE downloadDelegate( 
            /* [out][retval] */ IWebDownloadDelegate **d) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setFrameLoadDelegate( 
            /* [in] */ IWebFrameLoadDelegate *d) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE frameLoadDelegate( 
            /* [out][retval] */ IWebFrameLoadDelegate **d) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setPolicyDelegate( 
            /* [in] */ IWebPolicyDelegate *d) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE policyDelegate( 
            /* [out][retval] */ IWebPolicyDelegate **d) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE mainFrame( 
            /* [out][retval] */ IWebFrame **frame) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE focusedFrame( 
            /* [out][retval] */ IWebFrame **frame) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE backForwardList( 
            /* [out][retval] */ IWebBackForwardList **list) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setMaintainsBackForwardList( 
            /* [in] */ BOOL flag) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE goBack( 
            /* [retval][out] */ BOOL *succeeded) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE goForward( 
            /* [retval][out] */ BOOL *succeeded) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE goToBackForwardItem( 
            /* [in] */ IWebHistoryItem *item,
            /* [retval][out] */ BOOL *succeeded) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setTextSizeMultiplier( 
            /* [in] */ float multiplier) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE textSizeMultiplier( 
            /* [retval][out] */ float *multiplier) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setApplicationNameForUserAgent( 
            /* [in] */ BSTR applicationName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE applicationNameForUserAgent( 
            /* [retval][out] */ BSTR *applicationName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setCustomUserAgent( 
            /* [in] */ BSTR userAgentString) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE customUserAgent( 
            /* [retval][out] */ BSTR *userAgentString) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE userAgentForURL( 
            /* [in] */ BSTR url,
            /* [retval][out] */ BSTR *userAgent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE supportsTextEncoding( 
            /* [retval][out] */ BOOL *supports) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setCustomTextEncodingName( 
            /* [in] */ BSTR encodingName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE customTextEncodingName( 
            /* [retval][out] */ BSTR *encodingName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setMediaStyle( 
            /* [in] */ BSTR media) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE mediaStyle( 
            /* [retval][out] */ BSTR *media) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE stringByEvaluatingJavaScriptFromString( 
            /* [in] */ BSTR script,
            /* [retval][out] */ BSTR *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE windowScriptObject( 
            /* [retval][out] */ IWebScriptObject **webScriptObject) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setPreferences( 
            /* [in] */ IWebPreferences *prefs) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE preferences( 
            /* [retval][out] */ IWebPreferences **prefs) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setPreferencesIdentifier( 
            /* [in] */ BSTR anIdentifier) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE preferencesIdentifier( 
            /* [retval][out] */ BSTR *anIdentifier) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setHostWindow( 
            /* [in] */ OLE_HANDLE window) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE hostWindow( 
            /* [retval][out] */ OLE_HANDLE *window) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE searchFor( 
            /* [in] */ BSTR str,
            /* [in] */ BOOL forward,
            /* [in] */ BOOL caseFlag,
            /* [in] */ BOOL wrapFlag,
            /* [retval][out] */ BOOL *found) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE registerViewClass( 
            /* [in] */ IWebDocumentView *view,
            /* [in] */ IWebDocumentRepresentation *representation,
            /* [in] */ BSTR forMIMEType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setGroupName( 
            /* [in] */ BSTR groupName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE groupName( 
            /* [retval][out] */ BSTR *groupName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE estimatedProgress( 
            /* [retval][out] */ double *estimatedProgress) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isLoading( 
            /* [retval][out] */ BOOL *isLoading) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE elementAtPoint( 
            /* [in] */ LPPOINT point,
            /* [retval][out] */ IPropertyBag **elementDictionary) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE pasteboardTypesForSelection( 
            /* [retval][out] */ IEnumVARIANT **enumVariant) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE writeSelectionWithPasteboardTypes( 
            /* [size_is][in] */ BSTR *types,
            /* [in] */ int cTypes,
            /* [in] */ IDataObject *pasteboard) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE pasteboardTypesForElement( 
            /* [in] */ IPropertyBag *elementDictionary,
            /* [retval][out] */ IEnumVARIANT **enumVariant) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE writeElement( 
            /* [in] */ IPropertyBag *elementDictionary,
            /* [size_is][in] */ BSTR *withPasteboardTypes,
            /* [in] */ int cWithPasteboardTypes,
            /* [in] */ IDataObject *pasteboard) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE selectedText( 
            /* [retval][out] */ BSTR *text) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE centerSelectionInVisibleArea( 
            /* [in] */ IUnknown *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE moveDragCaretToPoint( 
            /* [in] */ LPPOINT point) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE removeDragCaret( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setDrawsBackground( 
            /* [in] */ BOOL drawsBackground) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE drawsBackground( 
            /* [retval][out] */ BOOL *drawsBackground) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setMainFrameURL( 
            /* [in] */ BSTR urlString) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE mainFrameURL( 
            /* [retval][out] */ BSTR *urlString) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE mainFrameDocument( 
            /* [retval][out] */ IDOMDocument **document) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE mainFrameTitle( 
            /* [retval][out] */ BSTR *title) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE mainFrameIcon( 
            /* [retval][out] */ OLE_HANDLE *hBitmap) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE registerURLSchemeAsLocal( 
            /* [in] */ BSTR scheme) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE close( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebViewVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebView * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebView * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebView * This);
        
        HRESULT ( STDMETHODCALLTYPE *canShowMIMEType )( 
            IWebView * This,
            /* [in] */ BSTR mimeType,
            /* [retval][out] */ BOOL *canShow);
        
        HRESULT ( STDMETHODCALLTYPE *canShowMIMETypeAsHTML )( 
            IWebView * This,
            /* [in] */ BSTR mimeType,
            /* [retval][out] */ BOOL *canShow);
        
        HRESULT ( STDMETHODCALLTYPE *MIMETypesShownAsHTML )( 
            IWebView * This,
            /* [retval][out] */ IEnumVARIANT **enumVariant);
        
        HRESULT ( STDMETHODCALLTYPE *setMIMETypesShownAsHTML )( 
            IWebView * This,
            /* [size_is][in] */ BSTR *mimeTypes,
            /* [in] */ int cMimeTypes);
        
        HRESULT ( STDMETHODCALLTYPE *URLFromPasteboard )( 
            IWebView * This,
            /* [in] */ IDataObject *pasteboard,
            /* [retval][out] */ BSTR *url);
        
        HRESULT ( STDMETHODCALLTYPE *URLTitleFromPasteboard )( 
            IWebView * This,
            /* [in] */ IDataObject *pasteboard,
            /* [retval][out] */ BSTR *urlTitle);
        
        HRESULT ( STDMETHODCALLTYPE *initWithFrame )( 
            IWebView * This,
            /* [in] */ RECT frame,
            /* [in] */ BSTR frameName,
            /* [in] */ BSTR groupName);
        
        HRESULT ( STDMETHODCALLTYPE *setUIDelegate )( 
            IWebView * This,
            /* [in] */ IWebUIDelegate *d);
        
        HRESULT ( STDMETHODCALLTYPE *uiDelegate )( 
            IWebView * This,
            /* [out][retval] */ IWebUIDelegate **d);
        
        HRESULT ( STDMETHODCALLTYPE *setResourceLoadDelegate )( 
            IWebView * This,
            /* [in] */ IWebResourceLoadDelegate *d);
        
        HRESULT ( STDMETHODCALLTYPE *resourceLoadDelegate )( 
            IWebView * This,
            /* [out][retval] */ IWebResourceLoadDelegate **d);
        
        HRESULT ( STDMETHODCALLTYPE *setDownloadDelegate )( 
            IWebView * This,
            /* [in] */ IWebDownloadDelegate *d);
        
        HRESULT ( STDMETHODCALLTYPE *downloadDelegate )( 
            IWebView * This,
            /* [out][retval] */ IWebDownloadDelegate **d);
        
        HRESULT ( STDMETHODCALLTYPE *setFrameLoadDelegate )( 
            IWebView * This,
            /* [in] */ IWebFrameLoadDelegate *d);
        
        HRESULT ( STDMETHODCALLTYPE *frameLoadDelegate )( 
            IWebView * This,
            /* [out][retval] */ IWebFrameLoadDelegate **d);
        
        HRESULT ( STDMETHODCALLTYPE *setPolicyDelegate )( 
            IWebView * This,
            /* [in] */ IWebPolicyDelegate *d);
        
        HRESULT ( STDMETHODCALLTYPE *policyDelegate )( 
            IWebView * This,
            /* [out][retval] */ IWebPolicyDelegate **d);
        
        HRESULT ( STDMETHODCALLTYPE *mainFrame )( 
            IWebView * This,
            /* [out][retval] */ IWebFrame **frame);
        
        HRESULT ( STDMETHODCALLTYPE *focusedFrame )( 
            IWebView * This,
            /* [out][retval] */ IWebFrame **frame);
        
        HRESULT ( STDMETHODCALLTYPE *backForwardList )( 
            IWebView * This,
            /* [out][retval] */ IWebBackForwardList **list);
        
        HRESULT ( STDMETHODCALLTYPE *setMaintainsBackForwardList )( 
            IWebView * This,
            /* [in] */ BOOL flag);
        
        HRESULT ( STDMETHODCALLTYPE *goBack )( 
            IWebView * This,
            /* [retval][out] */ BOOL *succeeded);
        
        HRESULT ( STDMETHODCALLTYPE *goForward )( 
            IWebView * This,
            /* [retval][out] */ BOOL *succeeded);
        
        HRESULT ( STDMETHODCALLTYPE *goToBackForwardItem )( 
            IWebView * This,
            /* [in] */ IWebHistoryItem *item,
            /* [retval][out] */ BOOL *succeeded);
        
        HRESULT ( STDMETHODCALLTYPE *setTextSizeMultiplier )( 
            IWebView * This,
            /* [in] */ float multiplier);
        
        HRESULT ( STDMETHODCALLTYPE *textSizeMultiplier )( 
            IWebView * This,
            /* [retval][out] */ float *multiplier);
        
        HRESULT ( STDMETHODCALLTYPE *setApplicationNameForUserAgent )( 
            IWebView * This,
            /* [in] */ BSTR applicationName);
        
        HRESULT ( STDMETHODCALLTYPE *applicationNameForUserAgent )( 
            IWebView * This,
            /* [retval][out] */ BSTR *applicationName);
        
        HRESULT ( STDMETHODCALLTYPE *setCustomUserAgent )( 
            IWebView * This,
            /* [in] */ BSTR userAgentString);
        
        HRESULT ( STDMETHODCALLTYPE *customUserAgent )( 
            IWebView * This,
            /* [retval][out] */ BSTR *userAgentString);
        
        HRESULT ( STDMETHODCALLTYPE *userAgentForURL )( 
            IWebView * This,
            /* [in] */ BSTR url,
            /* [retval][out] */ BSTR *userAgent);
        
        HRESULT ( STDMETHODCALLTYPE *supportsTextEncoding )( 
            IWebView * This,
            /* [retval][out] */ BOOL *supports);
        
        HRESULT ( STDMETHODCALLTYPE *setCustomTextEncodingName )( 
            IWebView * This,
            /* [in] */ BSTR encodingName);
        
        HRESULT ( STDMETHODCALLTYPE *customTextEncodingName )( 
            IWebView * This,
            /* [retval][out] */ BSTR *encodingName);
        
        HRESULT ( STDMETHODCALLTYPE *setMediaStyle )( 
            IWebView * This,
            /* [in] */ BSTR media);
        
        HRESULT ( STDMETHODCALLTYPE *mediaStyle )( 
            IWebView * This,
            /* [retval][out] */ BSTR *media);
        
        HRESULT ( STDMETHODCALLTYPE *stringByEvaluatingJavaScriptFromString )( 
            IWebView * This,
            /* [in] */ BSTR script,
            /* [retval][out] */ BSTR *result);
        
        HRESULT ( STDMETHODCALLTYPE *windowScriptObject )( 
            IWebView * This,
            /* [retval][out] */ IWebScriptObject **webScriptObject);
        
        HRESULT ( STDMETHODCALLTYPE *setPreferences )( 
            IWebView * This,
            /* [in] */ IWebPreferences *prefs);
        
        HRESULT ( STDMETHODCALLTYPE *preferences )( 
            IWebView * This,
            /* [retval][out] */ IWebPreferences **prefs);
        
        HRESULT ( STDMETHODCALLTYPE *setPreferencesIdentifier )( 
            IWebView * This,
            /* [in] */ BSTR anIdentifier);
        
        HRESULT ( STDMETHODCALLTYPE *preferencesIdentifier )( 
            IWebView * This,
            /* [retval][out] */ BSTR *anIdentifier);
        
        HRESULT ( STDMETHODCALLTYPE *setHostWindow )( 
            IWebView * This,
            /* [in] */ OLE_HANDLE window);
        
        HRESULT ( STDMETHODCALLTYPE *hostWindow )( 
            IWebView * This,
            /* [retval][out] */ OLE_HANDLE *window);
        
        HRESULT ( STDMETHODCALLTYPE *searchFor )( 
            IWebView * This,
            /* [in] */ BSTR str,
            /* [in] */ BOOL forward,
            /* [in] */ BOOL caseFlag,
            /* [in] */ BOOL wrapFlag,
            /* [retval][out] */ BOOL *found);
        
        HRESULT ( STDMETHODCALLTYPE *registerViewClass )( 
            IWebView * This,
            /* [in] */ IWebDocumentView *view,
            /* [in] */ IWebDocumentRepresentation *representation,
            /* [in] */ BSTR forMIMEType);
        
        HRESULT ( STDMETHODCALLTYPE *setGroupName )( 
            IWebView * This,
            /* [in] */ BSTR groupName);
        
        HRESULT ( STDMETHODCALLTYPE *groupName )( 
            IWebView * This,
            /* [retval][out] */ BSTR *groupName);
        
        HRESULT ( STDMETHODCALLTYPE *estimatedProgress )( 
            IWebView * This,
            /* [retval][out] */ double *estimatedProgress);
        
        HRESULT ( STDMETHODCALLTYPE *isLoading )( 
            IWebView * This,
            /* [retval][out] */ BOOL *isLoading);
        
        HRESULT ( STDMETHODCALLTYPE *elementAtPoint )( 
            IWebView * This,
            /* [in] */ LPPOINT point,
            /* [retval][out] */ IPropertyBag **elementDictionary);
        
        HRESULT ( STDMETHODCALLTYPE *pasteboardTypesForSelection )( 
            IWebView * This,
            /* [retval][out] */ IEnumVARIANT **enumVariant);
        
        HRESULT ( STDMETHODCALLTYPE *writeSelectionWithPasteboardTypes )( 
            IWebView * This,
            /* [size_is][in] */ BSTR *types,
            /* [in] */ int cTypes,
            /* [in] */ IDataObject *pasteboard);
        
        HRESULT ( STDMETHODCALLTYPE *pasteboardTypesForElement )( 
            IWebView * This,
            /* [in] */ IPropertyBag *elementDictionary,
            /* [retval][out] */ IEnumVARIANT **enumVariant);
        
        HRESULT ( STDMETHODCALLTYPE *writeElement )( 
            IWebView * This,
            /* [in] */ IPropertyBag *elementDictionary,
            /* [size_is][in] */ BSTR *withPasteboardTypes,
            /* [in] */ int cWithPasteboardTypes,
            /* [in] */ IDataObject *pasteboard);
        
        HRESULT ( STDMETHODCALLTYPE *selectedText )( 
            IWebView * This,
            /* [retval][out] */ BSTR *text);
        
        HRESULT ( STDMETHODCALLTYPE *centerSelectionInVisibleArea )( 
            IWebView * This,
            /* [in] */ IUnknown *sender);
        
        HRESULT ( STDMETHODCALLTYPE *moveDragCaretToPoint )( 
            IWebView * This,
            /* [in] */ LPPOINT point);
        
        HRESULT ( STDMETHODCALLTYPE *removeDragCaret )( 
            IWebView * This);
        
        HRESULT ( STDMETHODCALLTYPE *setDrawsBackground )( 
            IWebView * This,
            /* [in] */ BOOL drawsBackground);
        
        HRESULT ( STDMETHODCALLTYPE *drawsBackground )( 
            IWebView * This,
            /* [retval][out] */ BOOL *drawsBackground);
        
        HRESULT ( STDMETHODCALLTYPE *setMainFrameURL )( 
            IWebView * This,
            /* [in] */ BSTR urlString);
        
        HRESULT ( STDMETHODCALLTYPE *mainFrameURL )( 
            IWebView * This,
            /* [retval][out] */ BSTR *urlString);
        
        HRESULT ( STDMETHODCALLTYPE *mainFrameDocument )( 
            IWebView * This,
            /* [retval][out] */ IDOMDocument **document);
        
        HRESULT ( STDMETHODCALLTYPE *mainFrameTitle )( 
            IWebView * This,
            /* [retval][out] */ BSTR *title);
        
        HRESULT ( STDMETHODCALLTYPE *mainFrameIcon )( 
            IWebView * This,
            /* [retval][out] */ OLE_HANDLE *hBitmap);
        
        HRESULT ( STDMETHODCALLTYPE *registerURLSchemeAsLocal )( 
            IWebView * This,
            /* [in] */ BSTR scheme);
        
        HRESULT ( STDMETHODCALLTYPE *close )( 
            IWebView * This);
        
        END_INTERFACE
    } IWebViewVtbl;

    interface IWebView
    {
        CONST_VTBL struct IWebViewVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebView_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebView_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebView_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebView_canShowMIMEType(This,mimeType,canShow)	\
    ( (This)->lpVtbl -> canShowMIMEType(This,mimeType,canShow) ) 

#define IWebView_canShowMIMETypeAsHTML(This,mimeType,canShow)	\
    ( (This)->lpVtbl -> canShowMIMETypeAsHTML(This,mimeType,canShow) ) 

#define IWebView_MIMETypesShownAsHTML(This,enumVariant)	\
    ( (This)->lpVtbl -> MIMETypesShownAsHTML(This,enumVariant) ) 

#define IWebView_setMIMETypesShownAsHTML(This,mimeTypes,cMimeTypes)	\
    ( (This)->lpVtbl -> setMIMETypesShownAsHTML(This,mimeTypes,cMimeTypes) ) 

#define IWebView_URLFromPasteboard(This,pasteboard,url)	\
    ( (This)->lpVtbl -> URLFromPasteboard(This,pasteboard,url) ) 

#define IWebView_URLTitleFromPasteboard(This,pasteboard,urlTitle)	\
    ( (This)->lpVtbl -> URLTitleFromPasteboard(This,pasteboard,urlTitle) ) 

#define IWebView_initWithFrame(This,frame,frameName,groupName)	\
    ( (This)->lpVtbl -> initWithFrame(This,frame,frameName,groupName) ) 

#define IWebView_setUIDelegate(This,d)	\
    ( (This)->lpVtbl -> setUIDelegate(This,d) ) 

#define IWebView_uiDelegate(This,d)	\
    ( (This)->lpVtbl -> uiDelegate(This,d) ) 

#define IWebView_setResourceLoadDelegate(This,d)	\
    ( (This)->lpVtbl -> setResourceLoadDelegate(This,d) ) 

#define IWebView_resourceLoadDelegate(This,d)	\
    ( (This)->lpVtbl -> resourceLoadDelegate(This,d) ) 

#define IWebView_setDownloadDelegate(This,d)	\
    ( (This)->lpVtbl -> setDownloadDelegate(This,d) ) 

#define IWebView_downloadDelegate(This,d)	\
    ( (This)->lpVtbl -> downloadDelegate(This,d) ) 

#define IWebView_setFrameLoadDelegate(This,d)	\
    ( (This)->lpVtbl -> setFrameLoadDelegate(This,d) ) 

#define IWebView_frameLoadDelegate(This,d)	\
    ( (This)->lpVtbl -> frameLoadDelegate(This,d) ) 

#define IWebView_setPolicyDelegate(This,d)	\
    ( (This)->lpVtbl -> setPolicyDelegate(This,d) ) 

#define IWebView_policyDelegate(This,d)	\
    ( (This)->lpVtbl -> policyDelegate(This,d) ) 

#define IWebView_mainFrame(This,frame)	\
    ( (This)->lpVtbl -> mainFrame(This,frame) ) 

#define IWebView_focusedFrame(This,frame)	\
    ( (This)->lpVtbl -> focusedFrame(This,frame) ) 

#define IWebView_backForwardList(This,list)	\
    ( (This)->lpVtbl -> backForwardList(This,list) ) 

#define IWebView_setMaintainsBackForwardList(This,flag)	\
    ( (This)->lpVtbl -> setMaintainsBackForwardList(This,flag) ) 

#define IWebView_goBack(This,succeeded)	\
    ( (This)->lpVtbl -> goBack(This,succeeded) ) 

#define IWebView_goForward(This,succeeded)	\
    ( (This)->lpVtbl -> goForward(This,succeeded) ) 

#define IWebView_goToBackForwardItem(This,item,succeeded)	\
    ( (This)->lpVtbl -> goToBackForwardItem(This,item,succeeded) ) 

#define IWebView_setTextSizeMultiplier(This,multiplier)	\
    ( (This)->lpVtbl -> setTextSizeMultiplier(This,multiplier) ) 

#define IWebView_textSizeMultiplier(This,multiplier)	\
    ( (This)->lpVtbl -> textSizeMultiplier(This,multiplier) ) 

#define IWebView_setApplicationNameForUserAgent(This,applicationName)	\
    ( (This)->lpVtbl -> setApplicationNameForUserAgent(This,applicationName) ) 

#define IWebView_applicationNameForUserAgent(This,applicationName)	\
    ( (This)->lpVtbl -> applicationNameForUserAgent(This,applicationName) ) 

#define IWebView_setCustomUserAgent(This,userAgentString)	\
    ( (This)->lpVtbl -> setCustomUserAgent(This,userAgentString) ) 

#define IWebView_customUserAgent(This,userAgentString)	\
    ( (This)->lpVtbl -> customUserAgent(This,userAgentString) ) 

#define IWebView_userAgentForURL(This,url,userAgent)	\
    ( (This)->lpVtbl -> userAgentForURL(This,url,userAgent) ) 

#define IWebView_supportsTextEncoding(This,supports)	\
    ( (This)->lpVtbl -> supportsTextEncoding(This,supports) ) 

#define IWebView_setCustomTextEncodingName(This,encodingName)	\
    ( (This)->lpVtbl -> setCustomTextEncodingName(This,encodingName) ) 

#define IWebView_customTextEncodingName(This,encodingName)	\
    ( (This)->lpVtbl -> customTextEncodingName(This,encodingName) ) 

#define IWebView_setMediaStyle(This,media)	\
    ( (This)->lpVtbl -> setMediaStyle(This,media) ) 

#define IWebView_mediaStyle(This,media)	\
    ( (This)->lpVtbl -> mediaStyle(This,media) ) 

#define IWebView_stringByEvaluatingJavaScriptFromString(This,script,result)	\
    ( (This)->lpVtbl -> stringByEvaluatingJavaScriptFromString(This,script,result) ) 

#define IWebView_windowScriptObject(This,webScriptObject)	\
    ( (This)->lpVtbl -> windowScriptObject(This,webScriptObject) ) 

#define IWebView_setPreferences(This,prefs)	\
    ( (This)->lpVtbl -> setPreferences(This,prefs) ) 

#define IWebView_preferences(This,prefs)	\
    ( (This)->lpVtbl -> preferences(This,prefs) ) 

#define IWebView_setPreferencesIdentifier(This,anIdentifier)	\
    ( (This)->lpVtbl -> setPreferencesIdentifier(This,anIdentifier) ) 

#define IWebView_preferencesIdentifier(This,anIdentifier)	\
    ( (This)->lpVtbl -> preferencesIdentifier(This,anIdentifier) ) 

#define IWebView_setHostWindow(This,window)	\
    ( (This)->lpVtbl -> setHostWindow(This,window) ) 

#define IWebView_hostWindow(This,window)	\
    ( (This)->lpVtbl -> hostWindow(This,window) ) 

#define IWebView_searchFor(This,str,forward,caseFlag,wrapFlag,found)	\
    ( (This)->lpVtbl -> searchFor(This,str,forward,caseFlag,wrapFlag,found) ) 

#define IWebView_registerViewClass(This,view,representation,forMIMEType)	\
    ( (This)->lpVtbl -> registerViewClass(This,view,representation,forMIMEType) ) 

#define IWebView_setGroupName(This,groupName)	\
    ( (This)->lpVtbl -> setGroupName(This,groupName) ) 

#define IWebView_groupName(This,groupName)	\
    ( (This)->lpVtbl -> groupName(This,groupName) ) 

#define IWebView_estimatedProgress(This,estimatedProgress)	\
    ( (This)->lpVtbl -> estimatedProgress(This,estimatedProgress) ) 

#define IWebView_isLoading(This,isLoading)	\
    ( (This)->lpVtbl -> isLoading(This,isLoading) ) 

#define IWebView_elementAtPoint(This,point,elementDictionary)	\
    ( (This)->lpVtbl -> elementAtPoint(This,point,elementDictionary) ) 

#define IWebView_pasteboardTypesForSelection(This,enumVariant)	\
    ( (This)->lpVtbl -> pasteboardTypesForSelection(This,enumVariant) ) 

#define IWebView_writeSelectionWithPasteboardTypes(This,types,cTypes,pasteboard)	\
    ( (This)->lpVtbl -> writeSelectionWithPasteboardTypes(This,types,cTypes,pasteboard) ) 

#define IWebView_pasteboardTypesForElement(This,elementDictionary,enumVariant)	\
    ( (This)->lpVtbl -> pasteboardTypesForElement(This,elementDictionary,enumVariant) ) 

#define IWebView_writeElement(This,elementDictionary,withPasteboardTypes,cWithPasteboardTypes,pasteboard)	\
    ( (This)->lpVtbl -> writeElement(This,elementDictionary,withPasteboardTypes,cWithPasteboardTypes,pasteboard) ) 

#define IWebView_selectedText(This,text)	\
    ( (This)->lpVtbl -> selectedText(This,text) ) 

#define IWebView_centerSelectionInVisibleArea(This,sender)	\
    ( (This)->lpVtbl -> centerSelectionInVisibleArea(This,sender) ) 

#define IWebView_moveDragCaretToPoint(This,point)	\
    ( (This)->lpVtbl -> moveDragCaretToPoint(This,point) ) 

#define IWebView_removeDragCaret(This)	\
    ( (This)->lpVtbl -> removeDragCaret(This) ) 

#define IWebView_setDrawsBackground(This,drawsBackground)	\
    ( (This)->lpVtbl -> setDrawsBackground(This,drawsBackground) ) 

#define IWebView_drawsBackground(This,drawsBackground)	\
    ( (This)->lpVtbl -> drawsBackground(This,drawsBackground) ) 

#define IWebView_setMainFrameURL(This,urlString)	\
    ( (This)->lpVtbl -> setMainFrameURL(This,urlString) ) 

#define IWebView_mainFrameURL(This,urlString)	\
    ( (This)->lpVtbl -> mainFrameURL(This,urlString) ) 

#define IWebView_mainFrameDocument(This,document)	\
    ( (This)->lpVtbl -> mainFrameDocument(This,document) ) 

#define IWebView_mainFrameTitle(This,title)	\
    ( (This)->lpVtbl -> mainFrameTitle(This,title) ) 

#define IWebView_mainFrameIcon(This,hBitmap)	\
    ( (This)->lpVtbl -> mainFrameIcon(This,hBitmap) ) 

#define IWebView_registerURLSchemeAsLocal(This,scheme)	\
    ( (This)->lpVtbl -> registerURLSchemeAsLocal(This,scheme) ) 

#define IWebView_close(This)	\
    ( (This)->lpVtbl -> close(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebView_INTERFACE_DEFINED__ */


#ifndef __IWebIBActions_INTERFACE_DEFINED__
#define __IWebIBActions_INTERFACE_DEFINED__

/* interface IWebIBActions */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebIBActions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8F0E3A30-B924-44f8-990A-1AE61ED6C632")
    IWebIBActions : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE takeStringURLFrom( 
            /* [in] */ IUnknown *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE stopLoading( 
            /* [in] */ IUnknown *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE reload( 
            /* [in] */ IUnknown *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE canGoBack( 
            /* [in] */ IUnknown *sender,
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE goBack( 
            /* [in] */ IUnknown *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE canGoForward( 
            /* [in] */ IUnknown *sender,
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE goForward( 
            /* [in] */ IUnknown *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE canMakeTextLarger( 
            /* [in] */ IUnknown *sender,
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE makeTextLarger( 
            /* [in] */ IUnknown *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE canMakeTextSmaller( 
            /* [in] */ IUnknown *sender,
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE makeTextSmaller( 
            /* [in] */ IUnknown *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE canMakeTextStandardSize( 
            /* [in] */ IUnknown *sender,
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE makeTextStandardSize( 
            /* [in] */ IUnknown *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE toggleContinuousSpellChecking( 
            /* [in] */ IUnknown *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE toggleSmartInsertDelete( 
            /* [in] */ IUnknown *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE toggleGrammarChecking( 
            /* [in] */ IUnknown *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setPageSizeMultiplier( 
            /* [in] */ float multiplier) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE pageSizeMultiplier( 
            /* [retval][out] */ float *multiplier) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE canZoomPageIn( 
            /* [in] */ IUnknown *sender,
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE zoomPageIn( 
            /* [in] */ IUnknown *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE canZoomPageOut( 
            /* [in] */ IUnknown *sender,
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE zoomPageOut( 
            /* [in] */ IUnknown *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE canResetPageZoom( 
            /* [in] */ IUnknown *sender,
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE resetPageZoom( 
            /* [in] */ IUnknown *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE reloadFromOrigin( 
            /* [in] */ IUnknown *sender) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebIBActionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebIBActions * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebIBActions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebIBActions * This);
        
        HRESULT ( STDMETHODCALLTYPE *takeStringURLFrom )( 
            IWebIBActions * This,
            /* [in] */ IUnknown *sender);
        
        HRESULT ( STDMETHODCALLTYPE *stopLoading )( 
            IWebIBActions * This,
            /* [in] */ IUnknown *sender);
        
        HRESULT ( STDMETHODCALLTYPE *reload )( 
            IWebIBActions * This,
            /* [in] */ IUnknown *sender);
        
        HRESULT ( STDMETHODCALLTYPE *canGoBack )( 
            IWebIBActions * This,
            /* [in] */ IUnknown *sender,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *goBack )( 
            IWebIBActions * This,
            /* [in] */ IUnknown *sender);
        
        HRESULT ( STDMETHODCALLTYPE *canGoForward )( 
            IWebIBActions * This,
            /* [in] */ IUnknown *sender,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *goForward )( 
            IWebIBActions * This,
            /* [in] */ IUnknown *sender);
        
        HRESULT ( STDMETHODCALLTYPE *canMakeTextLarger )( 
            IWebIBActions * This,
            /* [in] */ IUnknown *sender,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *makeTextLarger )( 
            IWebIBActions * This,
            /* [in] */ IUnknown *sender);
        
        HRESULT ( STDMETHODCALLTYPE *canMakeTextSmaller )( 
            IWebIBActions * This,
            /* [in] */ IUnknown *sender,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *makeTextSmaller )( 
            IWebIBActions * This,
            /* [in] */ IUnknown *sender);
        
        HRESULT ( STDMETHODCALLTYPE *canMakeTextStandardSize )( 
            IWebIBActions * This,
            /* [in] */ IUnknown *sender,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *makeTextStandardSize )( 
            IWebIBActions * This,
            /* [in] */ IUnknown *sender);
        
        HRESULT ( STDMETHODCALLTYPE *toggleContinuousSpellChecking )( 
            IWebIBActions * This,
            /* [in] */ IUnknown *sender);
        
        HRESULT ( STDMETHODCALLTYPE *toggleSmartInsertDelete )( 
            IWebIBActions * This,
            /* [in] */ IUnknown *sender);
        
        HRESULT ( STDMETHODCALLTYPE *toggleGrammarChecking )( 
            IWebIBActions * This,
            /* [in] */ IUnknown *sender);
        
        HRESULT ( STDMETHODCALLTYPE *setPageSizeMultiplier )( 
            IWebIBActions * This,
            /* [in] */ float multiplier);
        
        HRESULT ( STDMETHODCALLTYPE *pageSizeMultiplier )( 
            IWebIBActions * This,
            /* [retval][out] */ float *multiplier);
        
        HRESULT ( STDMETHODCALLTYPE *canZoomPageIn )( 
            IWebIBActions * This,
            /* [in] */ IUnknown *sender,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *zoomPageIn )( 
            IWebIBActions * This,
            /* [in] */ IUnknown *sender);
        
        HRESULT ( STDMETHODCALLTYPE *canZoomPageOut )( 
            IWebIBActions * This,
            /* [in] */ IUnknown *sender,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *zoomPageOut )( 
            IWebIBActions * This,
            /* [in] */ IUnknown *sender);
        
        HRESULT ( STDMETHODCALLTYPE *canResetPageZoom )( 
            IWebIBActions * This,
            /* [in] */ IUnknown *sender,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *resetPageZoom )( 
            IWebIBActions * This,
            /* [in] */ IUnknown *sender);
        
        HRESULT ( STDMETHODCALLTYPE *reloadFromOrigin )( 
            IWebIBActions * This,
            /* [in] */ IUnknown *sender);
        
        END_INTERFACE
    } IWebIBActionsVtbl;

    interface IWebIBActions
    {
        CONST_VTBL struct IWebIBActionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebIBActions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebIBActions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebIBActions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebIBActions_takeStringURLFrom(This,sender)	\
    ( (This)->lpVtbl -> takeStringURLFrom(This,sender) ) 

#define IWebIBActions_stopLoading(This,sender)	\
    ( (This)->lpVtbl -> stopLoading(This,sender) ) 

#define IWebIBActions_reload(This,sender)	\
    ( (This)->lpVtbl -> reload(This,sender) ) 

#define IWebIBActions_canGoBack(This,sender,result)	\
    ( (This)->lpVtbl -> canGoBack(This,sender,result) ) 

#define IWebIBActions_goBack(This,sender)	\
    ( (This)->lpVtbl -> goBack(This,sender) ) 

#define IWebIBActions_canGoForward(This,sender,result)	\
    ( (This)->lpVtbl -> canGoForward(This,sender,result) ) 

#define IWebIBActions_goForward(This,sender)	\
    ( (This)->lpVtbl -> goForward(This,sender) ) 

#define IWebIBActions_canMakeTextLarger(This,sender,result)	\
    ( (This)->lpVtbl -> canMakeTextLarger(This,sender,result) ) 

#define IWebIBActions_makeTextLarger(This,sender)	\
    ( (This)->lpVtbl -> makeTextLarger(This,sender) ) 

#define IWebIBActions_canMakeTextSmaller(This,sender,result)	\
    ( (This)->lpVtbl -> canMakeTextSmaller(This,sender,result) ) 

#define IWebIBActions_makeTextSmaller(This,sender)	\
    ( (This)->lpVtbl -> makeTextSmaller(This,sender) ) 

#define IWebIBActions_canMakeTextStandardSize(This,sender,result)	\
    ( (This)->lpVtbl -> canMakeTextStandardSize(This,sender,result) ) 

#define IWebIBActions_makeTextStandardSize(This,sender)	\
    ( (This)->lpVtbl -> makeTextStandardSize(This,sender) ) 

#define IWebIBActions_toggleContinuousSpellChecking(This,sender)	\
    ( (This)->lpVtbl -> toggleContinuousSpellChecking(This,sender) ) 

#define IWebIBActions_toggleSmartInsertDelete(This,sender)	\
    ( (This)->lpVtbl -> toggleSmartInsertDelete(This,sender) ) 

#define IWebIBActions_toggleGrammarChecking(This,sender)	\
    ( (This)->lpVtbl -> toggleGrammarChecking(This,sender) ) 

#define IWebIBActions_setPageSizeMultiplier(This,multiplier)	\
    ( (This)->lpVtbl -> setPageSizeMultiplier(This,multiplier) ) 

#define IWebIBActions_pageSizeMultiplier(This,multiplier)	\
    ( (This)->lpVtbl -> pageSizeMultiplier(This,multiplier) ) 

#define IWebIBActions_canZoomPageIn(This,sender,result)	\
    ( (This)->lpVtbl -> canZoomPageIn(This,sender,result) ) 

#define IWebIBActions_zoomPageIn(This,sender)	\
    ( (This)->lpVtbl -> zoomPageIn(This,sender) ) 

#define IWebIBActions_canZoomPageOut(This,sender,result)	\
    ( (This)->lpVtbl -> canZoomPageOut(This,sender,result) ) 

#define IWebIBActions_zoomPageOut(This,sender)	\
    ( (This)->lpVtbl -> zoomPageOut(This,sender) ) 

#define IWebIBActions_canResetPageZoom(This,sender,result)	\
    ( (This)->lpVtbl -> canResetPageZoom(This,sender,result) ) 

#define IWebIBActions_resetPageZoom(This,sender)	\
    ( (This)->lpVtbl -> resetPageZoom(This,sender) ) 

#define IWebIBActions_reloadFromOrigin(This,sender)	\
    ( (This)->lpVtbl -> reloadFromOrigin(This,sender) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebIBActions_INTERFACE_DEFINED__ */


#ifndef __IWebViewCSS_INTERFACE_DEFINED__
#define __IWebViewCSS_INTERFACE_DEFINED__

/* interface IWebViewCSS */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebViewCSS;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ADF68A8C-336F-405c-A053-3D11A9D5B092")
    IWebViewCSS : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE computedStyleForElement( 
            /* [in] */ IDOMElement *element,
            /* [in] */ BSTR pseudoElement,
            /* [retval][out] */ IDOMCSSStyleDeclaration **style) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebViewCSSVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebViewCSS * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebViewCSS * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebViewCSS * This);
        
        HRESULT ( STDMETHODCALLTYPE *computedStyleForElement )( 
            IWebViewCSS * This,
            /* [in] */ IDOMElement *element,
            /* [in] */ BSTR pseudoElement,
            /* [retval][out] */ IDOMCSSStyleDeclaration **style);
        
        END_INTERFACE
    } IWebViewCSSVtbl;

    interface IWebViewCSS
    {
        CONST_VTBL struct IWebViewCSSVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebViewCSS_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebViewCSS_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebViewCSS_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebViewCSS_computedStyleForElement(This,element,pseudoElement,style)	\
    ( (This)->lpVtbl -> computedStyleForElement(This,element,pseudoElement,style) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebViewCSS_INTERFACE_DEFINED__ */


#ifndef __IWebViewEditing_INTERFACE_DEFINED__
#define __IWebViewEditing_INTERFACE_DEFINED__

/* interface IWebViewEditing */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebViewEditing;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("07BDAC9A-19A1-4086-864D-BAD9E0F00D5C")
    IWebViewEditing : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE editableDOMRangeForPoint( 
            /* [in] */ LPPOINT point,
            /* [retval][out] */ IDOMRange **range) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setSelectedDOMRange( 
            /* [in] */ IDOMRange *range,
            /* [in] */ WebSelectionAffinity affinity) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE selectedDOMRange( 
            /* [retval][out] */ IDOMRange **range) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE selectionAffinity( 
            /* [retval][out][retval][out] */ WebSelectionAffinity *affinity) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setEditable( 
            /* [in] */ BOOL flag) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isEditable( 
            /* [retval][out] */ BOOL *isEditable) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setTypingStyle( 
            /* [in] */ IDOMCSSStyleDeclaration *style) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE typingStyle( 
            /* [retval][out] */ IDOMCSSStyleDeclaration **style) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setSmartInsertDeleteEnabled( 
            /* [in] */ BOOL flag) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE smartInsertDeleteEnabled( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setContinuousSpellCheckingEnabled( 
            /* [in] */ BOOL flag) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isContinuousSpellCheckingEnabled( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE spellCheckerDocumentTag( 
            /* [retval][out] */ int *tag) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE undoManager( 
            /* [retval][out] */ IWebUndoManager **manager) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setEditingDelegate( 
            /* [in] */ IWebEditingDelegate *d) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE editingDelegate( 
            /* [retval][out] */ IWebEditingDelegate **d) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE styleDeclarationWithText( 
            /* [in] */ BSTR text,
            /* [retval][out] */ IDOMCSSStyleDeclaration **style) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE hasSelectedRange( 
            /* [retval][out] */ BOOL *hasSelectedRange) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE cutEnabled( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE copyEnabled( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE pasteEnabled( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE deleteEnabled( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE editingEnabled( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isGrammarCheckingEnabled( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setGrammarCheckingEnabled( 
            BOOL enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setSelectTrailingWhitespaceEnabled( 
            /* [in] */ BOOL flag) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isSelectTrailingWhitespaceEnabled( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebViewEditingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebViewEditing * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebViewEditing * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebViewEditing * This);
        
        HRESULT ( STDMETHODCALLTYPE *editableDOMRangeForPoint )( 
            IWebViewEditing * This,
            /* [in] */ LPPOINT point,
            /* [retval][out] */ IDOMRange **range);
        
        HRESULT ( STDMETHODCALLTYPE *setSelectedDOMRange )( 
            IWebViewEditing * This,
            /* [in] */ IDOMRange *range,
            /* [in] */ WebSelectionAffinity affinity);
        
        HRESULT ( STDMETHODCALLTYPE *selectedDOMRange )( 
            IWebViewEditing * This,
            /* [retval][out] */ IDOMRange **range);
        
        HRESULT ( STDMETHODCALLTYPE *selectionAffinity )( 
            IWebViewEditing * This,
            /* [retval][out][retval][out] */ WebSelectionAffinity *affinity);
        
        HRESULT ( STDMETHODCALLTYPE *setEditable )( 
            IWebViewEditing * This,
            /* [in] */ BOOL flag);
        
        HRESULT ( STDMETHODCALLTYPE *isEditable )( 
            IWebViewEditing * This,
            /* [retval][out] */ BOOL *isEditable);
        
        HRESULT ( STDMETHODCALLTYPE *setTypingStyle )( 
            IWebViewEditing * This,
            /* [in] */ IDOMCSSStyleDeclaration *style);
        
        HRESULT ( STDMETHODCALLTYPE *typingStyle )( 
            IWebViewEditing * This,
            /* [retval][out] */ IDOMCSSStyleDeclaration **style);
        
        HRESULT ( STDMETHODCALLTYPE *setSmartInsertDeleteEnabled )( 
            IWebViewEditing * This,
            /* [in] */ BOOL flag);
        
        HRESULT ( STDMETHODCALLTYPE *smartInsertDeleteEnabled )( 
            IWebViewEditing * This,
            /* [retval][out] */ BOOL *enabled);
        
        HRESULT ( STDMETHODCALLTYPE *setContinuousSpellCheckingEnabled )( 
            IWebViewEditing * This,
            /* [in] */ BOOL flag);
        
        HRESULT ( STDMETHODCALLTYPE *isContinuousSpellCheckingEnabled )( 
            IWebViewEditing * This,
            /* [retval][out] */ BOOL *enabled);
        
        HRESULT ( STDMETHODCALLTYPE *spellCheckerDocumentTag )( 
            IWebViewEditing * This,
            /* [retval][out] */ int *tag);
        
        HRESULT ( STDMETHODCALLTYPE *undoManager )( 
            IWebViewEditing * This,
            /* [retval][out] */ IWebUndoManager **manager);
        
        HRESULT ( STDMETHODCALLTYPE *setEditingDelegate )( 
            IWebViewEditing * This,
            /* [in] */ IWebEditingDelegate *d);
        
        HRESULT ( STDMETHODCALLTYPE *editingDelegate )( 
            IWebViewEditing * This,
            /* [retval][out] */ IWebEditingDelegate **d);
        
        HRESULT ( STDMETHODCALLTYPE *styleDeclarationWithText )( 
            IWebViewEditing * This,
            /* [in] */ BSTR text,
            /* [retval][out] */ IDOMCSSStyleDeclaration **style);
        
        HRESULT ( STDMETHODCALLTYPE *hasSelectedRange )( 
            IWebViewEditing * This,
            /* [retval][out] */ BOOL *hasSelectedRange);
        
        HRESULT ( STDMETHODCALLTYPE *cutEnabled )( 
            IWebViewEditing * This,
            /* [retval][out] */ BOOL *enabled);
        
        HRESULT ( STDMETHODCALLTYPE *copyEnabled )( 
            IWebViewEditing * This,
            /* [retval][out] */ BOOL *enabled);
        
        HRESULT ( STDMETHODCALLTYPE *pasteEnabled )( 
            IWebViewEditing * This,
            /* [retval][out] */ BOOL *enabled);
        
        HRESULT ( STDMETHODCALLTYPE *deleteEnabled )( 
            IWebViewEditing * This,
            /* [retval][out] */ BOOL *enabled);
        
        HRESULT ( STDMETHODCALLTYPE *editingEnabled )( 
            IWebViewEditing * This,
            /* [retval][out] */ BOOL *enabled);
        
        HRESULT ( STDMETHODCALLTYPE *isGrammarCheckingEnabled )( 
            IWebViewEditing * This,
            /* [retval][out] */ BOOL *enabled);
        
        HRESULT ( STDMETHODCALLTYPE *setGrammarCheckingEnabled )( 
            IWebViewEditing * This,
            BOOL enabled);
        
        HRESULT ( STDMETHODCALLTYPE *setSelectTrailingWhitespaceEnabled )( 
            IWebViewEditing * This,
            /* [in] */ BOOL flag);
        
        HRESULT ( STDMETHODCALLTYPE *isSelectTrailingWhitespaceEnabled )( 
            IWebViewEditing * This,
            /* [retval][out] */ BOOL *enabled);
        
        END_INTERFACE
    } IWebViewEditingVtbl;

    interface IWebViewEditing
    {
        CONST_VTBL struct IWebViewEditingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebViewEditing_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebViewEditing_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebViewEditing_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebViewEditing_editableDOMRangeForPoint(This,point,range)	\
    ( (This)->lpVtbl -> editableDOMRangeForPoint(This,point,range) ) 

#define IWebViewEditing_setSelectedDOMRange(This,range,affinity)	\
    ( (This)->lpVtbl -> setSelectedDOMRange(This,range,affinity) ) 

#define IWebViewEditing_selectedDOMRange(This,range)	\
    ( (This)->lpVtbl -> selectedDOMRange(This,range) ) 

#define IWebViewEditing_selectionAffinity(This,affinity)	\
    ( (This)->lpVtbl -> selectionAffinity(This,affinity) ) 

#define IWebViewEditing_setEditable(This,flag)	\
    ( (This)->lpVtbl -> setEditable(This,flag) ) 

#define IWebViewEditing_isEditable(This,isEditable)	\
    ( (This)->lpVtbl -> isEditable(This,isEditable) ) 

#define IWebViewEditing_setTypingStyle(This,style)	\
    ( (This)->lpVtbl -> setTypingStyle(This,style) ) 

#define IWebViewEditing_typingStyle(This,style)	\
    ( (This)->lpVtbl -> typingStyle(This,style) ) 

#define IWebViewEditing_setSmartInsertDeleteEnabled(This,flag)	\
    ( (This)->lpVtbl -> setSmartInsertDeleteEnabled(This,flag) ) 

#define IWebViewEditing_smartInsertDeleteEnabled(This,enabled)	\
    ( (This)->lpVtbl -> smartInsertDeleteEnabled(This,enabled) ) 

#define IWebViewEditing_setContinuousSpellCheckingEnabled(This,flag)	\
    ( (This)->lpVtbl -> setContinuousSpellCheckingEnabled(This,flag) ) 

#define IWebViewEditing_isContinuousSpellCheckingEnabled(This,enabled)	\
    ( (This)->lpVtbl -> isContinuousSpellCheckingEnabled(This,enabled) ) 

#define IWebViewEditing_spellCheckerDocumentTag(This,tag)	\
    ( (This)->lpVtbl -> spellCheckerDocumentTag(This,tag) ) 

#define IWebViewEditing_undoManager(This,manager)	\
    ( (This)->lpVtbl -> undoManager(This,manager) ) 

#define IWebViewEditing_setEditingDelegate(This,d)	\
    ( (This)->lpVtbl -> setEditingDelegate(This,d) ) 

#define IWebViewEditing_editingDelegate(This,d)	\
    ( (This)->lpVtbl -> editingDelegate(This,d) ) 

#define IWebViewEditing_styleDeclarationWithText(This,text,style)	\
    ( (This)->lpVtbl -> styleDeclarationWithText(This,text,style) ) 

#define IWebViewEditing_hasSelectedRange(This,hasSelectedRange)	\
    ( (This)->lpVtbl -> hasSelectedRange(This,hasSelectedRange) ) 

#define IWebViewEditing_cutEnabled(This,enabled)	\
    ( (This)->lpVtbl -> cutEnabled(This,enabled) ) 

#define IWebViewEditing_copyEnabled(This,enabled)	\
    ( (This)->lpVtbl -> copyEnabled(This,enabled) ) 

#define IWebViewEditing_pasteEnabled(This,enabled)	\
    ( (This)->lpVtbl -> pasteEnabled(This,enabled) ) 

#define IWebViewEditing_deleteEnabled(This,enabled)	\
    ( (This)->lpVtbl -> deleteEnabled(This,enabled) ) 

#define IWebViewEditing_editingEnabled(This,enabled)	\
    ( (This)->lpVtbl -> editingEnabled(This,enabled) ) 

#define IWebViewEditing_isGrammarCheckingEnabled(This,enabled)	\
    ( (This)->lpVtbl -> isGrammarCheckingEnabled(This,enabled) ) 

#define IWebViewEditing_setGrammarCheckingEnabled(This,enabled)	\
    ( (This)->lpVtbl -> setGrammarCheckingEnabled(This,enabled) ) 

#define IWebViewEditing_setSelectTrailingWhitespaceEnabled(This,flag)	\
    ( (This)->lpVtbl -> setSelectTrailingWhitespaceEnabled(This,flag) ) 

#define IWebViewEditing_isSelectTrailingWhitespaceEnabled(This,enabled)	\
    ( (This)->lpVtbl -> isSelectTrailingWhitespaceEnabled(This,enabled) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebViewEditing_INTERFACE_DEFINED__ */


#ifndef __IWebViewUndoableEditing_INTERFACE_DEFINED__
#define __IWebViewUndoableEditing_INTERFACE_DEFINED__

/* interface IWebViewUndoableEditing */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebViewUndoableEditing;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("639E7121-13C8-4a12-BC18-6E1F3D68F3C3")
    IWebViewUndoableEditing : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE replaceSelectionWithNode( 
            /* [in] */ IDOMNode *node) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE replaceSelectionWithText( 
            /* [in] */ BSTR text) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE replaceSelectionWithMarkupString( 
            /* [in] */ BSTR markupString) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE replaceSelectionWithArchive( 
            /* [in] */ IWebArchive *archive) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE deleteSelection( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE clearSelection( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE applyStyle( 
            /* [in] */ IDOMCSSStyleDeclaration *style) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebViewUndoableEditingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebViewUndoableEditing * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebViewUndoableEditing * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebViewUndoableEditing * This);
        
        HRESULT ( STDMETHODCALLTYPE *replaceSelectionWithNode )( 
            IWebViewUndoableEditing * This,
            /* [in] */ IDOMNode *node);
        
        HRESULT ( STDMETHODCALLTYPE *replaceSelectionWithText )( 
            IWebViewUndoableEditing * This,
            /* [in] */ BSTR text);
        
        HRESULT ( STDMETHODCALLTYPE *replaceSelectionWithMarkupString )( 
            IWebViewUndoableEditing * This,
            /* [in] */ BSTR markupString);
        
        HRESULT ( STDMETHODCALLTYPE *replaceSelectionWithArchive )( 
            IWebViewUndoableEditing * This,
            /* [in] */ IWebArchive *archive);
        
        HRESULT ( STDMETHODCALLTYPE *deleteSelection )( 
            IWebViewUndoableEditing * This);
        
        HRESULT ( STDMETHODCALLTYPE *clearSelection )( 
            IWebViewUndoableEditing * This);
        
        HRESULT ( STDMETHODCALLTYPE *applyStyle )( 
            IWebViewUndoableEditing * This,
            /* [in] */ IDOMCSSStyleDeclaration *style);
        
        END_INTERFACE
    } IWebViewUndoableEditingVtbl;

    interface IWebViewUndoableEditing
    {
        CONST_VTBL struct IWebViewUndoableEditingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebViewUndoableEditing_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebViewUndoableEditing_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebViewUndoableEditing_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebViewUndoableEditing_replaceSelectionWithNode(This,node)	\
    ( (This)->lpVtbl -> replaceSelectionWithNode(This,node) ) 

#define IWebViewUndoableEditing_replaceSelectionWithText(This,text)	\
    ( (This)->lpVtbl -> replaceSelectionWithText(This,text) ) 

#define IWebViewUndoableEditing_replaceSelectionWithMarkupString(This,markupString)	\
    ( (This)->lpVtbl -> replaceSelectionWithMarkupString(This,markupString) ) 

#define IWebViewUndoableEditing_replaceSelectionWithArchive(This,archive)	\
    ( (This)->lpVtbl -> replaceSelectionWithArchive(This,archive) ) 

#define IWebViewUndoableEditing_deleteSelection(This)	\
    ( (This)->lpVtbl -> deleteSelection(This) ) 

#define IWebViewUndoableEditing_clearSelection(This)	\
    ( (This)->lpVtbl -> clearSelection(This) ) 

#define IWebViewUndoableEditing_applyStyle(This,style)	\
    ( (This)->lpVtbl -> applyStyle(This,style) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebViewUndoableEditing_INTERFACE_DEFINED__ */


#ifndef __IWebViewEditingActions_INTERFACE_DEFINED__
#define __IWebViewEditingActions_INTERFACE_DEFINED__

/* interface IWebViewEditingActions */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebViewEditingActions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7E066C42-8E81-4778-888D-D6CC93E27D4C")
    IWebViewEditingActions : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE copy( 
            /* [in] */ IUnknown *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE cut( 
            /* [in] */ IUnknown *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE paste( 
            /* [in] */ IUnknown *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE copyURL( 
            /* [in] */ BSTR url) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE copyFont( 
            /* [in] */ IUnknown *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE pasteFont( 
            /* [in] */ IUnknown *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE delete_( 
            /* [in] */ IUnknown *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE pasteAsPlainText( 
            /* [in] */ IUnknown *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE pasteAsRichText( 
            /* [in] */ IUnknown *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE changeFont( 
            /* [in] */ IUnknown *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE changeAttributes( 
            /* [in] */ IUnknown *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE changeDocumentBackgroundColor( 
            /* [in] */ IUnknown *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE changeColor( 
            /* [in] */ IUnknown *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE alignCenter( 
            /* [in] */ IUnknown *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE alignJustified( 
            /* [in] */ IUnknown *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE alignLeft( 
            /* [in] */ IUnknown *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE alignRight( 
            /* [in] */ IUnknown *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE checkSpelling( 
            /* [in] */ IUnknown *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE showGuessPanel( 
            /* [in] */ IUnknown *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE performFindPanelAction( 
            /* [in] */ IUnknown *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE startSpeaking( 
            /* [in] */ IUnknown *sender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE stopSpeaking( 
            /* [in] */ IUnknown *sender) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebViewEditingActionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebViewEditingActions * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebViewEditingActions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebViewEditingActions * This);
        
        HRESULT ( STDMETHODCALLTYPE *copy )( 
            IWebViewEditingActions * This,
            /* [in] */ IUnknown *sender);
        
        HRESULT ( STDMETHODCALLTYPE *cut )( 
            IWebViewEditingActions * This,
            /* [in] */ IUnknown *sender);
        
        HRESULT ( STDMETHODCALLTYPE *paste )( 
            IWebViewEditingActions * This,
            /* [in] */ IUnknown *sender);
        
        HRESULT ( STDMETHODCALLTYPE *copyURL )( 
            IWebViewEditingActions * This,
            /* [in] */ BSTR url);
        
        HRESULT ( STDMETHODCALLTYPE *copyFont )( 
            IWebViewEditingActions * This,
            /* [in] */ IUnknown *sender);
        
        HRESULT ( STDMETHODCALLTYPE *pasteFont )( 
            IWebViewEditingActions * This,
            /* [in] */ IUnknown *sender);
        
        HRESULT ( STDMETHODCALLTYPE *delete_ )( 
            IWebViewEditingActions * This,
            /* [in] */ IUnknown *sender);
        
        HRESULT ( STDMETHODCALLTYPE *pasteAsPlainText )( 
            IWebViewEditingActions * This,
            /* [in] */ IUnknown *sender);
        
        HRESULT ( STDMETHODCALLTYPE *pasteAsRichText )( 
            IWebViewEditingActions * This,
            /* [in] */ IUnknown *sender);
        
        HRESULT ( STDMETHODCALLTYPE *changeFont )( 
            IWebViewEditingActions * This,
            /* [in] */ IUnknown *sender);
        
        HRESULT ( STDMETHODCALLTYPE *changeAttributes )( 
            IWebViewEditingActions * This,
            /* [in] */ IUnknown *sender);
        
        HRESULT ( STDMETHODCALLTYPE *changeDocumentBackgroundColor )( 
            IWebViewEditingActions * This,
            /* [in] */ IUnknown *sender);
        
        HRESULT ( STDMETHODCALLTYPE *changeColor )( 
            IWebViewEditingActions * This,
            /* [in] */ IUnknown *sender);
        
        HRESULT ( STDMETHODCALLTYPE *alignCenter )( 
            IWebViewEditingActions * This,
            /* [in] */ IUnknown *sender);
        
        HRESULT ( STDMETHODCALLTYPE *alignJustified )( 
            IWebViewEditingActions * This,
            /* [in] */ IUnknown *sender);
        
        HRESULT ( STDMETHODCALLTYPE *alignLeft )( 
            IWebViewEditingActions * This,
            /* [in] */ IUnknown *sender);
        
        HRESULT ( STDMETHODCALLTYPE *alignRight )( 
            IWebViewEditingActions * This,
            /* [in] */ IUnknown *sender);
        
        HRESULT ( STDMETHODCALLTYPE *checkSpelling )( 
            IWebViewEditingActions * This,
            /* [in] */ IUnknown *sender);
        
        HRESULT ( STDMETHODCALLTYPE *showGuessPanel )( 
            IWebViewEditingActions * This,
            /* [in] */ IUnknown *sender);
        
        HRESULT ( STDMETHODCALLTYPE *performFindPanelAction )( 
            IWebViewEditingActions * This,
            /* [in] */ IUnknown *sender);
        
        HRESULT ( STDMETHODCALLTYPE *startSpeaking )( 
            IWebViewEditingActions * This,
            /* [in] */ IUnknown *sender);
        
        HRESULT ( STDMETHODCALLTYPE *stopSpeaking )( 
            IWebViewEditingActions * This,
            /* [in] */ IUnknown *sender);
        
        END_INTERFACE
    } IWebViewEditingActionsVtbl;

    interface IWebViewEditingActions
    {
        CONST_VTBL struct IWebViewEditingActionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebViewEditingActions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebViewEditingActions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebViewEditingActions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebViewEditingActions_copy(This,sender)	\
    ( (This)->lpVtbl -> copy(This,sender) ) 

#define IWebViewEditingActions_cut(This,sender)	\
    ( (This)->lpVtbl -> cut(This,sender) ) 

#define IWebViewEditingActions_paste(This,sender)	\
    ( (This)->lpVtbl -> paste(This,sender) ) 

#define IWebViewEditingActions_copyURL(This,url)	\
    ( (This)->lpVtbl -> copyURL(This,url) ) 

#define IWebViewEditingActions_copyFont(This,sender)	\
    ( (This)->lpVtbl -> copyFont(This,sender) ) 

#define IWebViewEditingActions_pasteFont(This,sender)	\
    ( (This)->lpVtbl -> pasteFont(This,sender) ) 

#define IWebViewEditingActions_delete_(This,sender)	\
    ( (This)->lpVtbl -> delete_(This,sender) ) 

#define IWebViewEditingActions_pasteAsPlainText(This,sender)	\
    ( (This)->lpVtbl -> pasteAsPlainText(This,sender) ) 

#define IWebViewEditingActions_pasteAsRichText(This,sender)	\
    ( (This)->lpVtbl -> pasteAsRichText(This,sender) ) 

#define IWebViewEditingActions_changeFont(This,sender)	\
    ( (This)->lpVtbl -> changeFont(This,sender) ) 

#define IWebViewEditingActions_changeAttributes(This,sender)	\
    ( (This)->lpVtbl -> changeAttributes(This,sender) ) 

#define IWebViewEditingActions_changeDocumentBackgroundColor(This,sender)	\
    ( (This)->lpVtbl -> changeDocumentBackgroundColor(This,sender) ) 

#define IWebViewEditingActions_changeColor(This,sender)	\
    ( (This)->lpVtbl -> changeColor(This,sender) ) 

#define IWebViewEditingActions_alignCenter(This,sender)	\
    ( (This)->lpVtbl -> alignCenter(This,sender) ) 

#define IWebViewEditingActions_alignJustified(This,sender)	\
    ( (This)->lpVtbl -> alignJustified(This,sender) ) 

#define IWebViewEditingActions_alignLeft(This,sender)	\
    ( (This)->lpVtbl -> alignLeft(This,sender) ) 

#define IWebViewEditingActions_alignRight(This,sender)	\
    ( (This)->lpVtbl -> alignRight(This,sender) ) 

#define IWebViewEditingActions_checkSpelling(This,sender)	\
    ( (This)->lpVtbl -> checkSpelling(This,sender) ) 

#define IWebViewEditingActions_showGuessPanel(This,sender)	\
    ( (This)->lpVtbl -> showGuessPanel(This,sender) ) 

#define IWebViewEditingActions_performFindPanelAction(This,sender)	\
    ( (This)->lpVtbl -> performFindPanelAction(This,sender) ) 

#define IWebViewEditingActions_startSpeaking(This,sender)	\
    ( (This)->lpVtbl -> startSpeaking(This,sender) ) 

#define IWebViewEditingActions_stopSpeaking(This,sender)	\
    ( (This)->lpVtbl -> stopSpeaking(This,sender) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebViewEditingActions_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0148 */
/* [local] */ 

#define WebViewWillCloseNotification L"WebViewWillCloseNotification"









typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_WebKit_0000_0148_0001
    {	WebInjectAtDocumentStart	= 0,
	WebInjectAtDocumentEnd	= ( WebInjectAtDocumentStart + 1 ) 
    } 	WebUserScriptInjectionTime;



extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0148_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0148_v0_0_s_ifspec;

#ifndef __IWebViewPrivate_INTERFACE_DEFINED__
#define __IWebViewPrivate_INTERFACE_DEFINED__

/* interface IWebViewPrivate */
/* [unique][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IWebViewPrivate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("44914369-DEB5-4fcf-A6A3-30C02E73154F")
    IWebViewPrivate : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE setInViewSourceMode( 
            /* [in] */ BOOL flag) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE inViewSourceMode( 
            /* [retval][out] */ BOOL *flag) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE viewWindow( 
            /* [retval][out] */ OLE_HANDLE *window) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setFormDelegate( 
            /* [in] */ IWebFormDelegate *formDelegate) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE formDelegate( 
            /* [retval][out] */ IWebFormDelegate **formDelegate) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setFrameLoadDelegatePrivate( 
            /* [in] */ IWebFrameLoadDelegatePrivate *frameLoadDelegatePrivate) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE frameLoadDelegatePrivate( 
            /* [retval][out] */ IWebFrameLoadDelegatePrivate **frameLoadDelegatePrivate) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE scrollOffset( 
            /* [retval][out] */ LPPOINT offset) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE scrollBy( 
            /* [in] */ LPPOINT offset) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE visibleContentRect( 
            /* [retval][out] */ LPRECT rect) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE updateFocusedAndActiveState( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE markAllMatchesForText( 
            /* [in] */ BSTR search,
            /* [in] */ BOOL caseSensitive,
            /* [in] */ BOOL highlight,
            /* [in] */ UINT limit,
            /* [out] */ UINT *matches) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE unmarkAllTextMatches( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE rectsForTextMatches( 
            /* [out] */ IEnumTextMatches **pmatches) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE selectionRect( 
            /* [out][in] */ RECT *rc) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE generateSelectionImage( 
            BOOL forceWhiteText,
            /* [retval][out] */ OLE_HANDLE *hBitmap) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE canHandleRequest( 
            /* [in] */ IWebURLRequest *request,
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE clearFocusNode( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setTabKeyCyclesThroughElements( 
            /* [in] */ BOOL cycles) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE tabKeyCyclesThroughElements( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setAllowSiteSpecificHacks( 
            /* [in] */ BOOL allows) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE addAdditionalPluginDirectory( 
            /* [in] */ BSTR directory) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE loadBackForwardListFromOtherView( 
            /* [in] */ IWebView *otherView) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setCustomDropTarget( 
            /* [in] */ IDropTarget *dt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE removeCustomDropTarget( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setInitialFocus( 
            /* [in] */ BOOL forward) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE inspector( 
            /* [retval][out] */ IWebInspector **__MIDL__IWebViewPrivate0000) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE clearUndoRedoOperations( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setProhibitsMainFrameScrolling( 
            /* [in] */ BOOL prohibits) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setShouldApplyMacFontAscentHack( 
            /* [in] */ BOOL shouldApply) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE shouldClose( 
            /* [retval][out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE executeCoreCommandByName( 
            /* [in] */ BSTR name,
            /* [in] */ BSTR value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE windowAncestryDidChange( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE paintDocumentRectToContext( 
            /* [in] */ RECT rect,
            /* [in] */ OLE_HANDLE dc) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setDefersCallbacks( 
            /* [in] */ BOOL defersCallbacks) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE defersCallbacks( 
            /* [retval][out] */ BOOL *defersCallbacks) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE standardUserAgentWithApplicationName( 
            /* [in] */ BSTR applicationName,
            /* [out][retval] */ BSTR *groupName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setCustomHTMLTokenizerTimeDelay( 
            /* [in] */ double timeDelay) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setCustomHTMLTokenizerChunkSize( 
            /* [in] */ int chunkSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE backingStore( 
            /* [retval][out] */ OLE_HANDLE *hBitmap) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setTransparent( 
            /* [in] */ BOOL transparent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE transparent( 
            /* [retval][out] */ BOOL *transparent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setAlwaysUsesComplexTextCodePath( 
            /* [in] */ BOOL complex) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE alwaysUsesComplexTextCodePath( 
            /* [retval][out] */ BOOL *complex) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setCookieEnabled( 
            /* [in] */ BOOL enable) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE cookieEnabled( 
            /* [retval][out] */ BOOL *enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setMediaVolume( 
            /* [in] */ float volume) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE mediaVolume( 
            /* [retval][out] */ float *volume) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE clearMainFrameName( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE globalHistoryItem( 
            /* [retval][out] */ IWebHistoryItem **__MIDL__IWebViewPrivate0001) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE registerEmbeddedViewMIMEType( 
            /* [in] */ BSTR mimeType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setMemoryCacheDelegateCallsEnabled( 
            /* [in] */ BOOL enabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setJavaScriptURLsAreAllowed( 
            /* [in] */ BOOL areAllowed) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setCanStartPlugins( 
            /* [in] */ BOOL canStartPlugins) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MIMETypeForExtension( 
            /* [in] */ BSTR extension,
            /* [retval][out] */ BSTR *mimeType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE addUserScriptToGroup( 
            /* [in] */ BSTR groupName,
            /* [in] */ IWebScriptWorld *__MIDL__IWebViewPrivate0002,
            /* [in] */ BSTR source,
            /* [in] */ BSTR url,
            /* [in] */ unsigned int whitelistCount,
            /* [size_is][in] */ BSTR *whitelist,
            /* [in] */ unsigned int blacklistCount,
            /* [size_is][in] */ BSTR *blacklist,
            /* [in] */ WebUserScriptInjectionTime injectionTime) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE addUserStyleSheetToGroup( 
            /* [in] */ BSTR groupName,
            /* [in] */ IWebScriptWorld *__MIDL__IWebViewPrivate0003,
            /* [in] */ BSTR source,
            /* [in] */ BSTR url,
            /* [in] */ unsigned int whitelistCount,
            /* [size_is][in] */ BSTR *whitelist,
            /* [in] */ unsigned int blacklistCount,
            /* [size_is][in] */ BSTR *blacklist) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE removeUserScriptFromGroup( 
            /* [in] */ BSTR groupName,
            /* [in] */ IWebScriptWorld *__MIDL__IWebViewPrivate0004,
            /* [in] */ BSTR url) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE removeUserStyleSheetFromGroup( 
            /* [in] */ BSTR groupName,
            /* [in] */ IWebScriptWorld *__MIDL__IWebViewPrivate0005,
            /* [in] */ BSTR url) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE removeUserScriptsFromGroup( 
            /* [in] */ BSTR groupName,
            /* [in] */ IWebScriptWorld *__MIDL__IWebViewPrivate0006) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE removeUserStyleSheetsFromGroup( 
            /* [in] */ BSTR groupName,
            /* [in] */ IWebScriptWorld *__MIDL__IWebViewPrivate0007) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE removeAllUserContentFromGroup( 
            /* [in] */ BSTR groupName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setPluginHalterDelegate( 
            /* [in] */ IWebPluginHalterDelegate *d) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE pluginHalterDelegate( 
            /* [out][retval] */ IWebPluginHalterDelegate **d) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE invalidateBackingStore( 
            /* [in] */ const RECT *rect) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE addOriginAccessWhitelistEntry( 
            /* [in] */ BSTR sourceOrigin,
            /* [in] */ BSTR destinationProtocol,
            /* [in] */ BSTR destinationHost,
            /* [in] */ BOOL allowDestinationSubdomains) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE removeOriginAccessWhitelistEntry( 
            /* [in] */ BSTR sourceOrigin,
            /* [in] */ BSTR destinationProtocol,
            /* [in] */ BSTR destinationHost,
            /* [in] */ BOOL allowDestinationSubdomains) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE resetOriginAccessWhitelists( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setHistoryDelegate( 
            /* [in] */ IWebHistoryDelegate *historyDelegate) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE historyDelegate( 
            /* [retval][out] */ IWebHistoryDelegate **historyDelegate) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE addVisitedLinks( 
            /* [in] */ BSTR *visitedURLs,
            /* [in] */ unsigned int visitedURLCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isNodeHaltedPlugin( 
            /* [in] */ IDOMNode *__MIDL__IWebViewPrivate0008,
            /* [out][retval] */ BOOL *__MIDL__IWebViewPrivate0009) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE restartHaltedPluginForNode( 
            /* [in] */ IDOMNode *__MIDL__IWebViewPrivate0010) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE hasPluginForNodeBeenHalted( 
            /* [in] */ IDOMNode *__MIDL__IWebViewPrivate0011,
            /* [out][retval] */ BOOL *__MIDL__IWebViewPrivate0012) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setGeolocationProvider( 
            /* [in] */ IWebGeolocationProvider *locationProvider) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE geolocationProvider( 
            /* [retval][out] */ IWebGeolocationProvider **locationProvider) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE geolocationDidChangePosition( 
            /* [in] */ IWebGeolocationPosition *position) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE geolocationDidFailWithError( 
            /* [in] */ IWebError *error) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setDomainRelaxationForbiddenForURLScheme( 
            /* [in] */ BOOL forbidden,
            /* [in] */ BSTR scheme) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE registerURLSchemeAsSecure( 
            /* [in] */ BSTR scheme) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE nextDisplayIsSynchronous( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE paintScrollViewRectToContextAtPoint( 
            /* [in] */ RECT rect,
            /* [in] */ POINT pt,
            /* [in] */ OLE_HANDLE dc) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE reportException( 
            /* [in] */ JSContextRef context,
            /* [in] */ JSValueRef exception) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE elementFromJS( 
            /* [in] */ JSContextRef context,
            /* [in] */ JSValueRef nodeObject,
            /* [retval][out] */ IDOMElement **element) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebViewPrivateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebViewPrivate * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebViewPrivate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebViewPrivate * This);
        
        HRESULT ( STDMETHODCALLTYPE *setInViewSourceMode )( 
            IWebViewPrivate * This,
            /* [in] */ BOOL flag);
        
        HRESULT ( STDMETHODCALLTYPE *inViewSourceMode )( 
            IWebViewPrivate * This,
            /* [retval][out] */ BOOL *flag);
        
        HRESULT ( STDMETHODCALLTYPE *viewWindow )( 
            IWebViewPrivate * This,
            /* [retval][out] */ OLE_HANDLE *window);
        
        HRESULT ( STDMETHODCALLTYPE *setFormDelegate )( 
            IWebViewPrivate * This,
            /* [in] */ IWebFormDelegate *formDelegate);
        
        HRESULT ( STDMETHODCALLTYPE *formDelegate )( 
            IWebViewPrivate * This,
            /* [retval][out] */ IWebFormDelegate **formDelegate);
        
        HRESULT ( STDMETHODCALLTYPE *setFrameLoadDelegatePrivate )( 
            IWebViewPrivate * This,
            /* [in] */ IWebFrameLoadDelegatePrivate *frameLoadDelegatePrivate);
        
        HRESULT ( STDMETHODCALLTYPE *frameLoadDelegatePrivate )( 
            IWebViewPrivate * This,
            /* [retval][out] */ IWebFrameLoadDelegatePrivate **frameLoadDelegatePrivate);
        
        HRESULT ( STDMETHODCALLTYPE *scrollOffset )( 
            IWebViewPrivate * This,
            /* [retval][out] */ LPPOINT offset);
        
        HRESULT ( STDMETHODCALLTYPE *scrollBy )( 
            IWebViewPrivate * This,
            /* [in] */ LPPOINT offset);
        
        HRESULT ( STDMETHODCALLTYPE *visibleContentRect )( 
            IWebViewPrivate * This,
            /* [retval][out] */ LPRECT rect);
        
        HRESULT ( STDMETHODCALLTYPE *updateFocusedAndActiveState )( 
            IWebViewPrivate * This);
        
        HRESULT ( STDMETHODCALLTYPE *markAllMatchesForText )( 
            IWebViewPrivate * This,
            /* [in] */ BSTR search,
            /* [in] */ BOOL caseSensitive,
            /* [in] */ BOOL highlight,
            /* [in] */ UINT limit,
            /* [out] */ UINT *matches);
        
        HRESULT ( STDMETHODCALLTYPE *unmarkAllTextMatches )( 
            IWebViewPrivate * This);
        
        HRESULT ( STDMETHODCALLTYPE *rectsForTextMatches )( 
            IWebViewPrivate * This,
            /* [out] */ IEnumTextMatches **pmatches);
        
        HRESULT ( STDMETHODCALLTYPE *selectionRect )( 
            IWebViewPrivate * This,
            /* [out][in] */ RECT *rc);
        
        HRESULT ( STDMETHODCALLTYPE *generateSelectionImage )( 
            IWebViewPrivate * This,
            BOOL forceWhiteText,
            /* [retval][out] */ OLE_HANDLE *hBitmap);
        
        HRESULT ( STDMETHODCALLTYPE *canHandleRequest )( 
            IWebViewPrivate * This,
            /* [in] */ IWebURLRequest *request,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *clearFocusNode )( 
            IWebViewPrivate * This);
        
        HRESULT ( STDMETHODCALLTYPE *setTabKeyCyclesThroughElements )( 
            IWebViewPrivate * This,
            /* [in] */ BOOL cycles);
        
        HRESULT ( STDMETHODCALLTYPE *tabKeyCyclesThroughElements )( 
            IWebViewPrivate * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *setAllowSiteSpecificHacks )( 
            IWebViewPrivate * This,
            /* [in] */ BOOL allows);
        
        HRESULT ( STDMETHODCALLTYPE *addAdditionalPluginDirectory )( 
            IWebViewPrivate * This,
            /* [in] */ BSTR directory);
        
        HRESULT ( STDMETHODCALLTYPE *loadBackForwardListFromOtherView )( 
            IWebViewPrivate * This,
            /* [in] */ IWebView *otherView);
        
        HRESULT ( STDMETHODCALLTYPE *setCustomDropTarget )( 
            IWebViewPrivate * This,
            /* [in] */ IDropTarget *dt);
        
        HRESULT ( STDMETHODCALLTYPE *removeCustomDropTarget )( 
            IWebViewPrivate * This);
        
        HRESULT ( STDMETHODCALLTYPE *setInitialFocus )( 
            IWebViewPrivate * This,
            /* [in] */ BOOL forward);
        
        HRESULT ( STDMETHODCALLTYPE *inspector )( 
            IWebViewPrivate * This,
            /* [retval][out] */ IWebInspector **__MIDL__IWebViewPrivate0000);
        
        HRESULT ( STDMETHODCALLTYPE *clearUndoRedoOperations )( 
            IWebViewPrivate * This);
        
        HRESULT ( STDMETHODCALLTYPE *setProhibitsMainFrameScrolling )( 
            IWebViewPrivate * This,
            /* [in] */ BOOL prohibits);
        
        HRESULT ( STDMETHODCALLTYPE *setShouldApplyMacFontAscentHack )( 
            IWebViewPrivate * This,
            /* [in] */ BOOL shouldApply);
        
        HRESULT ( STDMETHODCALLTYPE *shouldClose )( 
            IWebViewPrivate * This,
            /* [retval][out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *executeCoreCommandByName )( 
            IWebViewPrivate * This,
            /* [in] */ BSTR name,
            /* [in] */ BSTR value);
        
        HRESULT ( STDMETHODCALLTYPE *windowAncestryDidChange )( 
            IWebViewPrivate * This);
        
        HRESULT ( STDMETHODCALLTYPE *paintDocumentRectToContext )( 
            IWebViewPrivate * This,
            /* [in] */ RECT rect,
            /* [in] */ OLE_HANDLE dc);
        
        HRESULT ( STDMETHODCALLTYPE *setDefersCallbacks )( 
            IWebViewPrivate * This,
            /* [in] */ BOOL defersCallbacks);
        
        HRESULT ( STDMETHODCALLTYPE *defersCallbacks )( 
            IWebViewPrivate * This,
            /* [retval][out] */ BOOL *defersCallbacks);
        
        HRESULT ( STDMETHODCALLTYPE *standardUserAgentWithApplicationName )( 
            IWebViewPrivate * This,
            /* [in] */ BSTR applicationName,
            /* [out][retval] */ BSTR *groupName);
        
        HRESULT ( STDMETHODCALLTYPE *setCustomHTMLTokenizerTimeDelay )( 
            IWebViewPrivate * This,
            /* [in] */ double timeDelay);
        
        HRESULT ( STDMETHODCALLTYPE *setCustomHTMLTokenizerChunkSize )( 
            IWebViewPrivate * This,
            /* [in] */ int chunkSize);
        
        HRESULT ( STDMETHODCALLTYPE *backingStore )( 
            IWebViewPrivate * This,
            /* [retval][out] */ OLE_HANDLE *hBitmap);
        
        HRESULT ( STDMETHODCALLTYPE *setTransparent )( 
            IWebViewPrivate * This,
            /* [in] */ BOOL transparent);
        
        HRESULT ( STDMETHODCALLTYPE *transparent )( 
            IWebViewPrivate * This,
            /* [retval][out] */ BOOL *transparent);
        
        HRESULT ( STDMETHODCALLTYPE *setAlwaysUsesComplexTextCodePath )( 
            IWebViewPrivate * This,
            /* [in] */ BOOL complex);
        
        HRESULT ( STDMETHODCALLTYPE *alwaysUsesComplexTextCodePath )( 
            IWebViewPrivate * This,
            /* [retval][out] */ BOOL *complex);
        
        HRESULT ( STDMETHODCALLTYPE *setCookieEnabled )( 
            IWebViewPrivate * This,
            /* [in] */ BOOL enable);
        
        HRESULT ( STDMETHODCALLTYPE *cookieEnabled )( 
            IWebViewPrivate * This,
            /* [retval][out] */ BOOL *enabled);
        
        HRESULT ( STDMETHODCALLTYPE *setMediaVolume )( 
            IWebViewPrivate * This,
            /* [in] */ float volume);
        
        HRESULT ( STDMETHODCALLTYPE *mediaVolume )( 
            IWebViewPrivate * This,
            /* [retval][out] */ float *volume);
        
        HRESULT ( STDMETHODCALLTYPE *clearMainFrameName )( 
            IWebViewPrivate * This);
        
        HRESULT ( STDMETHODCALLTYPE *globalHistoryItem )( 
            IWebViewPrivate * This,
            /* [retval][out] */ IWebHistoryItem **__MIDL__IWebViewPrivate0001);
        
        HRESULT ( STDMETHODCALLTYPE *registerEmbeddedViewMIMEType )( 
            IWebViewPrivate * This,
            /* [in] */ BSTR mimeType);
        
        HRESULT ( STDMETHODCALLTYPE *setMemoryCacheDelegateCallsEnabled )( 
            IWebViewPrivate * This,
            /* [in] */ BOOL enabled);
        
        HRESULT ( STDMETHODCALLTYPE *setJavaScriptURLsAreAllowed )( 
            IWebViewPrivate * This,
            /* [in] */ BOOL areAllowed);
        
        HRESULT ( STDMETHODCALLTYPE *setCanStartPlugins )( 
            IWebViewPrivate * This,
            /* [in] */ BOOL canStartPlugins);
        
        HRESULT ( STDMETHODCALLTYPE *MIMETypeForExtension )( 
            IWebViewPrivate * This,
            /* [in] */ BSTR extension,
            /* [retval][out] */ BSTR *mimeType);
        
        HRESULT ( STDMETHODCALLTYPE *addUserScriptToGroup )( 
            IWebViewPrivate * This,
            /* [in] */ BSTR groupName,
            /* [in] */ IWebScriptWorld *__MIDL__IWebViewPrivate0002,
            /* [in] */ BSTR source,
            /* [in] */ BSTR url,
            /* [in] */ unsigned int whitelistCount,
            /* [size_is][in] */ BSTR *whitelist,
            /* [in] */ unsigned int blacklistCount,
            /* [size_is][in] */ BSTR *blacklist,
            /* [in] */ WebUserScriptInjectionTime injectionTime);
        
        HRESULT ( STDMETHODCALLTYPE *addUserStyleSheetToGroup )( 
            IWebViewPrivate * This,
            /* [in] */ BSTR groupName,
            /* [in] */ IWebScriptWorld *__MIDL__IWebViewPrivate0003,
            /* [in] */ BSTR source,
            /* [in] */ BSTR url,
            /* [in] */ unsigned int whitelistCount,
            /* [size_is][in] */ BSTR *whitelist,
            /* [in] */ unsigned int blacklistCount,
            /* [size_is][in] */ BSTR *blacklist);
        
        HRESULT ( STDMETHODCALLTYPE *removeUserScriptFromGroup )( 
            IWebViewPrivate * This,
            /* [in] */ BSTR groupName,
            /* [in] */ IWebScriptWorld *__MIDL__IWebViewPrivate0004,
            /* [in] */ BSTR url);
        
        HRESULT ( STDMETHODCALLTYPE *removeUserStyleSheetFromGroup )( 
            IWebViewPrivate * This,
            /* [in] */ BSTR groupName,
            /* [in] */ IWebScriptWorld *__MIDL__IWebViewPrivate0005,
            /* [in] */ BSTR url);
        
        HRESULT ( STDMETHODCALLTYPE *removeUserScriptsFromGroup )( 
            IWebViewPrivate * This,
            /* [in] */ BSTR groupName,
            /* [in] */ IWebScriptWorld *__MIDL__IWebViewPrivate0006);
        
        HRESULT ( STDMETHODCALLTYPE *removeUserStyleSheetsFromGroup )( 
            IWebViewPrivate * This,
            /* [in] */ BSTR groupName,
            /* [in] */ IWebScriptWorld *__MIDL__IWebViewPrivate0007);
        
        HRESULT ( STDMETHODCALLTYPE *removeAllUserContentFromGroup )( 
            IWebViewPrivate * This,
            /* [in] */ BSTR groupName);
        
        HRESULT ( STDMETHODCALLTYPE *setPluginHalterDelegate )( 
            IWebViewPrivate * This,
            /* [in] */ IWebPluginHalterDelegate *d);
        
        HRESULT ( STDMETHODCALLTYPE *pluginHalterDelegate )( 
            IWebViewPrivate * This,
            /* [out][retval] */ IWebPluginHalterDelegate **d);
        
        HRESULT ( STDMETHODCALLTYPE *invalidateBackingStore )( 
            IWebViewPrivate * This,
            /* [in] */ const RECT *rect);
        
        HRESULT ( STDMETHODCALLTYPE *addOriginAccessWhitelistEntry )( 
            IWebViewPrivate * This,
            /* [in] */ BSTR sourceOrigin,
            /* [in] */ BSTR destinationProtocol,
            /* [in] */ BSTR destinationHost,
            /* [in] */ BOOL allowDestinationSubdomains);
        
        HRESULT ( STDMETHODCALLTYPE *removeOriginAccessWhitelistEntry )( 
            IWebViewPrivate * This,
            /* [in] */ BSTR sourceOrigin,
            /* [in] */ BSTR destinationProtocol,
            /* [in] */ BSTR destinationHost,
            /* [in] */ BOOL allowDestinationSubdomains);
        
        HRESULT ( STDMETHODCALLTYPE *resetOriginAccessWhitelists )( 
            IWebViewPrivate * This);
        
        HRESULT ( STDMETHODCALLTYPE *setHistoryDelegate )( 
            IWebViewPrivate * This,
            /* [in] */ IWebHistoryDelegate *historyDelegate);
        
        HRESULT ( STDMETHODCALLTYPE *historyDelegate )( 
            IWebViewPrivate * This,
            /* [retval][out] */ IWebHistoryDelegate **historyDelegate);
        
        HRESULT ( STDMETHODCALLTYPE *addVisitedLinks )( 
            IWebViewPrivate * This,
            /* [in] */ BSTR *visitedURLs,
            /* [in] */ unsigned int visitedURLCount);
        
        HRESULT ( STDMETHODCALLTYPE *isNodeHaltedPlugin )( 
            IWebViewPrivate * This,
            /* [in] */ IDOMNode *__MIDL__IWebViewPrivate0008,
            /* [out][retval] */ BOOL *__MIDL__IWebViewPrivate0009);
        
        HRESULT ( STDMETHODCALLTYPE *restartHaltedPluginForNode )( 
            IWebViewPrivate * This,
            /* [in] */ IDOMNode *__MIDL__IWebViewPrivate0010);
        
        HRESULT ( STDMETHODCALLTYPE *hasPluginForNodeBeenHalted )( 
            IWebViewPrivate * This,
            /* [in] */ IDOMNode *__MIDL__IWebViewPrivate0011,
            /* [out][retval] */ BOOL *__MIDL__IWebViewPrivate0012);
        
        HRESULT ( STDMETHODCALLTYPE *setGeolocationProvider )( 
            IWebViewPrivate * This,
            /* [in] */ IWebGeolocationProvider *locationProvider);
        
        HRESULT ( STDMETHODCALLTYPE *geolocationProvider )( 
            IWebViewPrivate * This,
            /* [retval][out] */ IWebGeolocationProvider **locationProvider);
        
        HRESULT ( STDMETHODCALLTYPE *geolocationDidChangePosition )( 
            IWebViewPrivate * This,
            /* [in] */ IWebGeolocationPosition *position);
        
        HRESULT ( STDMETHODCALLTYPE *geolocationDidFailWithError )( 
            IWebViewPrivate * This,
            /* [in] */ IWebError *error);
        
        HRESULT ( STDMETHODCALLTYPE *setDomainRelaxationForbiddenForURLScheme )( 
            IWebViewPrivate * This,
            /* [in] */ BOOL forbidden,
            /* [in] */ BSTR scheme);
        
        HRESULT ( STDMETHODCALLTYPE *registerURLSchemeAsSecure )( 
            IWebViewPrivate * This,
            /* [in] */ BSTR scheme);
        
        HRESULT ( STDMETHODCALLTYPE *nextDisplayIsSynchronous )( 
            IWebViewPrivate * This);
        
        HRESULT ( STDMETHODCALLTYPE *paintScrollViewRectToContextAtPoint )( 
            IWebViewPrivate * This,
            /* [in] */ RECT rect,
            /* [in] */ POINT pt,
            /* [in] */ OLE_HANDLE dc);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *reportException )( 
            IWebViewPrivate * This,
            /* [in] */ JSContextRef context,
            /* [in] */ JSValueRef exception);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *elementFromJS )( 
            IWebViewPrivate * This,
            /* [in] */ JSContextRef context,
            /* [in] */ JSValueRef nodeObject,
            /* [retval][out] */ IDOMElement **element);
        
        END_INTERFACE
    } IWebViewPrivateVtbl;

    interface IWebViewPrivate
    {
        CONST_VTBL struct IWebViewPrivateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebViewPrivate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebViewPrivate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebViewPrivate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebViewPrivate_setInViewSourceMode(This,flag)	\
    ( (This)->lpVtbl -> setInViewSourceMode(This,flag) ) 

#define IWebViewPrivate_inViewSourceMode(This,flag)	\
    ( (This)->lpVtbl -> inViewSourceMode(This,flag) ) 

#define IWebViewPrivate_viewWindow(This,window)	\
    ( (This)->lpVtbl -> viewWindow(This,window) ) 

#define IWebViewPrivate_setFormDelegate(This,formDelegate)	\
    ( (This)->lpVtbl -> setFormDelegate(This,formDelegate) ) 

#define IWebViewPrivate_formDelegate(This,formDelegate)	\
    ( (This)->lpVtbl -> formDelegate(This,formDelegate) ) 

#define IWebViewPrivate_setFrameLoadDelegatePrivate(This,frameLoadDelegatePrivate)	\
    ( (This)->lpVtbl -> setFrameLoadDelegatePrivate(This,frameLoadDelegatePrivate) ) 

#define IWebViewPrivate_frameLoadDelegatePrivate(This,frameLoadDelegatePrivate)	\
    ( (This)->lpVtbl -> frameLoadDelegatePrivate(This,frameLoadDelegatePrivate) ) 

#define IWebViewPrivate_scrollOffset(This,offset)	\
    ( (This)->lpVtbl -> scrollOffset(This,offset) ) 

#define IWebViewPrivate_scrollBy(This,offset)	\
    ( (This)->lpVtbl -> scrollBy(This,offset) ) 

#define IWebViewPrivate_visibleContentRect(This,rect)	\
    ( (This)->lpVtbl -> visibleContentRect(This,rect) ) 

#define IWebViewPrivate_updateFocusedAndActiveState(This)	\
    ( (This)->lpVtbl -> updateFocusedAndActiveState(This) ) 

#define IWebViewPrivate_markAllMatchesForText(This,search,caseSensitive,highlight,limit,matches)	\
    ( (This)->lpVtbl -> markAllMatchesForText(This,search,caseSensitive,highlight,limit,matches) ) 

#define IWebViewPrivate_unmarkAllTextMatches(This)	\
    ( (This)->lpVtbl -> unmarkAllTextMatches(This) ) 

#define IWebViewPrivate_rectsForTextMatches(This,pmatches)	\
    ( (This)->lpVtbl -> rectsForTextMatches(This,pmatches) ) 

#define IWebViewPrivate_selectionRect(This,rc)	\
    ( (This)->lpVtbl -> selectionRect(This,rc) ) 

#define IWebViewPrivate_generateSelectionImage(This,forceWhiteText,hBitmap)	\
    ( (This)->lpVtbl -> generateSelectionImage(This,forceWhiteText,hBitmap) ) 

#define IWebViewPrivate_canHandleRequest(This,request,result)	\
    ( (This)->lpVtbl -> canHandleRequest(This,request,result) ) 

#define IWebViewPrivate_clearFocusNode(This)	\
    ( (This)->lpVtbl -> clearFocusNode(This) ) 

#define IWebViewPrivate_setTabKeyCyclesThroughElements(This,cycles)	\
    ( (This)->lpVtbl -> setTabKeyCyclesThroughElements(This,cycles) ) 

#define IWebViewPrivate_tabKeyCyclesThroughElements(This,result)	\
    ( (This)->lpVtbl -> tabKeyCyclesThroughElements(This,result) ) 

#define IWebViewPrivate_setAllowSiteSpecificHacks(This,allows)	\
    ( (This)->lpVtbl -> setAllowSiteSpecificHacks(This,allows) ) 

#define IWebViewPrivate_addAdditionalPluginDirectory(This,directory)	\
    ( (This)->lpVtbl -> addAdditionalPluginDirectory(This,directory) ) 

#define IWebViewPrivate_loadBackForwardListFromOtherView(This,otherView)	\
    ( (This)->lpVtbl -> loadBackForwardListFromOtherView(This,otherView) ) 

#define IWebViewPrivate_setCustomDropTarget(This,dt)	\
    ( (This)->lpVtbl -> setCustomDropTarget(This,dt) ) 

#define IWebViewPrivate_removeCustomDropTarget(This)	\
    ( (This)->lpVtbl -> removeCustomDropTarget(This) ) 

#define IWebViewPrivate_setInitialFocus(This,forward)	\
    ( (This)->lpVtbl -> setInitialFocus(This,forward) ) 

#define IWebViewPrivate_inspector(This,__MIDL__IWebViewPrivate0000)	\
    ( (This)->lpVtbl -> inspector(This,__MIDL__IWebViewPrivate0000) ) 

#define IWebViewPrivate_clearUndoRedoOperations(This)	\
    ( (This)->lpVtbl -> clearUndoRedoOperations(This) ) 

#define IWebViewPrivate_setProhibitsMainFrameScrolling(This,prohibits)	\
    ( (This)->lpVtbl -> setProhibitsMainFrameScrolling(This,prohibits) ) 

#define IWebViewPrivate_setShouldApplyMacFontAscentHack(This,shouldApply)	\
    ( (This)->lpVtbl -> setShouldApplyMacFontAscentHack(This,shouldApply) ) 

#define IWebViewPrivate_shouldClose(This,result)	\
    ( (This)->lpVtbl -> shouldClose(This,result) ) 

#define IWebViewPrivate_executeCoreCommandByName(This,name,value)	\
    ( (This)->lpVtbl -> executeCoreCommandByName(This,name,value) ) 

#define IWebViewPrivate_windowAncestryDidChange(This)	\
    ( (This)->lpVtbl -> windowAncestryDidChange(This) ) 

#define IWebViewPrivate_paintDocumentRectToContext(This,rect,dc)	\
    ( (This)->lpVtbl -> paintDocumentRectToContext(This,rect,dc) ) 

#define IWebViewPrivate_setDefersCallbacks(This,defersCallbacks)	\
    ( (This)->lpVtbl -> setDefersCallbacks(This,defersCallbacks) ) 

#define IWebViewPrivate_defersCallbacks(This,defersCallbacks)	\
    ( (This)->lpVtbl -> defersCallbacks(This,defersCallbacks) ) 

#define IWebViewPrivate_standardUserAgentWithApplicationName(This,applicationName,groupName)	\
    ( (This)->lpVtbl -> standardUserAgentWithApplicationName(This,applicationName,groupName) ) 

#define IWebViewPrivate_setCustomHTMLTokenizerTimeDelay(This,timeDelay)	\
    ( (This)->lpVtbl -> setCustomHTMLTokenizerTimeDelay(This,timeDelay) ) 

#define IWebViewPrivate_setCustomHTMLTokenizerChunkSize(This,chunkSize)	\
    ( (This)->lpVtbl -> setCustomHTMLTokenizerChunkSize(This,chunkSize) ) 

#define IWebViewPrivate_backingStore(This,hBitmap)	\
    ( (This)->lpVtbl -> backingStore(This,hBitmap) ) 

#define IWebViewPrivate_setTransparent(This,transparent)	\
    ( (This)->lpVtbl -> setTransparent(This,transparent) ) 

#define IWebViewPrivate_transparent(This,transparent)	\
    ( (This)->lpVtbl -> transparent(This,transparent) ) 

#define IWebViewPrivate_setAlwaysUsesComplexTextCodePath(This,complex)	\
    ( (This)->lpVtbl -> setAlwaysUsesComplexTextCodePath(This,complex) ) 

#define IWebViewPrivate_alwaysUsesComplexTextCodePath(This,complex)	\
    ( (This)->lpVtbl -> alwaysUsesComplexTextCodePath(This,complex) ) 

#define IWebViewPrivate_setCookieEnabled(This,enable)	\
    ( (This)->lpVtbl -> setCookieEnabled(This,enable) ) 

#define IWebViewPrivate_cookieEnabled(This,enabled)	\
    ( (This)->lpVtbl -> cookieEnabled(This,enabled) ) 

#define IWebViewPrivate_setMediaVolume(This,volume)	\
    ( (This)->lpVtbl -> setMediaVolume(This,volume) ) 

#define IWebViewPrivate_mediaVolume(This,volume)	\
    ( (This)->lpVtbl -> mediaVolume(This,volume) ) 

#define IWebViewPrivate_clearMainFrameName(This)	\
    ( (This)->lpVtbl -> clearMainFrameName(This) ) 

#define IWebViewPrivate_globalHistoryItem(This,__MIDL__IWebViewPrivate0001)	\
    ( (This)->lpVtbl -> globalHistoryItem(This,__MIDL__IWebViewPrivate0001) ) 

#define IWebViewPrivate_registerEmbeddedViewMIMEType(This,mimeType)	\
    ( (This)->lpVtbl -> registerEmbeddedViewMIMEType(This,mimeType) ) 

#define IWebViewPrivate_setMemoryCacheDelegateCallsEnabled(This,enabled)	\
    ( (This)->lpVtbl -> setMemoryCacheDelegateCallsEnabled(This,enabled) ) 

#define IWebViewPrivate_setJavaScriptURLsAreAllowed(This,areAllowed)	\
    ( (This)->lpVtbl -> setJavaScriptURLsAreAllowed(This,areAllowed) ) 

#define IWebViewPrivate_setCanStartPlugins(This,canStartPlugins)	\
    ( (This)->lpVtbl -> setCanStartPlugins(This,canStartPlugins) ) 

#define IWebViewPrivate_MIMETypeForExtension(This,extension,mimeType)	\
    ( (This)->lpVtbl -> MIMETypeForExtension(This,extension,mimeType) ) 

#define IWebViewPrivate_addUserScriptToGroup(This,groupName,__MIDL__IWebViewPrivate0002,source,url,whitelistCount,whitelist,blacklistCount,blacklist,injectionTime)	\
    ( (This)->lpVtbl -> addUserScriptToGroup(This,groupName,__MIDL__IWebViewPrivate0002,source,url,whitelistCount,whitelist,blacklistCount,blacklist,injectionTime) ) 

#define IWebViewPrivate_addUserStyleSheetToGroup(This,groupName,__MIDL__IWebViewPrivate0003,source,url,whitelistCount,whitelist,blacklistCount,blacklist)	\
    ( (This)->lpVtbl -> addUserStyleSheetToGroup(This,groupName,__MIDL__IWebViewPrivate0003,source,url,whitelistCount,whitelist,blacklistCount,blacklist) ) 

#define IWebViewPrivate_removeUserScriptFromGroup(This,groupName,__MIDL__IWebViewPrivate0004,url)	\
    ( (This)->lpVtbl -> removeUserScriptFromGroup(This,groupName,__MIDL__IWebViewPrivate0004,url) ) 

#define IWebViewPrivate_removeUserStyleSheetFromGroup(This,groupName,__MIDL__IWebViewPrivate0005,url)	\
    ( (This)->lpVtbl -> removeUserStyleSheetFromGroup(This,groupName,__MIDL__IWebViewPrivate0005,url) ) 

#define IWebViewPrivate_removeUserScriptsFromGroup(This,groupName,__MIDL__IWebViewPrivate0006)	\
    ( (This)->lpVtbl -> removeUserScriptsFromGroup(This,groupName,__MIDL__IWebViewPrivate0006) ) 

#define IWebViewPrivate_removeUserStyleSheetsFromGroup(This,groupName,__MIDL__IWebViewPrivate0007)	\
    ( (This)->lpVtbl -> removeUserStyleSheetsFromGroup(This,groupName,__MIDL__IWebViewPrivate0007) ) 

#define IWebViewPrivate_removeAllUserContentFromGroup(This,groupName)	\
    ( (This)->lpVtbl -> removeAllUserContentFromGroup(This,groupName) ) 

#define IWebViewPrivate_setPluginHalterDelegate(This,d)	\
    ( (This)->lpVtbl -> setPluginHalterDelegate(This,d) ) 

#define IWebViewPrivate_pluginHalterDelegate(This,d)	\
    ( (This)->lpVtbl -> pluginHalterDelegate(This,d) ) 

#define IWebViewPrivate_invalidateBackingStore(This,rect)	\
    ( (This)->lpVtbl -> invalidateBackingStore(This,rect) ) 

#define IWebViewPrivate_addOriginAccessWhitelistEntry(This,sourceOrigin,destinationProtocol,destinationHost,allowDestinationSubdomains)	\
    ( (This)->lpVtbl -> addOriginAccessWhitelistEntry(This,sourceOrigin,destinationProtocol,destinationHost,allowDestinationSubdomains) ) 

#define IWebViewPrivate_removeOriginAccessWhitelistEntry(This,sourceOrigin,destinationProtocol,destinationHost,allowDestinationSubdomains)	\
    ( (This)->lpVtbl -> removeOriginAccessWhitelistEntry(This,sourceOrigin,destinationProtocol,destinationHost,allowDestinationSubdomains) ) 

#define IWebViewPrivate_resetOriginAccessWhitelists(This)	\
    ( (This)->lpVtbl -> resetOriginAccessWhitelists(This) ) 

#define IWebViewPrivate_setHistoryDelegate(This,historyDelegate)	\
    ( (This)->lpVtbl -> setHistoryDelegate(This,historyDelegate) ) 

#define IWebViewPrivate_historyDelegate(This,historyDelegate)	\
    ( (This)->lpVtbl -> historyDelegate(This,historyDelegate) ) 

#define IWebViewPrivate_addVisitedLinks(This,visitedURLs,visitedURLCount)	\
    ( (This)->lpVtbl -> addVisitedLinks(This,visitedURLs,visitedURLCount) ) 

#define IWebViewPrivate_isNodeHaltedPlugin(This,__MIDL__IWebViewPrivate0008,__MIDL__IWebViewPrivate0009)	\
    ( (This)->lpVtbl -> isNodeHaltedPlugin(This,__MIDL__IWebViewPrivate0008,__MIDL__IWebViewPrivate0009) ) 

#define IWebViewPrivate_restartHaltedPluginForNode(This,__MIDL__IWebViewPrivate0010)	\
    ( (This)->lpVtbl -> restartHaltedPluginForNode(This,__MIDL__IWebViewPrivate0010) ) 

#define IWebViewPrivate_hasPluginForNodeBeenHalted(This,__MIDL__IWebViewPrivate0011,__MIDL__IWebViewPrivate0012)	\
    ( (This)->lpVtbl -> hasPluginForNodeBeenHalted(This,__MIDL__IWebViewPrivate0011,__MIDL__IWebViewPrivate0012) ) 

#define IWebViewPrivate_setGeolocationProvider(This,locationProvider)	\
    ( (This)->lpVtbl -> setGeolocationProvider(This,locationProvider) ) 

#define IWebViewPrivate_geolocationProvider(This,locationProvider)	\
    ( (This)->lpVtbl -> geolocationProvider(This,locationProvider) ) 

#define IWebViewPrivate_geolocationDidChangePosition(This,position)	\
    ( (This)->lpVtbl -> geolocationDidChangePosition(This,position) ) 

#define IWebViewPrivate_geolocationDidFailWithError(This,error)	\
    ( (This)->lpVtbl -> geolocationDidFailWithError(This,error) ) 

#define IWebViewPrivate_setDomainRelaxationForbiddenForURLScheme(This,forbidden,scheme)	\
    ( (This)->lpVtbl -> setDomainRelaxationForbiddenForURLScheme(This,forbidden,scheme) ) 

#define IWebViewPrivate_registerURLSchemeAsSecure(This,scheme)	\
    ( (This)->lpVtbl -> registerURLSchemeAsSecure(This,scheme) ) 

#define IWebViewPrivate_nextDisplayIsSynchronous(This)	\
    ( (This)->lpVtbl -> nextDisplayIsSynchronous(This) ) 

#define IWebViewPrivate_paintScrollViewRectToContextAtPoint(This,rect,pt,dc)	\
    ( (This)->lpVtbl -> paintScrollViewRectToContextAtPoint(This,rect,pt,dc) ) 

#define IWebViewPrivate_reportException(This,context,exception)	\
    ( (This)->lpVtbl -> reportException(This,context,exception) ) 

#define IWebViewPrivate_elementFromJS(This,context,nodeObject,element)	\
    ( (This)->lpVtbl -> elementFromJS(This,context,nodeObject,element) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebViewPrivate_INTERFACE_DEFINED__ */


#ifndef __IWebWorkersPrivate_INTERFACE_DEFINED__
#define __IWebWorkersPrivate_INTERFACE_DEFINED__

/* interface IWebWorkersPrivate */
/* [unique][uuid][hidden][oleautomation][object] */ 


EXTERN_C const IID IID_IWebWorkersPrivate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("537069C5-389C-41ae-9A82-423ACA8B2C02")
    IWebWorkersPrivate : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE workerThreadCount( 
            /* [retval][out] */ UINT *number) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWebWorkersPrivateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWebWorkersPrivate * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWebWorkersPrivate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWebWorkersPrivate * This);
        
        HRESULT ( STDMETHODCALLTYPE *workerThreadCount )( 
            IWebWorkersPrivate * This,
            /* [retval][out] */ UINT *number);
        
        END_INTERFACE
    } IWebWorkersPrivateVtbl;

    interface IWebWorkersPrivate
    {
        CONST_VTBL struct IWebWorkersPrivateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWebWorkersPrivate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWebWorkersPrivate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWebWorkersPrivate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWebWorkersPrivate_workerThreadCount(This,number)	\
    ( (This)->lpVtbl -> workerThreadCount(This,number) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWebWorkersPrivate_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_WebKit_0000_0150 */
/* [local] */ 

void shutDownWebKit();


extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0150_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_WebKit_0000_0150_v0_0_s_ifspec;


#ifndef __WebKit_LIBRARY_DEFINED__
#define __WebKit_LIBRARY_DEFINED__

/* library WebKit */
/* [version][helpstring][uuid] */ 


EXTERN_C const IID LIBID_WebKit;

EXTERN_C const CLSID CLSID_WebView;

#ifdef __cplusplus

class DECLSPEC_UUID("d6bca079-f61c-4e1e-b453-32a0477d02e3")
WebView;
#endif

EXTERN_C const CLSID CLSID_WebFrame;

#ifdef __cplusplus

class DECLSPEC_UUID("a3676398-4485-4a9d-87dc-cb5a40e6351d")
WebFrame;
#endif

EXTERN_C const CLSID CLSID_WebIconDatabase;

#ifdef __cplusplus

class DECLSPEC_UUID("66827ec1-3aef-4241-bac5-f776b44f030f")
WebIconDatabase;
#endif

EXTERN_C const CLSID CLSID_WebMutableURLRequest;

#ifdef __cplusplus

class DECLSPEC_UUID("a062ecc3-bb1b-4694-a569-f59e0ad6be0c")
WebMutableURLRequest;
#endif

EXTERN_C const CLSID CLSID_WebNotificationCenter;

#ifdef __cplusplus

class DECLSPEC_UUID("ba590766-0a6f-46c7-b96e-743490d94cb7")
WebNotificationCenter;
#endif

EXTERN_C const CLSID CLSID_WebHistory;

#ifdef __cplusplus

class DECLSPEC_UUID("a4b9b45d-949f-4c8c-9b92-6fbfcc1caaa2")
WebHistory;
#endif

EXTERN_C const CLSID CLSID_CFDictionaryPropertyBag;

#ifdef __cplusplus

class DECLSPEC_UUID("dd653964-4d37-4fb2-9cb6-6a9a97719332")
CFDictionaryPropertyBag;
#endif

EXTERN_C const CLSID CLSID_WebHistoryItem;

#ifdef __cplusplus

class DECLSPEC_UUID("6be190e9-1725-4e4a-88db-6a9fe242c9e5")
WebHistoryItem;
#endif

EXTERN_C const CLSID CLSID_WebCache;

#ifdef __cplusplus

class DECLSPEC_UUID("f71071fd-a51b-4b69-9eb6-44374405e80c")
WebCache;
#endif

EXTERN_C const CLSID CLSID_WebJavaScriptCollector;

#ifdef __cplusplus

class DECLSPEC_UUID("1820D883-42FE-4b78-88C8-5456BB19D224")
WebJavaScriptCollector;
#endif

EXTERN_C const CLSID CLSID_WebPreferences;

#ifdef __cplusplus

class DECLSPEC_UUID("67B89F90-F778-438b-ABBF-34D1ACBF8651")
WebPreferences;
#endif

EXTERN_C const CLSID CLSID_WebKitStatistics;

#ifdef __cplusplus

class DECLSPEC_UUID("E93AA8D7-F362-4a4a-A95D-325906BEB5F0")
WebKitStatistics;
#endif

EXTERN_C const CLSID CLSID_WebError;

#ifdef __cplusplus

class DECLSPEC_UUID("6C6AF3F9-36B4-4bf7-8BDE-74DCD4AD75A4")
WebError;
#endif

EXTERN_C const CLSID CLSID_WebURLCredential;

#ifdef __cplusplus

class DECLSPEC_UUID("7433F53B-7FE9-484a-9432-72909457A646")
WebURLCredential;
#endif

EXTERN_C const CLSID CLSID_WebDownload;

#ifdef __cplusplus

class DECLSPEC_UUID("C0F98BD9-3B1C-413d-904A-E2D1453EAF1F")
WebDownload;
#endif

EXTERN_C const CLSID CLSID_WebURLRequest;

#ifdef __cplusplus

class DECLSPEC_UUID("2FB5499A-BB5D-4469-8517-789FEC8FD9BA")
WebURLRequest;
#endif

EXTERN_C const CLSID CLSID_WebURLProtectionSpace;

#ifdef __cplusplus

class DECLSPEC_UUID("F366A6E8-E43C-4fd4-AAB0-8E6E79C73E6E")
WebURLProtectionSpace;
#endif

EXTERN_C const CLSID CLSID_WebScrollBar;

#ifdef __cplusplus

class DECLSPEC_UUID("24A53AD5-AA9F-44e6-AA22-2C7C250B661A")
WebScrollBar;
#endif

EXTERN_C const CLSID CLSID_WebURLResponse;

#ifdef __cplusplus

class DECLSPEC_UUID("AB201196-8DD2-4d45-AEBD-029B6A37AA27")
WebURLResponse;
#endif

EXTERN_C const CLSID CLSID_WebTextRenderer;

#ifdef __cplusplus

class DECLSPEC_UUID("24040cd6-aff4-4a51-9c8b-71539580ee76")
WebTextRenderer;
#endif

EXTERN_C const CLSID CLSID_WebDatabaseManager;

#ifdef __cplusplus

class DECLSPEC_UUID("C2A1BFC2-1E7C-49fe-8592-D0C7FB440BC0")
WebDatabaseManager;
#endif

EXTERN_C const CLSID CLSID_WebArchive;

#ifdef __cplusplus

class DECLSPEC_UUID("1B63D781-9BC4-4a04-899F-C4B05BBD3BE5")
WebArchive;
#endif

EXTERN_C const CLSID CLSID_WebCoreStatistics;

#ifdef __cplusplus

class DECLSPEC_UUID("96B93356-9D61-4b3f-A6CF-A78283AC9649")
WebCoreStatistics;
#endif

EXTERN_C const CLSID CLSID_WebCookieManager;

#ifdef __cplusplus

class DECLSPEC_UUID("3F35F332-BB2B-49b3-AEDD-27B317687E07")
WebCookieManager;
#endif

EXTERN_C const CLSID CLSID_WebWorkersPrivate;

#ifdef __cplusplus

class DECLSPEC_UUID("0967AAFF-2FFE-4fcc-81F3-3FF2A9C6DCE2")
WebWorkersPrivate;
#endif

EXTERN_C const CLSID CLSID_WebScriptWorld;

#ifdef __cplusplus

class DECLSPEC_UUID("D3C301EE-D59A-49c0-A43A-9EA01CDB1590")
WebScriptWorld;
#endif

EXTERN_C const CLSID CLSID_WebSerializedJSValue;

#ifdef __cplusplus

class DECLSPEC_UUID("13C45703-A3B3-8797-276B-75632F6165C3")
WebSerializedJSValue;
#endif

EXTERN_C const CLSID CLSID_WebGeolocationPosition;

#ifdef __cplusplus

class DECLSPEC_UUID("67712611-83CF-4703-89FC-07A0E2A19C0D")
WebGeolocationPosition;
#endif

EXTERN_C const CLSID CLSID_WebUserContentURLPattern;

#ifdef __cplusplus

class DECLSPEC_UUID("2D62AE25-DEAA-4945-A76E-CCE05E899664")
WebUserContentURLPattern;
#endif
#endif /* __WebKit_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

unsigned long             __RPC_USER  HBITMAP_UserSize(     unsigned long *, unsigned long            , HBITMAP * ); 
unsigned char * __RPC_USER  HBITMAP_UserMarshal(  unsigned long *, unsigned char *, HBITMAP * ); 
unsigned char * __RPC_USER  HBITMAP_UserUnmarshal(unsigned long *, unsigned char *, HBITMAP * ); 
void                      __RPC_USER  HBITMAP_UserFree(     unsigned long *, HBITMAP * ); 

unsigned long             __RPC_USER  HDC_UserSize(     unsigned long *, unsigned long            , HDC * ); 
unsigned char * __RPC_USER  HDC_UserMarshal(  unsigned long *, unsigned char *, HDC * ); 
unsigned char * __RPC_USER  HDC_UserUnmarshal(unsigned long *, unsigned char *, HDC * ); 
void                      __RPC_USER  HDC_UserFree(     unsigned long *, HDC * ); 

unsigned long             __RPC_USER  VARIANT_UserSize(     unsigned long *, unsigned long            , VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal(  unsigned long *, unsigned char *, VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal(unsigned long *, unsigned char *, VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree(     unsigned long *, VARIANT * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif


